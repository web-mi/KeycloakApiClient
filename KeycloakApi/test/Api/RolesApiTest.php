<?php
/**
 * RolesApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace WebMI\KeycloakApiClient\KeycloakApi\Test\Api;

use \WebMI\KeycloakApiClient\KeycloakApi\Configuration;
use \WebMI\KeycloakApiClient\KeycloakApi\ApiException;
use \WebMI\KeycloakApiClient\KeycloakApi\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * RolesApiTest Class Doc Comment
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class RolesApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for adminRealmsRealmClientsClientUuidRolesGet
     *
     * Get all roles for the realm or client.
     *
     */
    public function testAdminRealmsRealmClientsClientUuidRolesGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientsClientUuidRolesPost
     *
     * Create a new role for the realm or client.
     *
     */
    public function testAdminRealmsRealmClientsClientUuidRolesPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGet
     *
     * Get client-level roles for the client that are in the role's composite.
     *
     */
    public function testAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientsClientUuidRolesRoleNameCompositesDelete
     *
     * Remove roles from the role's composite.
     *
     */
    public function testAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientsClientUuidRolesRoleNameCompositesGet
     *
     * Get composites of the role.
     *
     */
    public function testAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientsClientUuidRolesRoleNameCompositesPost
     *
     * Add a composite to the role.
     *
     */
    public function testAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGet
     *
     * Get realm-level roles of the role's composite.
     *
     */
    public function testAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientsClientUuidRolesRoleNameDelete
     *
     * Delete a role by name.
     *
     */
    public function testAdminRealmsRealmClientsClientUuidRolesRoleNameDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientsClientUuidRolesRoleNameGet
     *
     * Get a role by name.
     *
     */
    public function testAdminRealmsRealmClientsClientUuidRolesRoleNameGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientsClientUuidRolesRoleNameGroupsGet
     *
     * Returns a stream of groups that have the specified role name.
     *
     */
    public function testAdminRealmsRealmClientsClientUuidRolesRoleNameGroupsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGet
     *
     * Return object stating whether role Authorization permissions have been initialized or not and a reference.
     *
     */
    public function testAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPut
     *
     * Return object stating whether role Authorization permissions have been initialized or not and a reference.
     *
     */
    public function testAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientsClientUuidRolesRoleNamePut
     *
     * Update a role by name.
     *
     */
    public function testAdminRealmsRealmClientsClientUuidRolesRoleNamePut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientsClientUuidRolesRoleNameUsersGet
     *
     * Returns a stream of users that have the specified role name..
     *
     */
    public function testAdminRealmsRealmClientsClientUuidRolesRoleNameUsersGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmRolesGet
     *
     * Get all roles for the realm or client.
     *
     */
    public function testAdminRealmsRealmRolesGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmRolesPost
     *
     * Create a new role for the realm or client.
     *
     */
    public function testAdminRealmsRealmRolesPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmRolesRoleNameCompositesClientsClientUuidGet
     *
     * Get client-level roles for the client that are in the role's composite.
     *
     */
    public function testAdminRealmsRealmRolesRoleNameCompositesClientsClientUuidGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmRolesRoleNameCompositesDelete
     *
     * Remove roles from the role's composite.
     *
     */
    public function testAdminRealmsRealmRolesRoleNameCompositesDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmRolesRoleNameCompositesGet
     *
     * Get composites of the role.
     *
     */
    public function testAdminRealmsRealmRolesRoleNameCompositesGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmRolesRoleNameCompositesPost
     *
     * Add a composite to the role.
     *
     */
    public function testAdminRealmsRealmRolesRoleNameCompositesPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmRolesRoleNameCompositesRealmGet
     *
     * Get realm-level roles of the role's composite.
     *
     */
    public function testAdminRealmsRealmRolesRoleNameCompositesRealmGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmRolesRoleNameDelete
     *
     * Delete a role by name.
     *
     */
    public function testAdminRealmsRealmRolesRoleNameDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmRolesRoleNameGet
     *
     * Get a role by name.
     *
     */
    public function testAdminRealmsRealmRolesRoleNameGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmRolesRoleNameGroupsGet
     *
     * Returns a stream of groups that have the specified role name.
     *
     */
    public function testAdminRealmsRealmRolesRoleNameGroupsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmRolesRoleNameManagementPermissionsGet
     *
     * Return object stating whether role Authorization permissions have been initialized or not and a reference.
     *
     */
    public function testAdminRealmsRealmRolesRoleNameManagementPermissionsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmRolesRoleNameManagementPermissionsPut
     *
     * Return object stating whether role Authorization permissions have been initialized or not and a reference.
     *
     */
    public function testAdminRealmsRealmRolesRoleNameManagementPermissionsPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmRolesRoleNamePut
     *
     * Update a role by name.
     *
     */
    public function testAdminRealmsRealmRolesRoleNamePut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmRolesRoleNameUsersGet
     *
     * Returns a stream of users that have the specified role name..
     *
     */
    public function testAdminRealmsRealmRolesRoleNameUsersGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
