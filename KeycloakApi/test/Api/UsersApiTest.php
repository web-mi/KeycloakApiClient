<?php
/**
 * UsersApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace WebMI\KeycloakApiClient\KeycloakApi\Test\Api;

use \WebMI\KeycloakApiClient\KeycloakApi\Configuration;
use \WebMI\KeycloakApiClient\KeycloakApi\ApiException;
use \WebMI\KeycloakApiClient\KeycloakApi\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * UsersApiTest Class Doc Comment
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class UsersApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for adminRealmsRealmUsersCountGet
     *
     * Returns the number of users that match the given criteria..
     *
     */
    public function testAdminRealmsRealmUsersCountGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmUsersGet
     *
     * Get users Returns a stream of users, filtered according to query parameters..
     *
     */
    public function testAdminRealmsRealmUsersGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmUsersPost
     *
     * Create a new user Username must be unique..
     *
     */
    public function testAdminRealmsRealmUsersPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmUsersProfileGet
     *
     * .
     *
     */
    public function testAdminRealmsRealmUsersProfileGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmUsersProfileMetadataGet
     *
     * .
     *
     */
    public function testAdminRealmsRealmUsersProfileMetadataGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmUsersProfilePut
     *
     * .
     *
     */
    public function testAdminRealmsRealmUsersProfilePut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesGet
     *
     * Return credential types, which are provided by the user storage where user is stored..
     *
     */
    public function testAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmUsersUserIdConsentsClientDelete
     *
     * Revoke consent and offline tokens for particular client from user.
     *
     */
    public function testAdminRealmsRealmUsersUserIdConsentsClientDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmUsersUserIdConsentsGet
     *
     * Get consents granted by the user.
     *
     */
    public function testAdminRealmsRealmUsersUserIdConsentsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmUsersUserIdCredentialsCredentialIdDelete
     *
     * Remove a credential for a user.
     *
     */
    public function testAdminRealmsRealmUsersUserIdCredentialsCredentialIdDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdPost
     *
     * Move a credential to a position behind another credential.
     *
     */
    public function testAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstPost
     *
     * Move a credential to a first position in the credentials list of the user.
     *
     */
    public function testAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelPut
     *
     * Update a credential label for a user.
     *
     */
    public function testAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmUsersUserIdCredentialsGet
     *
     * .
     *
     */
    public function testAdminRealmsRealmUsersUserIdCredentialsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmUsersUserIdDelete
     *
     * Delete the user.
     *
     */
    public function testAdminRealmsRealmUsersUserIdDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmUsersUserIdDisableCredentialTypesPut
     *
     * Disable all credentials for a user of a specific type.
     *
     */
    public function testAdminRealmsRealmUsersUserIdDisableCredentialTypesPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmUsersUserIdExecuteActionsEmailPut
     *
     * Send an email to the user with a link they can click to execute particular actions..
     *
     */
    public function testAdminRealmsRealmUsersUserIdExecuteActionsEmailPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmUsersUserIdFederatedIdentityGet
     *
     * Get social logins associated with the user.
     *
     */
    public function testAdminRealmsRealmUsersUserIdFederatedIdentityGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmUsersUserIdFederatedIdentityProviderDelete
     *
     * Remove a social login provider from user.
     *
     */
    public function testAdminRealmsRealmUsersUserIdFederatedIdentityProviderDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmUsersUserIdFederatedIdentityProviderPost
     *
     * Add a social login provider to the user.
     *
     */
    public function testAdminRealmsRealmUsersUserIdFederatedIdentityProviderPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmUsersUserIdGet
     *
     * Get representation of the user.
     *
     */
    public function testAdminRealmsRealmUsersUserIdGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmUsersUserIdGroupsCountGet
     *
     * .
     *
     */
    public function testAdminRealmsRealmUsersUserIdGroupsCountGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmUsersUserIdGroupsGet
     *
     * .
     *
     */
    public function testAdminRealmsRealmUsersUserIdGroupsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmUsersUserIdGroupsGroupIdDelete
     *
     * .
     *
     */
    public function testAdminRealmsRealmUsersUserIdGroupsGroupIdDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmUsersUserIdGroupsGroupIdPut
     *
     * .
     *
     */
    public function testAdminRealmsRealmUsersUserIdGroupsGroupIdPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmUsersUserIdImpersonationPost
     *
     * Impersonate the user.
     *
     */
    public function testAdminRealmsRealmUsersUserIdImpersonationPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmUsersUserIdLogoutPost
     *
     * Remove all user sessions associated with the user Also send notification to all clients that have an admin URL to invalidate the sessions for the particular user..
     *
     */
    public function testAdminRealmsRealmUsersUserIdLogoutPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmUsersUserIdOfflineSessionsClientUuidGet
     *
     * Get offline sessions associated with the user and client.
     *
     */
    public function testAdminRealmsRealmUsersUserIdOfflineSessionsClientUuidGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmUsersUserIdPut
     *
     * Update the user.
     *
     */
    public function testAdminRealmsRealmUsersUserIdPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmUsersUserIdResetPasswordEmailPut
     *
     * Send an email to the user with a link they can click to reset their password..
     *
     */
    public function testAdminRealmsRealmUsersUserIdResetPasswordEmailPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmUsersUserIdResetPasswordPut
     *
     * Set up a new password for the user..
     *
     */
    public function testAdminRealmsRealmUsersUserIdResetPasswordPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmUsersUserIdSendVerifyEmailPut
     *
     * Send an email-verification email to the user An email contains a link the user can click to verify their email address..
     *
     */
    public function testAdminRealmsRealmUsersUserIdSendVerifyEmailPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmUsersUserIdSessionsGet
     *
     * Get sessions associated with the user.
     *
     */
    public function testAdminRealmsRealmUsersUserIdSessionsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmUsersUserIdUnmanagedAttributesGet
     *
     * .
     *
     */
    public function testAdminRealmsRealmUsersUserIdUnmanagedAttributesGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
