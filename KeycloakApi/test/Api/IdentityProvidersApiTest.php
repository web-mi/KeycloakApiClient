<?php
/**
 * IdentityProvidersApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace WebMI\KeycloakApiClient\KeycloakApi\Test\Api;

use \WebMI\KeycloakApiClient\KeycloakApi\Configuration;
use \WebMI\KeycloakApiClient\KeycloakApi\ApiException;
use \WebMI\KeycloakApiClient\KeycloakApi\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * IdentityProvidersApiTest Class Doc Comment
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class IdentityProvidersApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for adminRealmsRealmIdentityProviderImportConfigPost
     *
     * Import identity provider from JSON body.
     *
     */
    public function testAdminRealmsRealmIdentityProviderImportConfigPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmIdentityProviderInstancesAliasDelete
     *
     * Delete the identity provider.
     *
     */
    public function testAdminRealmsRealmIdentityProviderInstancesAliasDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmIdentityProviderInstancesAliasExportGet
     *
     * Export public broker configuration for identity provider.
     *
     */
    public function testAdminRealmsRealmIdentityProviderInstancesAliasExportGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmIdentityProviderInstancesAliasGet
     *
     * Get the identity provider.
     *
     */
    public function testAdminRealmsRealmIdentityProviderInstancesAliasGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGet
     *
     * Return object stating whether client Authorization permissions have been initialized or not and a reference.
     *
     */
    public function testAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPut
     *
     * Return object stating whether client Authorization permissions have been initialized or not and a reference.
     *
     */
    public function testAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmIdentityProviderInstancesAliasMapperTypesGet
     *
     * Get mapper types for identity provider.
     *
     */
    public function testAdminRealmsRealmIdentityProviderInstancesAliasMapperTypesGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmIdentityProviderInstancesAliasMappersGet
     *
     * Get mappers for identity provider.
     *
     */
    public function testAdminRealmsRealmIdentityProviderInstancesAliasMappersGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmIdentityProviderInstancesAliasMappersIdDelete
     *
     * Delete a mapper for the identity provider.
     *
     */
    public function testAdminRealmsRealmIdentityProviderInstancesAliasMappersIdDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmIdentityProviderInstancesAliasMappersIdGet
     *
     * Get mapper by id for the identity provider.
     *
     */
    public function testAdminRealmsRealmIdentityProviderInstancesAliasMappersIdGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmIdentityProviderInstancesAliasMappersIdPut
     *
     * Update a mapper for the identity provider.
     *
     */
    public function testAdminRealmsRealmIdentityProviderInstancesAliasMappersIdPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmIdentityProviderInstancesAliasMappersPost
     *
     * Add a mapper to identity provider.
     *
     */
    public function testAdminRealmsRealmIdentityProviderInstancesAliasMappersPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmIdentityProviderInstancesAliasPut
     *
     * Update the identity provider.
     *
     */
    public function testAdminRealmsRealmIdentityProviderInstancesAliasPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmIdentityProviderInstancesAliasReloadKeysGet
     *
     * Reaload keys for the identity provider if the provider supports it, \"true\" is returned if reload was performed, \"false\" if not..
     *
     */
    public function testAdminRealmsRealmIdentityProviderInstancesAliasReloadKeysGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmIdentityProviderInstancesGet
     *
     * List identity providers.
     *
     */
    public function testAdminRealmsRealmIdentityProviderInstancesGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmIdentityProviderInstancesPost
     *
     * Create a new identity provider.
     *
     */
    public function testAdminRealmsRealmIdentityProviderInstancesPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmIdentityProviderProvidersProviderIdGet
     *
     * Get the identity provider factory for that provider id.
     *
     */
    public function testAdminRealmsRealmIdentityProviderProvidersProviderIdGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
