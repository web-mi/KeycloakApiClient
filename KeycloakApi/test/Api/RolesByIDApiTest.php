<?php
/**
 * RolesByIDApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace WebMI\KeycloakApiClient\KeycloakApi\Test\Api;

use \WebMI\KeycloakApiClient\KeycloakApi\Configuration;
use \WebMI\KeycloakApiClient\KeycloakApi\ApiException;
use \WebMI\KeycloakApiClient\KeycloakApi\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * RolesByIDApiTest Class Doc Comment
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class RolesByIDApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for adminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidGet
     *
     * Get client-level roles for the client that are in the role's composite.
     *
     */
    public function testAdminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmRolesByIdRoleIdCompositesDelete
     *
     * Remove a set of roles from the role's composite.
     *
     */
    public function testAdminRealmsRealmRolesByIdRoleIdCompositesDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmRolesByIdRoleIdCompositesGet
     *
     * Get role's children Returns a set of role's children provided the role is a composite..
     *
     */
    public function testAdminRealmsRealmRolesByIdRoleIdCompositesGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmRolesByIdRoleIdCompositesPost
     *
     * Make the role a composite role by associating some child roles.
     *
     */
    public function testAdminRealmsRealmRolesByIdRoleIdCompositesPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmRolesByIdRoleIdCompositesRealmGet
     *
     * Get realm-level roles that are in the role's composite.
     *
     */
    public function testAdminRealmsRealmRolesByIdRoleIdCompositesRealmGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmRolesByIdRoleIdDelete
     *
     * Delete the role.
     *
     */
    public function testAdminRealmsRealmRolesByIdRoleIdDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmRolesByIdRoleIdGet
     *
     * Get a specific role's representation.
     *
     */
    public function testAdminRealmsRealmRolesByIdRoleIdGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmRolesByIdRoleIdManagementPermissionsGet
     *
     * Return object stating whether role Authorization permissions have been initialized or not and a reference.
     *
     */
    public function testAdminRealmsRealmRolesByIdRoleIdManagementPermissionsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmRolesByIdRoleIdManagementPermissionsPut
     *
     * Return object stating whether role Authorization permissions have been initialized or not and a reference.
     *
     */
    public function testAdminRealmsRealmRolesByIdRoleIdManagementPermissionsPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmRolesByIdRoleIdPut
     *
     * Update the role.
     *
     */
    public function testAdminRealmsRealmRolesByIdRoleIdPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
