<?php
/**
 * RealmsAdminApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace WebMI\KeycloakApiClient\KeycloakApi\Test\Api;

use \WebMI\KeycloakApiClient\KeycloakApi\Configuration;
use \WebMI\KeycloakApiClient\KeycloakApi\ApiException;
use \WebMI\KeycloakApiClient\KeycloakApi\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * RealmsAdminApiTest Class Doc Comment
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class RealmsAdminApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for adminRealmsGet
     *
     * Get accessible realms Returns a list of accessible realms. The list is filtered based on what realms the caller is allowed to view..
     *
     */
    public function testAdminRealmsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsPost
     *
     * Import a realm. Imports a realm from a full representation of that realm..
     *
     */
    public function testAdminRealmsPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmAdminEventsDelete
     *
     * Delete all admin events.
     *
     */
    public function testAdminRealmsRealmAdminEventsDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmAdminEventsGet
     *
     * Get admin events Returns all admin events, or filters events based on URL query parameters listed here.
     *
     */
    public function testAdminRealmsRealmAdminEventsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientDescriptionConverterPost
     *
     * Base path for importing clients under this realm..
     *
     */
    public function testAdminRealmsRealmClientDescriptionConverterPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientPoliciesPoliciesGet
     *
     * .
     *
     */
    public function testAdminRealmsRealmClientPoliciesPoliciesGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientPoliciesPoliciesPut
     *
     * .
     *
     */
    public function testAdminRealmsRealmClientPoliciesPoliciesPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientPoliciesProfilesGet
     *
     * .
     *
     */
    public function testAdminRealmsRealmClientPoliciesProfilesGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientPoliciesProfilesPut
     *
     * .
     *
     */
    public function testAdminRealmsRealmClientPoliciesProfilesPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientSessionStatsGet
     *
     * Get client session stats Returns a JSON map..
     *
     */
    public function testAdminRealmsRealmClientSessionStatsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientTypesGet
     *
     * List all client types available in the current realm.
     *
     */
    public function testAdminRealmsRealmClientTypesGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientTypesPut
     *
     * Update a client type.
     *
     */
    public function testAdminRealmsRealmClientTypesPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmCredentialRegistratorsGet
     *
     * .
     *
     */
    public function testAdminRealmsRealmCredentialRegistratorsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmDefaultDefaultClientScopesClientScopeIdDelete
     *
     * .
     *
     */
    public function testAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmDefaultDefaultClientScopesClientScopeIdPut
     *
     * .
     *
     */
    public function testAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmDefaultDefaultClientScopesGet
     *
     * Get realm default client scopes.  Only name and ids are returned..
     *
     */
    public function testAdminRealmsRealmDefaultDefaultClientScopesGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmDefaultGroupsGet
     *
     * Get group hierarchy.  Only name and ids are returned..
     *
     */
    public function testAdminRealmsRealmDefaultGroupsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmDefaultGroupsGroupIdDelete
     *
     * .
     *
     */
    public function testAdminRealmsRealmDefaultGroupsGroupIdDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmDefaultGroupsGroupIdPut
     *
     * .
     *
     */
    public function testAdminRealmsRealmDefaultGroupsGroupIdPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmDefaultOptionalClientScopesClientScopeIdDelete
     *
     * .
     *
     */
    public function testAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmDefaultOptionalClientScopesClientScopeIdPut
     *
     * .
     *
     */
    public function testAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmDefaultOptionalClientScopesGet
     *
     * Get realm optional client scopes.  Only name and ids are returned..
     *
     */
    public function testAdminRealmsRealmDefaultOptionalClientScopesGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmDelete
     *
     * Delete the realm.
     *
     */
    public function testAdminRealmsRealmDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmEventsConfigGet
     *
     * Get the events provider configuration Returns JSON object with events provider configuration.
     *
     */
    public function testAdminRealmsRealmEventsConfigGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmEventsConfigPut
     *
     * .
     *
     */
    public function testAdminRealmsRealmEventsConfigPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmEventsDelete
     *
     * Delete all events.
     *
     */
    public function testAdminRealmsRealmEventsDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmEventsGet
     *
     * Get events Returns all events, or filters them based on URL query parameters listed here.
     *
     */
    public function testAdminRealmsRealmEventsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmGet
     *
     * Get the top-level representation of the realm It will not include nested information like User and Client representations..
     *
     */
    public function testAdminRealmsRealmGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmGroupByPathPathGet
     *
     * .
     *
     */
    public function testAdminRealmsRealmGroupByPathPathGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmLocalizationGet
     *
     * .
     *
     */
    public function testAdminRealmsRealmLocalizationGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmLocalizationLocaleDelete
     *
     * .
     *
     */
    public function testAdminRealmsRealmLocalizationLocaleDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmLocalizationLocaleGet
     *
     * .
     *
     */
    public function testAdminRealmsRealmLocalizationLocaleGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmLocalizationLocaleKeyDelete
     *
     * .
     *
     */
    public function testAdminRealmsRealmLocalizationLocaleKeyDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmLocalizationLocaleKeyGet
     *
     * .
     *
     */
    public function testAdminRealmsRealmLocalizationLocaleKeyGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmLocalizationLocaleKeyPut
     *
     * .
     *
     */
    public function testAdminRealmsRealmLocalizationLocaleKeyPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmLocalizationLocalePost
     *
     * Import localization from uploaded JSON file.
     *
     */
    public function testAdminRealmsRealmLocalizationLocalePost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmLogoutAllPost
     *
     * Removes all user sessions..
     *
     */
    public function testAdminRealmsRealmLogoutAllPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmPartialExportPost
     *
     * Partial export of existing realm into a JSON file..
     *
     */
    public function testAdminRealmsRealmPartialExportPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmPartialImportPost
     *
     * Partial import from a JSON file to an existing realm..
     *
     */
    public function testAdminRealmsRealmPartialImportPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmPushRevocationPost
     *
     * Push the realm's revocation policy to any client that has an admin url associated with it..
     *
     */
    public function testAdminRealmsRealmPushRevocationPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmPut
     *
     * Update the top-level information of the realm Any user, roles or client information in the representation will be ignored..
     *
     */
    public function testAdminRealmsRealmPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmSessionsSessionDelete
     *
     * Remove a specific user session..
     *
     */
    public function testAdminRealmsRealmSessionsSessionDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmTestSMTPConnectionPost
     *
     * Test SMTP connection with current logged in user.
     *
     */
    public function testAdminRealmsRealmTestSMTPConnectionPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmUsersManagementPermissionsGet
     *
     * .
     *
     */
    public function testAdminRealmsRealmUsersManagementPermissionsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmUsersManagementPermissionsPut
     *
     * .
     *
     */
    public function testAdminRealmsRealmUsersManagementPermissionsPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
