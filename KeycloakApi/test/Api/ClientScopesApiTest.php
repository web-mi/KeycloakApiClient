<?php
/**
 * ClientScopesApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace WebMI\KeycloakApiClient\KeycloakApi\Test\Api;

use \WebMI\KeycloakApiClient\KeycloakApi\Configuration;
use \WebMI\KeycloakApiClient\KeycloakApi\ApiException;
use \WebMI\KeycloakApiClient\KeycloakApi\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * ClientScopesApiTest Class Doc Comment
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ClientScopesApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for adminRealmsRealmClientScopesClientScopeIdDelete
     *
     * Delete the client scope.
     *
     */
    public function testAdminRealmsRealmClientScopesClientScopeIdDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientScopesClientScopeIdGet
     *
     * Get representation of the client scope.
     *
     */
    public function testAdminRealmsRealmClientScopesClientScopeIdGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientScopesClientScopeIdPut
     *
     * Update the client scope.
     *
     */
    public function testAdminRealmsRealmClientScopesClientScopeIdPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientScopesGet
     *
     * Get client scopes belonging to the realm Returns a list of client scopes belonging to the realm.
     *
     */
    public function testAdminRealmsRealmClientScopesGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientScopesPost
     *
     * Create a new client scope Client Scope’s name must be unique!.
     *
     */
    public function testAdminRealmsRealmClientScopesPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientTemplatesClientScopeIdDelete
     *
     * Delete the client scope.
     *
     */
    public function testAdminRealmsRealmClientTemplatesClientScopeIdDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientTemplatesClientScopeIdGet
     *
     * Get representation of the client scope.
     *
     */
    public function testAdminRealmsRealmClientTemplatesClientScopeIdGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientTemplatesClientScopeIdPut
     *
     * Update the client scope.
     *
     */
    public function testAdminRealmsRealmClientTemplatesClientScopeIdPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientTemplatesGet
     *
     * Get client scopes belonging to the realm Returns a list of client scopes belonging to the realm.
     *
     */
    public function testAdminRealmsRealmClientTemplatesGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientTemplatesPost
     *
     * Create a new client scope Client Scope’s name must be unique!.
     *
     */
    public function testAdminRealmsRealmClientTemplatesPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
