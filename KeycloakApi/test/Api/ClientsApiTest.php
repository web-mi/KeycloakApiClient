<?php
/**
 * ClientsApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace WebMI\KeycloakApiClient\KeycloakApi\Test\Api;

use \WebMI\KeycloakApiClient\KeycloakApi\Configuration;
use \WebMI\KeycloakApiClient\KeycloakApi\ApiException;
use \WebMI\KeycloakApiClient\KeycloakApi\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * ClientsApiTest Class Doc Comment
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ClientsApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for adminRealmsRealmClientsClientUuidClientSecretGet
     *
     * Get the client secret.
     *
     */
    public function testAdminRealmsRealmClientsClientUuidClientSecretGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientsClientUuidClientSecretPost
     *
     * Generate a new secret for the client.
     *
     */
    public function testAdminRealmsRealmClientsClientUuidClientSecretPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientsClientUuidClientSecretRotatedDelete
     *
     * Invalidate the rotated secret for the client.
     *
     */
    public function testAdminRealmsRealmClientsClientUuidClientSecretRotatedDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientsClientUuidClientSecretRotatedGet
     *
     * Get the rotated client secret.
     *
     */
    public function testAdminRealmsRealmClientsClientUuidClientSecretRotatedGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdDelete
     *
     * .
     *
     */
    public function testAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdPut
     *
     * .
     *
     */
    public function testAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientsClientUuidDefaultClientScopesGet
     *
     * Get default client scopes.  Only name and ids are returned..
     *
     */
    public function testAdminRealmsRealmClientsClientUuidDefaultClientScopesGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientsClientUuidDelete
     *
     * Delete the client.
     *
     */
    public function testAdminRealmsRealmClientsClientUuidDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenGet
     *
     * Create JSON with payload of example access token.
     *
     */
    public function testAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenGet
     *
     * Create JSON with payload of example id token.
     *
     */
    public function testAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoGet
     *
     * Create JSON with payload of example user info.
     *
     */
    public function testAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersGet
     *
     * Return list of all protocol mappers, which will be used when generating tokens issued for particular client..
     *
     */
    public function testAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedGet
     *
     * Get effective scope mapping of all roles of particular role container, which this client is defacto allowed to have in the accessToken issued for him..
     *
     */
    public function testAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedGet
     *
     * Get roles, which this client doesn't have scope for and can't have them in the accessToken issued for him..
     *
     */
    public function testAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientsClientUuidGet
     *
     * Get representation of the client.
     *
     */
    public function testAdminRealmsRealmClientsClientUuidGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientsClientUuidInstallationProvidersProviderIdGet
     *
     * .
     *
     */
    public function testAdminRealmsRealmClientsClientUuidInstallationProvidersProviderIdGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientsClientUuidManagementPermissionsGet
     *
     * Return object stating whether client Authorization permissions have been initialized or not and a reference.
     *
     */
    public function testAdminRealmsRealmClientsClientUuidManagementPermissionsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientsClientUuidManagementPermissionsPut
     *
     * Return object stating whether client Authorization permissions have been initialized or not and a reference.
     *
     */
    public function testAdminRealmsRealmClientsClientUuidManagementPermissionsPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientsClientUuidNodesNodeDelete
     *
     * Unregister a cluster node from the client.
     *
     */
    public function testAdminRealmsRealmClientsClientUuidNodesNodeDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientsClientUuidNodesPost
     *
     * Register a cluster node with the client Manually register cluster node to this client - usually it’s not needed to call this directly as adapter should handle by sending registration request to Keycloak.
     *
     */
    public function testAdminRealmsRealmClientsClientUuidNodesPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientsClientUuidOfflineSessionCountGet
     *
     * Get application offline session count Returns a number of offline user sessions associated with this client { \"count\": number }.
     *
     */
    public function testAdminRealmsRealmClientsClientUuidOfflineSessionCountGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientsClientUuidOfflineSessionsGet
     *
     * Get offline sessions for client Returns a list of offline user sessions associated with this client.
     *
     */
    public function testAdminRealmsRealmClientsClientUuidOfflineSessionsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdDelete
     *
     * .
     *
     */
    public function testAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdPut
     *
     * .
     *
     */
    public function testAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientsClientUuidOptionalClientScopesGet
     *
     * Get optional client scopes.  Only name and ids are returned..
     *
     */
    public function testAdminRealmsRealmClientsClientUuidOptionalClientScopesGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientsClientUuidPushRevocationPost
     *
     * Push the client's revocation policy to its admin URL If the client has an admin URL, push revocation policy to it..
     *
     */
    public function testAdminRealmsRealmClientsClientUuidPushRevocationPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientsClientUuidPut
     *
     * Update the client.
     *
     */
    public function testAdminRealmsRealmClientsClientUuidPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientsClientUuidRegistrationAccessTokenPost
     *
     * Generate a new registration access token for the client.
     *
     */
    public function testAdminRealmsRealmClientsClientUuidRegistrationAccessTokenPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientsClientUuidServiceAccountUserGet
     *
     * Get a user dedicated to the service account.
     *
     */
    public function testAdminRealmsRealmClientsClientUuidServiceAccountUserGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientsClientUuidSessionCountGet
     *
     * Get application session count Returns a number of user sessions associated with this client { \"count\": number }.
     *
     */
    public function testAdminRealmsRealmClientsClientUuidSessionCountGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientsClientUuidTestNodesAvailableGet
     *
     * Test if registered cluster nodes are available Tests availability by sending 'ping' request to all cluster nodes..
     *
     */
    public function testAdminRealmsRealmClientsClientUuidTestNodesAvailableGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientsClientUuidUserSessionsGet
     *
     * Get user sessions for client Returns a list of user sessions associated with this client.
     *
     */
    public function testAdminRealmsRealmClientsClientUuidUserSessionsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientsGet
     *
     * Get clients belonging to the realm..
     *
     */
    public function testAdminRealmsRealmClientsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientsPost
     *
     * Create a new client Client’s client_id must be unique!.
     *
     */
    public function testAdminRealmsRealmClientsPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
