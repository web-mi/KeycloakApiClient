<?php
/**
 * RoleMapperApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace WebMI\KeycloakApiClient\KeycloakApi\Test\Api;

use \WebMI\KeycloakApiClient\KeycloakApi\Configuration;
use \WebMI\KeycloakApiClient\KeycloakApi\ApiException;
use \WebMI\KeycloakApiClient\KeycloakApi\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * RoleMapperApiTest Class Doc Comment
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class RoleMapperApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for adminRealmsRealmGroupsGroupIdRoleMappingsGet
     *
     * Get role mappings.
     *
     */
    public function testAdminRealmsRealmGroupsGroupIdRoleMappingsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmGroupsGroupIdRoleMappingsRealmAvailableGet
     *
     * Get realm-level roles that can be mapped.
     *
     */
    public function testAdminRealmsRealmGroupsGroupIdRoleMappingsRealmAvailableGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmGroupsGroupIdRoleMappingsRealmCompositeGet
     *
     * Get effective realm-level role mappings This will recurse all composite roles to get the result..
     *
     */
    public function testAdminRealmsRealmGroupsGroupIdRoleMappingsRealmCompositeGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmGroupsGroupIdRoleMappingsRealmDelete
     *
     * Delete realm-level role mappings.
     *
     */
    public function testAdminRealmsRealmGroupsGroupIdRoleMappingsRealmDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmGroupsGroupIdRoleMappingsRealmGet
     *
     * Get realm-level role mappings.
     *
     */
    public function testAdminRealmsRealmGroupsGroupIdRoleMappingsRealmGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmGroupsGroupIdRoleMappingsRealmPost
     *
     * Add realm-level role mappings to the user.
     *
     */
    public function testAdminRealmsRealmGroupsGroupIdRoleMappingsRealmPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmUsersUserIdRoleMappingsGet
     *
     * Get role mappings.
     *
     */
    public function testAdminRealmsRealmUsersUserIdRoleMappingsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmUsersUserIdRoleMappingsRealmAvailableGet
     *
     * Get realm-level roles that can be mapped.
     *
     */
    public function testAdminRealmsRealmUsersUserIdRoleMappingsRealmAvailableGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmUsersUserIdRoleMappingsRealmCompositeGet
     *
     * Get effective realm-level role mappings This will recurse all composite roles to get the result..
     *
     */
    public function testAdminRealmsRealmUsersUserIdRoleMappingsRealmCompositeGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmUsersUserIdRoleMappingsRealmDelete
     *
     * Delete realm-level role mappings.
     *
     */
    public function testAdminRealmsRealmUsersUserIdRoleMappingsRealmDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmUsersUserIdRoleMappingsRealmGet
     *
     * Get realm-level role mappings.
     *
     */
    public function testAdminRealmsRealmUsersUserIdRoleMappingsRealmGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmUsersUserIdRoleMappingsRealmPost
     *
     * Add realm-level role mappings to the user.
     *
     */
    public function testAdminRealmsRealmUsersUserIdRoleMappingsRealmPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
