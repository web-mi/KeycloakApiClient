<?php
/**
 * ScopeMappingsApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace WebMI\KeycloakApiClient\KeycloakApi\Test\Api;

use \WebMI\KeycloakApiClient\KeycloakApi\Configuration;
use \WebMI\KeycloakApiClient\KeycloakApi\ApiException;
use \WebMI\KeycloakApiClient\KeycloakApi\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * ScopeMappingsApiTest Class Doc Comment
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ScopeMappingsApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableGet
     *
     * The available client-level roles Returns the roles for the client that can be associated with the client's scope.
     *
     */
    public function testAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeGet
     *
     * Get effective client roles Returns the roles for the client that are associated with the client's scope..
     *
     */
    public function testAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientDelete
     *
     * Remove client-level roles from the client's scope..
     *
     */
    public function testAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientGet
     *
     * Get the roles associated with a client's scope Returns roles for the client..
     *
     */
    public function testAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPost
     *
     * Add client-level roles to the client's scope.
     *
     */
    public function testAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientScopesClientScopeIdScopeMappingsGet
     *
     * Get all scope mappings for the client.
     *
     */
    public function testAdminRealmsRealmClientScopesClientScopeIdScopeMappingsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableGet
     *
     * Get realm-level roles that are available to attach to this client's scope.
     *
     */
    public function testAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeGet
     *
     * Get effective realm-level roles associated with the client’s scope What this does is recurse any composite roles associated with the client’s scope and adds the roles to this lists..
     *
     */
    public function testAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmDelete
     *
     * Remove a set of realm-level roles from the client's scope.
     *
     */
    public function testAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmGet
     *
     * Get realm-level roles associated with the client's scope.
     *
     */
    public function testAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPost
     *
     * Add a set of realm-level roles to the client's scope.
     *
     */
    public function testAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableGet
     *
     * The available client-level roles Returns the roles for the client that can be associated with the client's scope.
     *
     */
    public function testAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeGet
     *
     * Get effective client roles Returns the roles for the client that are associated with the client's scope..
     *
     */
    public function testAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientDelete
     *
     * Remove client-level roles from the client's scope..
     *
     */
    public function testAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientGet
     *
     * Get the roles associated with a client's scope Returns roles for the client..
     *
     */
    public function testAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPost
     *
     * Add client-level roles to the client's scope.
     *
     */
    public function testAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsGet
     *
     * Get all scope mappings for the client.
     *
     */
    public function testAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableGet
     *
     * Get realm-level roles that are available to attach to this client's scope.
     *
     */
    public function testAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeGet
     *
     * Get effective realm-level roles associated with the client’s scope What this does is recurse any composite roles associated with the client’s scope and adds the roles to this lists..
     *
     */
    public function testAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmDelete
     *
     * Remove a set of realm-level roles from the client's scope.
     *
     */
    public function testAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmGet
     *
     * Get realm-level roles associated with the client's scope.
     *
     */
    public function testAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPost
     *
     * Add a set of realm-level roles to the client's scope.
     *
     */
    public function testAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableGet
     *
     * The available client-level roles Returns the roles for the client that can be associated with the client's scope.
     *
     */
    public function testAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeGet
     *
     * Get effective client roles Returns the roles for the client that are associated with the client's scope..
     *
     */
    public function testAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientsClientUuidScopeMappingsClientsClientDelete
     *
     * Remove client-level roles from the client's scope..
     *
     */
    public function testAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientsClientUuidScopeMappingsClientsClientGet
     *
     * Get the roles associated with a client's scope Returns roles for the client..
     *
     */
    public function testAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientsClientUuidScopeMappingsClientsClientPost
     *
     * Add client-level roles to the client's scope.
     *
     */
    public function testAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientsClientUuidScopeMappingsGet
     *
     * Get all scope mappings for the client.
     *
     */
    public function testAdminRealmsRealmClientsClientUuidScopeMappingsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableGet
     *
     * Get realm-level roles that are available to attach to this client's scope.
     *
     */
    public function testAdminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeGet
     *
     * Get effective realm-level roles associated with the client’s scope What this does is recurse any composite roles associated with the client’s scope and adds the roles to this lists..
     *
     */
    public function testAdminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientsClientUuidScopeMappingsRealmDelete
     *
     * Remove a set of realm-level roles from the client's scope.
     *
     */
    public function testAdminRealmsRealmClientsClientUuidScopeMappingsRealmDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientsClientUuidScopeMappingsRealmGet
     *
     * Get realm-level roles associated with the client's scope.
     *
     */
    public function testAdminRealmsRealmClientsClientUuidScopeMappingsRealmGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmClientsClientUuidScopeMappingsRealmPost
     *
     * Add a set of realm-level roles to the client's scope.
     *
     */
    public function testAdminRealmsRealmClientsClientUuidScopeMappingsRealmPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
