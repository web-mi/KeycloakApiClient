<?php
/**
 * AuthenticationManagementApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace WebMI\KeycloakApiClient\KeycloakApi\Test\Api;

use \WebMI\KeycloakApiClient\KeycloakApi\Configuration;
use \WebMI\KeycloakApiClient\KeycloakApi\ApiException;
use \WebMI\KeycloakApiClient\KeycloakApi\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * AuthenticationManagementApiTest Class Doc Comment
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AuthenticationManagementApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for adminRealmsRealmAuthenticationAuthenticatorProvidersGet
     *
     * Get authenticator providers Returns a stream of authenticator providers..
     *
     */
    public function testAdminRealmsRealmAuthenticationAuthenticatorProvidersGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmAuthenticationClientAuthenticatorProvidersGet
     *
     * Get client authenticator providers Returns a stream of client authenticator providers..
     *
     */
    public function testAdminRealmsRealmAuthenticationClientAuthenticatorProvidersGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmAuthenticationConfigDescriptionProviderIdGet
     *
     * Get authenticator provider's configuration description.
     *
     */
    public function testAdminRealmsRealmAuthenticationConfigDescriptionProviderIdGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmAuthenticationConfigIdDelete
     *
     * Delete authenticator configuration.
     *
     */
    public function testAdminRealmsRealmAuthenticationConfigIdDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmAuthenticationConfigIdGet
     *
     * Get authenticator configuration.
     *
     */
    public function testAdminRealmsRealmAuthenticationConfigIdGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmAuthenticationConfigIdPut
     *
     * Update authenticator configuration.
     *
     */
    public function testAdminRealmsRealmAuthenticationConfigIdPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmAuthenticationConfigPost
     *
     * Create new authenticator configuration.
     *
     */
    public function testAdminRealmsRealmAuthenticationConfigPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmAuthenticationExecutionsExecutionIdConfigIdGet
     *
     * Get execution's configuration.
     *
     */
    public function testAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigIdGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmAuthenticationExecutionsExecutionIdConfigPost
     *
     * Update execution with new configuration.
     *
     */
    public function testAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmAuthenticationExecutionsExecutionIdDelete
     *
     * Delete execution.
     *
     */
    public function testAdminRealmsRealmAuthenticationExecutionsExecutionIdDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmAuthenticationExecutionsExecutionIdGet
     *
     * Get Single Execution.
     *
     */
    public function testAdminRealmsRealmAuthenticationExecutionsExecutionIdGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmAuthenticationExecutionsExecutionIdLowerPriorityPost
     *
     * Lower execution's priority.
     *
     */
    public function testAdminRealmsRealmAuthenticationExecutionsExecutionIdLowerPriorityPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmAuthenticationExecutionsExecutionIdRaisePriorityPost
     *
     * Raise execution's priority.
     *
     */
    public function testAdminRealmsRealmAuthenticationExecutionsExecutionIdRaisePriorityPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmAuthenticationExecutionsPost
     *
     * Add new authentication execution.
     *
     */
    public function testAdminRealmsRealmAuthenticationExecutionsPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmAuthenticationFlowsFlowAliasCopyPost
     *
     * Copy existing authentication flow under a new name The new name is given as 'newName' attribute of the passed JSON object.
     *
     */
    public function testAdminRealmsRealmAuthenticationFlowsFlowAliasCopyPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionPost
     *
     * Add new authentication execution to a flow.
     *
     */
    public function testAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowPost
     *
     * Add new flow with new execution to existing flow.
     *
     */
    public function testAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsGet
     *
     * Get authentication executions for a flow.
     *
     */
    public function testAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmAuthenticationFlowsFlowAliasExecutionsPut
     *
     * Update authentication executions of a Flow.
     *
     */
    public function testAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmAuthenticationFlowsGet
     *
     * Get authentication flows Returns a stream of authentication flows..
     *
     */
    public function testAdminRealmsRealmAuthenticationFlowsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmAuthenticationFlowsIdDelete
     *
     * Delete an authentication flow.
     *
     */
    public function testAdminRealmsRealmAuthenticationFlowsIdDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmAuthenticationFlowsIdGet
     *
     * Get authentication flow for id.
     *
     */
    public function testAdminRealmsRealmAuthenticationFlowsIdGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmAuthenticationFlowsIdPut
     *
     * Update an authentication flow.
     *
     */
    public function testAdminRealmsRealmAuthenticationFlowsIdPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmAuthenticationFlowsPost
     *
     * Create a new authentication flow.
     *
     */
    public function testAdminRealmsRealmAuthenticationFlowsPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmAuthenticationFormActionProvidersGet
     *
     * Get form action providers Returns a stream of form action providers..
     *
     */
    public function testAdminRealmsRealmAuthenticationFormActionProvidersGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmAuthenticationFormProvidersGet
     *
     * Get form providers Returns a stream of form providers..
     *
     */
    public function testAdminRealmsRealmAuthenticationFormProvidersGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmAuthenticationPerClientConfigDescriptionGet
     *
     * Get configuration descriptions for all clients.
     *
     */
    public function testAdminRealmsRealmAuthenticationPerClientConfigDescriptionGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmAuthenticationRegisterRequiredActionPost
     *
     * Register a new required actions.
     *
     */
    public function testAdminRealmsRealmAuthenticationRegisterRequiredActionPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmAuthenticationRequiredActionsAliasConfigDelete
     *
     * Delete RequiredAction configuration.
     *
     */
    public function testAdminRealmsRealmAuthenticationRequiredActionsAliasConfigDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmAuthenticationRequiredActionsAliasConfigDescriptionGet
     *
     * Get RequiredAction provider configuration description.
     *
     */
    public function testAdminRealmsRealmAuthenticationRequiredActionsAliasConfigDescriptionGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmAuthenticationRequiredActionsAliasConfigGet
     *
     * Get RequiredAction configuration.
     *
     */
    public function testAdminRealmsRealmAuthenticationRequiredActionsAliasConfigGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmAuthenticationRequiredActionsAliasConfigPut
     *
     * Update RequiredAction configuration.
     *
     */
    public function testAdminRealmsRealmAuthenticationRequiredActionsAliasConfigPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmAuthenticationRequiredActionsAliasDelete
     *
     * Delete required action.
     *
     */
    public function testAdminRealmsRealmAuthenticationRequiredActionsAliasDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmAuthenticationRequiredActionsAliasGet
     *
     * Get required action for alias.
     *
     */
    public function testAdminRealmsRealmAuthenticationRequiredActionsAliasGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmAuthenticationRequiredActionsAliasLowerPriorityPost
     *
     * Lower required action's priority.
     *
     */
    public function testAdminRealmsRealmAuthenticationRequiredActionsAliasLowerPriorityPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmAuthenticationRequiredActionsAliasPut
     *
     * Update required action.
     *
     */
    public function testAdminRealmsRealmAuthenticationRequiredActionsAliasPut()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmAuthenticationRequiredActionsAliasRaisePriorityPost
     *
     * Raise required action's priority.
     *
     */
    public function testAdminRealmsRealmAuthenticationRequiredActionsAliasRaisePriorityPost()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmAuthenticationRequiredActionsGet
     *
     * Get required actions Returns a stream of required actions..
     *
     */
    public function testAdminRealmsRealmAuthenticationRequiredActionsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for adminRealmsRealmAuthenticationUnregisteredRequiredActionsGet
     *
     * Get unregistered required actions Returns a stream of unregistered required actions..
     *
     */
    public function testAdminRealmsRealmAuthenticationUnregisteredRequiredActionsGet()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
