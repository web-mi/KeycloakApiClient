<?php
/**
 * RealmRepresentationTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace WebMI\KeycloakApiClient\KeycloakApi\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * RealmRepresentationTest Class Doc Comment
 *
 * @category    Class
 * @description RealmRepresentation
 * @package     WebMI\KeycloakApiClient\KeycloakApi
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class RealmRepresentationTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "RealmRepresentation"
     */
    public function testRealmRepresentation()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "id"
     */
    public function testPropertyId()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "realm"
     */
    public function testPropertyRealm()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "display_name"
     */
    public function testPropertyDisplayName()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "display_name_html"
     */
    public function testPropertyDisplayNameHtml()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "not_before"
     */
    public function testPropertyNotBefore()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "default_signature_algorithm"
     */
    public function testPropertyDefaultSignatureAlgorithm()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "revoke_refresh_token"
     */
    public function testPropertyRevokeRefreshToken()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "refresh_token_max_reuse"
     */
    public function testPropertyRefreshTokenMaxReuse()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "access_token_lifespan"
     */
    public function testPropertyAccessTokenLifespan()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "access_token_lifespan_for_implicit_flow"
     */
    public function testPropertyAccessTokenLifespanForImplicitFlow()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "sso_session_idle_timeout"
     */
    public function testPropertySsoSessionIdleTimeout()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "sso_session_max_lifespan"
     */
    public function testPropertySsoSessionMaxLifespan()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "sso_session_idle_timeout_remember_me"
     */
    public function testPropertySsoSessionIdleTimeoutRememberMe()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "sso_session_max_lifespan_remember_me"
     */
    public function testPropertySsoSessionMaxLifespanRememberMe()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "offline_session_idle_timeout"
     */
    public function testPropertyOfflineSessionIdleTimeout()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "offline_session_max_lifespan_enabled"
     */
    public function testPropertyOfflineSessionMaxLifespanEnabled()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "offline_session_max_lifespan"
     */
    public function testPropertyOfflineSessionMaxLifespan()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "client_session_idle_timeout"
     */
    public function testPropertyClientSessionIdleTimeout()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "client_session_max_lifespan"
     */
    public function testPropertyClientSessionMaxLifespan()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "client_offline_session_idle_timeout"
     */
    public function testPropertyClientOfflineSessionIdleTimeout()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "client_offline_session_max_lifespan"
     */
    public function testPropertyClientOfflineSessionMaxLifespan()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "access_code_lifespan"
     */
    public function testPropertyAccessCodeLifespan()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "access_code_lifespan_user_action"
     */
    public function testPropertyAccessCodeLifespanUserAction()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "access_code_lifespan_login"
     */
    public function testPropertyAccessCodeLifespanLogin()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "action_token_generated_by_admin_lifespan"
     */
    public function testPropertyActionTokenGeneratedByAdminLifespan()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "action_token_generated_by_user_lifespan"
     */
    public function testPropertyActionTokenGeneratedByUserLifespan()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "oauth2_device_code_lifespan"
     */
    public function testPropertyOauth2DeviceCodeLifespan()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "oauth2_device_polling_interval"
     */
    public function testPropertyOauth2DevicePollingInterval()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "enabled"
     */
    public function testPropertyEnabled()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "ssl_required"
     */
    public function testPropertySslRequired()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "password_credential_grant_allowed"
     */
    public function testPropertyPasswordCredentialGrantAllowed()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "registration_allowed"
     */
    public function testPropertyRegistrationAllowed()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "registration_email_as_username"
     */
    public function testPropertyRegistrationEmailAsUsername()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "remember_me"
     */
    public function testPropertyRememberMe()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "verify_email"
     */
    public function testPropertyVerifyEmail()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "login_with_email_allowed"
     */
    public function testPropertyLoginWithEmailAllowed()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "duplicate_emails_allowed"
     */
    public function testPropertyDuplicateEmailsAllowed()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "reset_password_allowed"
     */
    public function testPropertyResetPasswordAllowed()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "edit_username_allowed"
     */
    public function testPropertyEditUsernameAllowed()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "user_cache_enabled"
     */
    public function testPropertyUserCacheEnabled()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "realm_cache_enabled"
     */
    public function testPropertyRealmCacheEnabled()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "brute_force_protected"
     */
    public function testPropertyBruteForceProtected()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "permanent_lockout"
     */
    public function testPropertyPermanentLockout()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "max_temporary_lockouts"
     */
    public function testPropertyMaxTemporaryLockouts()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "max_failure_wait_seconds"
     */
    public function testPropertyMaxFailureWaitSeconds()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "minimum_quick_login_wait_seconds"
     */
    public function testPropertyMinimumQuickLoginWaitSeconds()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "wait_increment_seconds"
     */
    public function testPropertyWaitIncrementSeconds()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "quick_login_check_milli_seconds"
     */
    public function testPropertyQuickLoginCheckMilliSeconds()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "max_delta_time_seconds"
     */
    public function testPropertyMaxDeltaTimeSeconds()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "failure_factor"
     */
    public function testPropertyFailureFactor()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "private_key"
     */
    public function testPropertyPrivateKey()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "public_key"
     */
    public function testPropertyPublicKey()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "certificate"
     */
    public function testPropertyCertificate()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "code_secret"
     */
    public function testPropertyCodeSecret()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "roles"
     */
    public function testPropertyRoles()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "groups"
     */
    public function testPropertyGroups()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "default_roles"
     */
    public function testPropertyDefaultRoles()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "default_role"
     */
    public function testPropertyDefaultRole()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "default_groups"
     */
    public function testPropertyDefaultGroups()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "required_credentials"
     */
    public function testPropertyRequiredCredentials()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "password_policy"
     */
    public function testPropertyPasswordPolicy()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "otp_policy_type"
     */
    public function testPropertyOtpPolicyType()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "otp_policy_algorithm"
     */
    public function testPropertyOtpPolicyAlgorithm()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "otp_policy_initial_counter"
     */
    public function testPropertyOtpPolicyInitialCounter()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "otp_policy_digits"
     */
    public function testPropertyOtpPolicyDigits()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "otp_policy_look_ahead_window"
     */
    public function testPropertyOtpPolicyLookAheadWindow()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "otp_policy_period"
     */
    public function testPropertyOtpPolicyPeriod()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "otp_policy_code_reusable"
     */
    public function testPropertyOtpPolicyCodeReusable()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "otp_supported_applications"
     */
    public function testPropertyOtpSupportedApplications()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "localization_texts"
     */
    public function testPropertyLocalizationTexts()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "web_authn_policy_rp_entity_name"
     */
    public function testPropertyWebAuthnPolicyRpEntityName()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "web_authn_policy_signature_algorithms"
     */
    public function testPropertyWebAuthnPolicySignatureAlgorithms()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "web_authn_policy_rp_id"
     */
    public function testPropertyWebAuthnPolicyRpId()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "web_authn_policy_attestation_conveyance_preference"
     */
    public function testPropertyWebAuthnPolicyAttestationConveyancePreference()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "web_authn_policy_authenticator_attachment"
     */
    public function testPropertyWebAuthnPolicyAuthenticatorAttachment()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "web_authn_policy_require_resident_key"
     */
    public function testPropertyWebAuthnPolicyRequireResidentKey()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "web_authn_policy_user_verification_requirement"
     */
    public function testPropertyWebAuthnPolicyUserVerificationRequirement()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "web_authn_policy_create_timeout"
     */
    public function testPropertyWebAuthnPolicyCreateTimeout()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "web_authn_policy_avoid_same_authenticator_register"
     */
    public function testPropertyWebAuthnPolicyAvoidSameAuthenticatorRegister()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "web_authn_policy_acceptable_aaguids"
     */
    public function testPropertyWebAuthnPolicyAcceptableAaguids()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "web_authn_policy_extra_origins"
     */
    public function testPropertyWebAuthnPolicyExtraOrigins()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "web_authn_policy_passwordless_rp_entity_name"
     */
    public function testPropertyWebAuthnPolicyPasswordlessRpEntityName()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "web_authn_policy_passwordless_signature_algorithms"
     */
    public function testPropertyWebAuthnPolicyPasswordlessSignatureAlgorithms()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "web_authn_policy_passwordless_rp_id"
     */
    public function testPropertyWebAuthnPolicyPasswordlessRpId()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "web_authn_policy_passwordless_attestation_conveyance_preference"
     */
    public function testPropertyWebAuthnPolicyPasswordlessAttestationConveyancePreference()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "web_authn_policy_passwordless_authenticator_attachment"
     */
    public function testPropertyWebAuthnPolicyPasswordlessAuthenticatorAttachment()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "web_authn_policy_passwordless_require_resident_key"
     */
    public function testPropertyWebAuthnPolicyPasswordlessRequireResidentKey()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "web_authn_policy_passwordless_user_verification_requirement"
     */
    public function testPropertyWebAuthnPolicyPasswordlessUserVerificationRequirement()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "web_authn_policy_passwordless_create_timeout"
     */
    public function testPropertyWebAuthnPolicyPasswordlessCreateTimeout()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "web_authn_policy_passwordless_avoid_same_authenticator_register"
     */
    public function testPropertyWebAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "web_authn_policy_passwordless_acceptable_aaguids"
     */
    public function testPropertyWebAuthnPolicyPasswordlessAcceptableAaguids()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "web_authn_policy_passwordless_extra_origins"
     */
    public function testPropertyWebAuthnPolicyPasswordlessExtraOrigins()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "client_profiles"
     */
    public function testPropertyClientProfiles()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "client_policies"
     */
    public function testPropertyClientPolicies()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "users"
     */
    public function testPropertyUsers()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "federated_users"
     */
    public function testPropertyFederatedUsers()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "scope_mappings"
     */
    public function testPropertyScopeMappings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "client_scope_mappings"
     */
    public function testPropertyClientScopeMappings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "clients"
     */
    public function testPropertyClients()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "client_scopes"
     */
    public function testPropertyClientScopes()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "default_default_client_scopes"
     */
    public function testPropertyDefaultDefaultClientScopes()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "default_optional_client_scopes"
     */
    public function testPropertyDefaultOptionalClientScopes()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "browser_security_headers"
     */
    public function testPropertyBrowserSecurityHeaders()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "smtp_server"
     */
    public function testPropertySmtpServer()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "user_federation_providers"
     */
    public function testPropertyUserFederationProviders()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "user_federation_mappers"
     */
    public function testPropertyUserFederationMappers()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "login_theme"
     */
    public function testPropertyLoginTheme()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "account_theme"
     */
    public function testPropertyAccountTheme()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "admin_theme"
     */
    public function testPropertyAdminTheme()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "email_theme"
     */
    public function testPropertyEmailTheme()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "events_enabled"
     */
    public function testPropertyEventsEnabled()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "events_expiration"
     */
    public function testPropertyEventsExpiration()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "events_listeners"
     */
    public function testPropertyEventsListeners()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "enabled_event_types"
     */
    public function testPropertyEnabledEventTypes()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "admin_events_enabled"
     */
    public function testPropertyAdminEventsEnabled()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "admin_events_details_enabled"
     */
    public function testPropertyAdminEventsDetailsEnabled()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "identity_providers"
     */
    public function testPropertyIdentityProviders()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "identity_provider_mappers"
     */
    public function testPropertyIdentityProviderMappers()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "protocol_mappers"
     */
    public function testPropertyProtocolMappers()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "components"
     */
    public function testPropertyComponents()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "internationalization_enabled"
     */
    public function testPropertyInternationalizationEnabled()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "supported_locales"
     */
    public function testPropertySupportedLocales()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "default_locale"
     */
    public function testPropertyDefaultLocale()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "authentication_flows"
     */
    public function testPropertyAuthenticationFlows()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "authenticator_config"
     */
    public function testPropertyAuthenticatorConfig()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "required_actions"
     */
    public function testPropertyRequiredActions()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "browser_flow"
     */
    public function testPropertyBrowserFlow()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "registration_flow"
     */
    public function testPropertyRegistrationFlow()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "direct_grant_flow"
     */
    public function testPropertyDirectGrantFlow()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "reset_credentials_flow"
     */
    public function testPropertyResetCredentialsFlow()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "client_authentication_flow"
     */
    public function testPropertyClientAuthenticationFlow()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "docker_authentication_flow"
     */
    public function testPropertyDockerAuthenticationFlow()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "first_broker_login_flow"
     */
    public function testPropertyFirstBrokerLoginFlow()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "attributes"
     */
    public function testPropertyAttributes()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "keycloak_version"
     */
    public function testPropertyKeycloakVersion()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "user_managed_access_allowed"
     */
    public function testPropertyUserManagedAccessAllowed()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "organizations_enabled"
     */
    public function testPropertyOrganizationsEnabled()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "organizations"
     */
    public function testPropertyOrganizations()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "social"
     */
    public function testPropertySocial()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "update_profile_on_initial_social_login"
     */
    public function testPropertyUpdateProfileOnInitialSocialLogin()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "social_providers"
     */
    public function testPropertySocialProviders()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "application_scope_mappings"
     */
    public function testPropertyApplicationScopeMappings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "applications"
     */
    public function testPropertyApplications()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "oauth_clients"
     */
    public function testPropertyOauthClients()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "client_templates"
     */
    public function testPropertyClientTemplates()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
