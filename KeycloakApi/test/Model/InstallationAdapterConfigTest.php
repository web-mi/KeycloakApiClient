<?php
/**
 * InstallationAdapterConfigTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace WebMI\KeycloakApiClient\KeycloakApi\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * InstallationAdapterConfigTest Class Doc Comment
 *
 * @category    Class
 * @description InstallationAdapterConfig
 * @package     WebMI\KeycloakApiClient\KeycloakApi
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class InstallationAdapterConfigTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "InstallationAdapterConfig"
     */
    public function testInstallationAdapterConfig()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "realm"
     */
    public function testPropertyRealm()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "realm_public_key"
     */
    public function testPropertyRealmPublicKey()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "auth_server_url"
     */
    public function testPropertyAuthServerUrl()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "ssl_required"
     */
    public function testPropertySslRequired()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "bearer_only"
     */
    public function testPropertyBearerOnly()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "resource"
     */
    public function testPropertyResource()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "public_client"
     */
    public function testPropertyPublicClient()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "verify_token_audience"
     */
    public function testPropertyVerifyTokenAudience()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "credentials"
     */
    public function testPropertyCredentials()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "use_resource_role_mappings"
     */
    public function testPropertyUseResourceRoleMappings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "confidential_port"
     */
    public function testPropertyConfidentialPort()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "policy_enforcer"
     */
    public function testPropertyPolicyEnforcer()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
