<?php
/**
 * MemberRepresentation
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace WebMI\KeycloakApiClient\KeycloakApi\Model;

use \ArrayAccess;
use \WebMI\KeycloakApiClient\KeycloakApi\ObjectSerializer;

/**
 * MemberRepresentation Class Doc Comment
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MemberRepresentation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MemberRepresentation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'username' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'email' => 'string',
        'email_verified' => 'bool',
        'attributes' => 'array<string,string[]>',
        'user_profile_metadata' => '\WebMI\KeycloakApiClient\KeycloakApi\Model\UserProfileMetadata',
        'self' => 'string',
        'origin' => 'string',
        'created_timestamp' => 'int',
        'enabled' => 'bool',
        'totp' => 'bool',
        'federation_link' => 'string',
        'service_account_client_id' => 'string',
        'credentials' => '\WebMI\KeycloakApiClient\KeycloakApi\Model\CredentialRepresentation[]',
        'disableable_credential_types' => 'string[]',
        'required_actions' => 'string[]',
        'federated_identities' => '\WebMI\KeycloakApiClient\KeycloakApi\Model\FederatedIdentityRepresentation[]',
        'realm_roles' => 'string[]',
        'client_roles' => 'array<string,string[]>',
        'client_consents' => '\WebMI\KeycloakApiClient\KeycloakApi\Model\UserConsentRepresentation[]',
        'not_before' => 'int',
        'application_roles' => 'array<string,string[]>',
        'social_links' => '\WebMI\KeycloakApiClient\KeycloakApi\Model\SocialLinkRepresentation[]',
        'groups' => 'string[]',
        'access' => 'array<string,bool>',
        'membership_type' => '\WebMI\KeycloakApiClient\KeycloakApi\Model\MembershipType'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'username' => null,
        'first_name' => null,
        'last_name' => null,
        'email' => null,
        'email_verified' => null,
        'attributes' => null,
        'user_profile_metadata' => null,
        'self' => null,
        'origin' => null,
        'created_timestamp' => 'int64',
        'enabled' => null,
        'totp' => null,
        'federation_link' => null,
        'service_account_client_id' => null,
        'credentials' => null,
        'disableable_credential_types' => null,
        'required_actions' => null,
        'federated_identities' => null,
        'realm_roles' => null,
        'client_roles' => null,
        'client_consents' => null,
        'not_before' => 'int32',
        'application_roles' => null,
        'social_links' => null,
        'groups' => null,
        'access' => null,
        'membership_type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'username' => false,
        'first_name' => false,
        'last_name' => false,
        'email' => false,
        'email_verified' => false,
        'attributes' => false,
        'user_profile_metadata' => false,
        'self' => false,
        'origin' => false,
        'created_timestamp' => false,
        'enabled' => false,
        'totp' => false,
        'federation_link' => false,
        'service_account_client_id' => false,
        'credentials' => false,
        'disableable_credential_types' => false,
        'required_actions' => false,
        'federated_identities' => false,
        'realm_roles' => false,
        'client_roles' => false,
        'client_consents' => false,
        'not_before' => false,
        'application_roles' => false,
        'social_links' => false,
        'groups' => false,
        'access' => false,
        'membership_type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'username' => 'username',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'email' => 'email',
        'email_verified' => 'emailVerified',
        'attributes' => 'attributes',
        'user_profile_metadata' => 'userProfileMetadata',
        'self' => 'self',
        'origin' => 'origin',
        'created_timestamp' => 'createdTimestamp',
        'enabled' => 'enabled',
        'totp' => 'totp',
        'federation_link' => 'federationLink',
        'service_account_client_id' => 'serviceAccountClientId',
        'credentials' => 'credentials',
        'disableable_credential_types' => 'disableableCredentialTypes',
        'required_actions' => 'requiredActions',
        'federated_identities' => 'federatedIdentities',
        'realm_roles' => 'realmRoles',
        'client_roles' => 'clientRoles',
        'client_consents' => 'clientConsents',
        'not_before' => 'notBefore',
        'application_roles' => 'applicationRoles',
        'social_links' => 'socialLinks',
        'groups' => 'groups',
        'access' => 'access',
        'membership_type' => 'membershipType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'username' => 'setUsername',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'email' => 'setEmail',
        'email_verified' => 'setEmailVerified',
        'attributes' => 'setAttributes',
        'user_profile_metadata' => 'setUserProfileMetadata',
        'self' => 'setSelf',
        'origin' => 'setOrigin',
        'created_timestamp' => 'setCreatedTimestamp',
        'enabled' => 'setEnabled',
        'totp' => 'setTotp',
        'federation_link' => 'setFederationLink',
        'service_account_client_id' => 'setServiceAccountClientId',
        'credentials' => 'setCredentials',
        'disableable_credential_types' => 'setDisableableCredentialTypes',
        'required_actions' => 'setRequiredActions',
        'federated_identities' => 'setFederatedIdentities',
        'realm_roles' => 'setRealmRoles',
        'client_roles' => 'setClientRoles',
        'client_consents' => 'setClientConsents',
        'not_before' => 'setNotBefore',
        'application_roles' => 'setApplicationRoles',
        'social_links' => 'setSocialLinks',
        'groups' => 'setGroups',
        'access' => 'setAccess',
        'membership_type' => 'setMembershipType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'username' => 'getUsername',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'email' => 'getEmail',
        'email_verified' => 'getEmailVerified',
        'attributes' => 'getAttributes',
        'user_profile_metadata' => 'getUserProfileMetadata',
        'self' => 'getSelf',
        'origin' => 'getOrigin',
        'created_timestamp' => 'getCreatedTimestamp',
        'enabled' => 'getEnabled',
        'totp' => 'getTotp',
        'federation_link' => 'getFederationLink',
        'service_account_client_id' => 'getServiceAccountClientId',
        'credentials' => 'getCredentials',
        'disableable_credential_types' => 'getDisableableCredentialTypes',
        'required_actions' => 'getRequiredActions',
        'federated_identities' => 'getFederatedIdentities',
        'realm_roles' => 'getRealmRoles',
        'client_roles' => 'getClientRoles',
        'client_consents' => 'getClientConsents',
        'not_before' => 'getNotBefore',
        'application_roles' => 'getApplicationRoles',
        'social_links' => 'getSocialLinks',
        'groups' => 'getGroups',
        'access' => 'getAccess',
        'membership_type' => 'getMembershipType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('username', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('email_verified', $data ?? [], null);
        $this->setIfExists('attributes', $data ?? [], null);
        $this->setIfExists('user_profile_metadata', $data ?? [], null);
        $this->setIfExists('self', $data ?? [], null);
        $this->setIfExists('origin', $data ?? [], null);
        $this->setIfExists('created_timestamp', $data ?? [], null);
        $this->setIfExists('enabled', $data ?? [], null);
        $this->setIfExists('totp', $data ?? [], null);
        $this->setIfExists('federation_link', $data ?? [], null);
        $this->setIfExists('service_account_client_id', $data ?? [], null);
        $this->setIfExists('credentials', $data ?? [], null);
        $this->setIfExists('disableable_credential_types', $data ?? [], null);
        $this->setIfExists('required_actions', $data ?? [], null);
        $this->setIfExists('federated_identities', $data ?? [], null);
        $this->setIfExists('realm_roles', $data ?? [], null);
        $this->setIfExists('client_roles', $data ?? [], null);
        $this->setIfExists('client_consents', $data ?? [], null);
        $this->setIfExists('not_before', $data ?? [], null);
        $this->setIfExists('application_roles', $data ?? [], null);
        $this->setIfExists('social_links', $data ?? [], null);
        $this->setIfExists('groups', $data ?? [], null);
        $this->setIfExists('access', $data ?? [], null);
        $this->setIfExists('membership_type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username username
     *
     * @return self
     */
    public function setUsername($username)
    {
        if (is_null($username)) {
            throw new \InvalidArgumentException('non-nullable username cannot be null');
        }
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name first_name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name last_name
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets email_verified
     *
     * @return bool|null
     */
    public function getEmailVerified()
    {
        return $this->container['email_verified'];
    }

    /**
     * Sets email_verified
     *
     * @param bool|null $email_verified email_verified
     *
     * @return self
     */
    public function setEmailVerified($email_verified)
    {
        if (is_null($email_verified)) {
            throw new \InvalidArgumentException('non-nullable email_verified cannot be null');
        }
        $this->container['email_verified'] = $email_verified;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return array<string,string[]>|null
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param array<string,string[]>|null $attributes attributes
     *
     * @return self
     */
    public function setAttributes($attributes)
    {
        if (is_null($attributes)) {
            throw new \InvalidArgumentException('non-nullable attributes cannot be null');
        }
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets user_profile_metadata
     *
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\UserProfileMetadata|null
     */
    public function getUserProfileMetadata()
    {
        return $this->container['user_profile_metadata'];
    }

    /**
     * Sets user_profile_metadata
     *
     * @param \WebMI\KeycloakApiClient\KeycloakApi\Model\UserProfileMetadata|null $user_profile_metadata user_profile_metadata
     *
     * @return self
     */
    public function setUserProfileMetadata($user_profile_metadata)
    {
        if (is_null($user_profile_metadata)) {
            throw new \InvalidArgumentException('non-nullable user_profile_metadata cannot be null');
        }
        $this->container['user_profile_metadata'] = $user_profile_metadata;

        return $this;
    }

    /**
     * Gets self
     *
     * @return string|null
     */
    public function getSelf()
    {
        return $this->container['self'];
    }

    /**
     * Sets self
     *
     * @param string|null $self self
     *
     * @return self
     */
    public function setSelf($self)
    {
        if (is_null($self)) {
            throw new \InvalidArgumentException('non-nullable self cannot be null');
        }
        $this->container['self'] = $self;

        return $this;
    }

    /**
     * Gets origin
     *
     * @return string|null
     */
    public function getOrigin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     *
     * @param string|null $origin origin
     *
     * @return self
     */
    public function setOrigin($origin)
    {
        if (is_null($origin)) {
            throw new \InvalidArgumentException('non-nullable origin cannot be null');
        }
        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets created_timestamp
     *
     * @return int|null
     */
    public function getCreatedTimestamp()
    {
        return $this->container['created_timestamp'];
    }

    /**
     * Sets created_timestamp
     *
     * @param int|null $created_timestamp created_timestamp
     *
     * @return self
     */
    public function setCreatedTimestamp($created_timestamp)
    {
        if (is_null($created_timestamp)) {
            throw new \InvalidArgumentException('non-nullable created_timestamp cannot be null');
        }
        $this->container['created_timestamp'] = $created_timestamp;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled enabled
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        if (is_null($enabled)) {
            throw new \InvalidArgumentException('non-nullable enabled cannot be null');
        }
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets totp
     *
     * @return bool|null
     */
    public function getTotp()
    {
        return $this->container['totp'];
    }

    /**
     * Sets totp
     *
     * @param bool|null $totp totp
     *
     * @return self
     */
    public function setTotp($totp)
    {
        if (is_null($totp)) {
            throw new \InvalidArgumentException('non-nullable totp cannot be null');
        }
        $this->container['totp'] = $totp;

        return $this;
    }

    /**
     * Gets federation_link
     *
     * @return string|null
     */
    public function getFederationLink()
    {
        return $this->container['federation_link'];
    }

    /**
     * Sets federation_link
     *
     * @param string|null $federation_link federation_link
     *
     * @return self
     */
    public function setFederationLink($federation_link)
    {
        if (is_null($federation_link)) {
            throw new \InvalidArgumentException('non-nullable federation_link cannot be null');
        }
        $this->container['federation_link'] = $federation_link;

        return $this;
    }

    /**
     * Gets service_account_client_id
     *
     * @return string|null
     */
    public function getServiceAccountClientId()
    {
        return $this->container['service_account_client_id'];
    }

    /**
     * Sets service_account_client_id
     *
     * @param string|null $service_account_client_id service_account_client_id
     *
     * @return self
     */
    public function setServiceAccountClientId($service_account_client_id)
    {
        if (is_null($service_account_client_id)) {
            throw new \InvalidArgumentException('non-nullable service_account_client_id cannot be null');
        }
        $this->container['service_account_client_id'] = $service_account_client_id;

        return $this;
    }

    /**
     * Gets credentials
     *
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\CredentialRepresentation[]|null
     */
    public function getCredentials()
    {
        return $this->container['credentials'];
    }

    /**
     * Sets credentials
     *
     * @param \WebMI\KeycloakApiClient\KeycloakApi\Model\CredentialRepresentation[]|null $credentials credentials
     *
     * @return self
     */
    public function setCredentials($credentials)
    {
        if (is_null($credentials)) {
            throw new \InvalidArgumentException('non-nullable credentials cannot be null');
        }
        $this->container['credentials'] = $credentials;

        return $this;
    }

    /**
     * Gets disableable_credential_types
     *
     * @return string[]|null
     */
    public function getDisableableCredentialTypes()
    {
        return $this->container['disableable_credential_types'];
    }

    /**
     * Sets disableable_credential_types
     *
     * @param string[]|null $disableable_credential_types disableable_credential_types
     *
     * @return self
     */
    public function setDisableableCredentialTypes($disableable_credential_types)
    {
        if (is_null($disableable_credential_types)) {
            throw new \InvalidArgumentException('non-nullable disableable_credential_types cannot be null');
        }


        $this->container['disableable_credential_types'] = $disableable_credential_types;

        return $this;
    }

    /**
     * Gets required_actions
     *
     * @return string[]|null
     */
    public function getRequiredActions()
    {
        return $this->container['required_actions'];
    }

    /**
     * Sets required_actions
     *
     * @param string[]|null $required_actions required_actions
     *
     * @return self
     */
    public function setRequiredActions($required_actions)
    {
        if (is_null($required_actions)) {
            throw new \InvalidArgumentException('non-nullable required_actions cannot be null');
        }
        $this->container['required_actions'] = $required_actions;

        return $this;
    }

    /**
     * Gets federated_identities
     *
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\FederatedIdentityRepresentation[]|null
     */
    public function getFederatedIdentities()
    {
        return $this->container['federated_identities'];
    }

    /**
     * Sets federated_identities
     *
     * @param \WebMI\KeycloakApiClient\KeycloakApi\Model\FederatedIdentityRepresentation[]|null $federated_identities federated_identities
     *
     * @return self
     */
    public function setFederatedIdentities($federated_identities)
    {
        if (is_null($federated_identities)) {
            throw new \InvalidArgumentException('non-nullable federated_identities cannot be null');
        }
        $this->container['federated_identities'] = $federated_identities;

        return $this;
    }

    /**
     * Gets realm_roles
     *
     * @return string[]|null
     */
    public function getRealmRoles()
    {
        return $this->container['realm_roles'];
    }

    /**
     * Sets realm_roles
     *
     * @param string[]|null $realm_roles realm_roles
     *
     * @return self
     */
    public function setRealmRoles($realm_roles)
    {
        if (is_null($realm_roles)) {
            throw new \InvalidArgumentException('non-nullable realm_roles cannot be null');
        }
        $this->container['realm_roles'] = $realm_roles;

        return $this;
    }

    /**
     * Gets client_roles
     *
     * @return array<string,string[]>|null
     */
    public function getClientRoles()
    {
        return $this->container['client_roles'];
    }

    /**
     * Sets client_roles
     *
     * @param array<string,string[]>|null $client_roles client_roles
     *
     * @return self
     */
    public function setClientRoles($client_roles)
    {
        if (is_null($client_roles)) {
            throw new \InvalidArgumentException('non-nullable client_roles cannot be null');
        }
        $this->container['client_roles'] = $client_roles;

        return $this;
    }

    /**
     * Gets client_consents
     *
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\UserConsentRepresentation[]|null
     */
    public function getClientConsents()
    {
        return $this->container['client_consents'];
    }

    /**
     * Sets client_consents
     *
     * @param \WebMI\KeycloakApiClient\KeycloakApi\Model\UserConsentRepresentation[]|null $client_consents client_consents
     *
     * @return self
     */
    public function setClientConsents($client_consents)
    {
        if (is_null($client_consents)) {
            throw new \InvalidArgumentException('non-nullable client_consents cannot be null');
        }
        $this->container['client_consents'] = $client_consents;

        return $this;
    }

    /**
     * Gets not_before
     *
     * @return int|null
     */
    public function getNotBefore()
    {
        return $this->container['not_before'];
    }

    /**
     * Sets not_before
     *
     * @param int|null $not_before not_before
     *
     * @return self
     */
    public function setNotBefore($not_before)
    {
        if (is_null($not_before)) {
            throw new \InvalidArgumentException('non-nullable not_before cannot be null');
        }
        $this->container['not_before'] = $not_before;

        return $this;
    }

    /**
     * Gets application_roles
     *
     * @return array<string,string[]>|null
     * @deprecated
     */
    public function getApplicationRoles()
    {
        return $this->container['application_roles'];
    }

    /**
     * Sets application_roles
     *
     * @param array<string,string[]>|null $application_roles application_roles
     *
     * @return self
     * @deprecated
     */
    public function setApplicationRoles($application_roles)
    {
        if (is_null($application_roles)) {
            throw new \InvalidArgumentException('non-nullable application_roles cannot be null');
        }
        $this->container['application_roles'] = $application_roles;

        return $this;
    }

    /**
     * Gets social_links
     *
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\SocialLinkRepresentation[]|null
     * @deprecated
     */
    public function getSocialLinks()
    {
        return $this->container['social_links'];
    }

    /**
     * Sets social_links
     *
     * @param \WebMI\KeycloakApiClient\KeycloakApi\Model\SocialLinkRepresentation[]|null $social_links social_links
     *
     * @return self
     * @deprecated
     */
    public function setSocialLinks($social_links)
    {
        if (is_null($social_links)) {
            throw new \InvalidArgumentException('non-nullable social_links cannot be null');
        }
        $this->container['social_links'] = $social_links;

        return $this;
    }

    /**
     * Gets groups
     *
     * @return string[]|null
     */
    public function getGroups()
    {
        return $this->container['groups'];
    }

    /**
     * Sets groups
     *
     * @param string[]|null $groups groups
     *
     * @return self
     */
    public function setGroups($groups)
    {
        if (is_null($groups)) {
            throw new \InvalidArgumentException('non-nullable groups cannot be null');
        }
        $this->container['groups'] = $groups;

        return $this;
    }

    /**
     * Gets access
     *
     * @return array<string,bool>|null
     */
    public function getAccess()
    {
        return $this->container['access'];
    }

    /**
     * Sets access
     *
     * @param array<string,bool>|null $access access
     *
     * @return self
     */
    public function setAccess($access)
    {
        if (is_null($access)) {
            throw new \InvalidArgumentException('non-nullable access cannot be null');
        }
        $this->container['access'] = $access;

        return $this;
    }

    /**
     * Gets membership_type
     *
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\MembershipType|null
     */
    public function getMembershipType()
    {
        return $this->container['membership_type'];
    }

    /**
     * Sets membership_type
     *
     * @param \WebMI\KeycloakApiClient\KeycloakApi\Model\MembershipType|null $membership_type membership_type
     *
     * @return self
     */
    public function setMembershipType($membership_type)
    {
        if (is_null($membership_type)) {
            throw new \InvalidArgumentException('non-nullable membership_type cannot be null');
        }
        $this->container['membership_type'] = $membership_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


