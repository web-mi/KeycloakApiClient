<?php
/**
 * CredentialRepresentation
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace WebMI\KeycloakApiClient\KeycloakApi\Model;

use \ArrayAccess;
use \WebMI\KeycloakApiClient\KeycloakApi\ObjectSerializer;

/**
 * CredentialRepresentation Class Doc Comment
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CredentialRepresentation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CredentialRepresentation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'type' => 'string',
        'user_label' => 'string',
        'created_date' => 'int',
        'secret_data' => 'string',
        'credential_data' => 'string',
        'priority' => 'int',
        'value' => 'string',
        'temporary' => 'bool',
        'device' => 'string',
        'hashed_salted_value' => 'string',
        'salt' => 'string',
        'hash_iterations' => 'int',
        'counter' => 'int',
        'algorithm' => 'string',
        'digits' => 'int',
        'period' => 'int',
        'config' => 'array<string,string[]>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'type' => null,
        'user_label' => null,
        'created_date' => 'int64',
        'secret_data' => null,
        'credential_data' => null,
        'priority' => 'int32',
        'value' => null,
        'temporary' => null,
        'device' => null,
        'hashed_salted_value' => null,
        'salt' => null,
        'hash_iterations' => 'int32',
        'counter' => 'int32',
        'algorithm' => null,
        'digits' => 'int32',
        'period' => 'int32',
        'config' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'type' => false,
        'user_label' => false,
        'created_date' => false,
        'secret_data' => false,
        'credential_data' => false,
        'priority' => false,
        'value' => false,
        'temporary' => false,
        'device' => false,
        'hashed_salted_value' => false,
        'salt' => false,
        'hash_iterations' => false,
        'counter' => false,
        'algorithm' => false,
        'digits' => false,
        'period' => false,
        'config' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'type' => 'type',
        'user_label' => 'userLabel',
        'created_date' => 'createdDate',
        'secret_data' => 'secretData',
        'credential_data' => 'credentialData',
        'priority' => 'priority',
        'value' => 'value',
        'temporary' => 'temporary',
        'device' => 'device',
        'hashed_salted_value' => 'hashedSaltedValue',
        'salt' => 'salt',
        'hash_iterations' => 'hashIterations',
        'counter' => 'counter',
        'algorithm' => 'algorithm',
        'digits' => 'digits',
        'period' => 'period',
        'config' => 'config'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'type' => 'setType',
        'user_label' => 'setUserLabel',
        'created_date' => 'setCreatedDate',
        'secret_data' => 'setSecretData',
        'credential_data' => 'setCredentialData',
        'priority' => 'setPriority',
        'value' => 'setValue',
        'temporary' => 'setTemporary',
        'device' => 'setDevice',
        'hashed_salted_value' => 'setHashedSaltedValue',
        'salt' => 'setSalt',
        'hash_iterations' => 'setHashIterations',
        'counter' => 'setCounter',
        'algorithm' => 'setAlgorithm',
        'digits' => 'setDigits',
        'period' => 'setPeriod',
        'config' => 'setConfig'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'type' => 'getType',
        'user_label' => 'getUserLabel',
        'created_date' => 'getCreatedDate',
        'secret_data' => 'getSecretData',
        'credential_data' => 'getCredentialData',
        'priority' => 'getPriority',
        'value' => 'getValue',
        'temporary' => 'getTemporary',
        'device' => 'getDevice',
        'hashed_salted_value' => 'getHashedSaltedValue',
        'salt' => 'getSalt',
        'hash_iterations' => 'getHashIterations',
        'counter' => 'getCounter',
        'algorithm' => 'getAlgorithm',
        'digits' => 'getDigits',
        'period' => 'getPeriod',
        'config' => 'getConfig'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('user_label', $data ?? [], null);
        $this->setIfExists('created_date', $data ?? [], null);
        $this->setIfExists('secret_data', $data ?? [], null);
        $this->setIfExists('credential_data', $data ?? [], null);
        $this->setIfExists('priority', $data ?? [], null);
        $this->setIfExists('value', $data ?? [], null);
        $this->setIfExists('temporary', $data ?? [], null);
        $this->setIfExists('device', $data ?? [], null);
        $this->setIfExists('hashed_salted_value', $data ?? [], null);
        $this->setIfExists('salt', $data ?? [], null);
        $this->setIfExists('hash_iterations', $data ?? [], null);
        $this->setIfExists('counter', $data ?? [], null);
        $this->setIfExists('algorithm', $data ?? [], null);
        $this->setIfExists('digits', $data ?? [], null);
        $this->setIfExists('period', $data ?? [], null);
        $this->setIfExists('config', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets user_label
     *
     * @return string|null
     */
    public function getUserLabel()
    {
        return $this->container['user_label'];
    }

    /**
     * Sets user_label
     *
     * @param string|null $user_label user_label
     *
     * @return self
     */
    public function setUserLabel($user_label)
    {
        if (is_null($user_label)) {
            throw new \InvalidArgumentException('non-nullable user_label cannot be null');
        }
        $this->container['user_label'] = $user_label;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return int|null
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param int|null $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        if (is_null($created_date)) {
            throw new \InvalidArgumentException('non-nullable created_date cannot be null');
        }
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets secret_data
     *
     * @return string|null
     */
    public function getSecretData()
    {
        return $this->container['secret_data'];
    }

    /**
     * Sets secret_data
     *
     * @param string|null $secret_data secret_data
     *
     * @return self
     */
    public function setSecretData($secret_data)
    {
        if (is_null($secret_data)) {
            throw new \InvalidArgumentException('non-nullable secret_data cannot be null');
        }
        $this->container['secret_data'] = $secret_data;

        return $this;
    }

    /**
     * Gets credential_data
     *
     * @return string|null
     */
    public function getCredentialData()
    {
        return $this->container['credential_data'];
    }

    /**
     * Sets credential_data
     *
     * @param string|null $credential_data credential_data
     *
     * @return self
     */
    public function setCredentialData($credential_data)
    {
        if (is_null($credential_data)) {
            throw new \InvalidArgumentException('non-nullable credential_data cannot be null');
        }
        $this->container['credential_data'] = $credential_data;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int|null
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int|null $priority priority
     *
     * @return self
     */
    public function setPriority($priority)
    {
        if (is_null($priority)) {
            throw new \InvalidArgumentException('non-nullable priority cannot be null');
        }
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets value
     *
     * @return string|null
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param string|null $value value
     *
     * @return self
     */
    public function setValue($value)
    {
        if (is_null($value)) {
            throw new \InvalidArgumentException('non-nullable value cannot be null');
        }
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets temporary
     *
     * @return bool|null
     */
    public function getTemporary()
    {
        return $this->container['temporary'];
    }

    /**
     * Sets temporary
     *
     * @param bool|null $temporary temporary
     *
     * @return self
     */
    public function setTemporary($temporary)
    {
        if (is_null($temporary)) {
            throw new \InvalidArgumentException('non-nullable temporary cannot be null');
        }
        $this->container['temporary'] = $temporary;

        return $this;
    }

    /**
     * Gets device
     *
     * @return string|null
     * @deprecated
     */
    public function getDevice()
    {
        return $this->container['device'];
    }

    /**
     * Sets device
     *
     * @param string|null $device device
     *
     * @return self
     * @deprecated
     */
    public function setDevice($device)
    {
        if (is_null($device)) {
            throw new \InvalidArgumentException('non-nullable device cannot be null');
        }
        $this->container['device'] = $device;

        return $this;
    }

    /**
     * Gets hashed_salted_value
     *
     * @return string|null
     * @deprecated
     */
    public function getHashedSaltedValue()
    {
        return $this->container['hashed_salted_value'];
    }

    /**
     * Sets hashed_salted_value
     *
     * @param string|null $hashed_salted_value hashed_salted_value
     *
     * @return self
     * @deprecated
     */
    public function setHashedSaltedValue($hashed_salted_value)
    {
        if (is_null($hashed_salted_value)) {
            throw new \InvalidArgumentException('non-nullable hashed_salted_value cannot be null');
        }
        $this->container['hashed_salted_value'] = $hashed_salted_value;

        return $this;
    }

    /**
     * Gets salt
     *
     * @return string|null
     * @deprecated
     */
    public function getSalt()
    {
        return $this->container['salt'];
    }

    /**
     * Sets salt
     *
     * @param string|null $salt salt
     *
     * @return self
     * @deprecated
     */
    public function setSalt($salt)
    {
        if (is_null($salt)) {
            throw new \InvalidArgumentException('non-nullable salt cannot be null');
        }
        $this->container['salt'] = $salt;

        return $this;
    }

    /**
     * Gets hash_iterations
     *
     * @return int|null
     * @deprecated
     */
    public function getHashIterations()
    {
        return $this->container['hash_iterations'];
    }

    /**
     * Sets hash_iterations
     *
     * @param int|null $hash_iterations hash_iterations
     *
     * @return self
     * @deprecated
     */
    public function setHashIterations($hash_iterations)
    {
        if (is_null($hash_iterations)) {
            throw new \InvalidArgumentException('non-nullable hash_iterations cannot be null');
        }
        $this->container['hash_iterations'] = $hash_iterations;

        return $this;
    }

    /**
     * Gets counter
     *
     * @return int|null
     * @deprecated
     */
    public function getCounter()
    {
        return $this->container['counter'];
    }

    /**
     * Sets counter
     *
     * @param int|null $counter counter
     *
     * @return self
     * @deprecated
     */
    public function setCounter($counter)
    {
        if (is_null($counter)) {
            throw new \InvalidArgumentException('non-nullable counter cannot be null');
        }
        $this->container['counter'] = $counter;

        return $this;
    }

    /**
     * Gets algorithm
     *
     * @return string|null
     * @deprecated
     */
    public function getAlgorithm()
    {
        return $this->container['algorithm'];
    }

    /**
     * Sets algorithm
     *
     * @param string|null $algorithm algorithm
     *
     * @return self
     * @deprecated
     */
    public function setAlgorithm($algorithm)
    {
        if (is_null($algorithm)) {
            throw new \InvalidArgumentException('non-nullable algorithm cannot be null');
        }
        $this->container['algorithm'] = $algorithm;

        return $this;
    }

    /**
     * Gets digits
     *
     * @return int|null
     * @deprecated
     */
    public function getDigits()
    {
        return $this->container['digits'];
    }

    /**
     * Sets digits
     *
     * @param int|null $digits digits
     *
     * @return self
     * @deprecated
     */
    public function setDigits($digits)
    {
        if (is_null($digits)) {
            throw new \InvalidArgumentException('non-nullable digits cannot be null');
        }
        $this->container['digits'] = $digits;

        return $this;
    }

    /**
     * Gets period
     *
     * @return int|null
     * @deprecated
     */
    public function getPeriod()
    {
        return $this->container['period'];
    }

    /**
     * Sets period
     *
     * @param int|null $period period
     *
     * @return self
     * @deprecated
     */
    public function setPeriod($period)
    {
        if (is_null($period)) {
            throw new \InvalidArgumentException('non-nullable period cannot be null');
        }
        $this->container['period'] = $period;

        return $this;
    }

    /**
     * Gets config
     *
     * @return array<string,string[]>|null
     * @deprecated
     */
    public function getConfig()
    {
        return $this->container['config'];
    }

    /**
     * Sets config
     *
     * @param array<string,string[]>|null $config config
     *
     * @return self
     * @deprecated
     */
    public function setConfig($config)
    {
        if (is_null($config)) {
            throw new \InvalidArgumentException('non-nullable config cannot be null');
        }
        $this->container['config'] = $config;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


