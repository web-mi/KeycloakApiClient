<?php
/**
 * PolicyRepresentation
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace WebMI\KeycloakApiClient\KeycloakApi\Model;

use \ArrayAccess;
use \WebMI\KeycloakApiClient\KeycloakApi\ObjectSerializer;

/**
 * PolicyRepresentation Class Doc Comment
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PolicyRepresentation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PolicyRepresentation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'name' => 'string',
        'description' => 'string',
        'type' => 'string',
        'policies' => 'string[]',
        'resources' => 'string[]',
        'scopes' => 'string[]',
        'logic' => '\WebMI\KeycloakApiClient\KeycloakApi\Model\Logic',
        'decision_strategy' => '\WebMI\KeycloakApiClient\KeycloakApi\Model\DecisionStrategy',
        'owner' => 'string',
        'resources_data' => '\WebMI\KeycloakApiClient\KeycloakApi\Model\ResourceRepresentation[]',
        'scopes_data' => '\WebMI\KeycloakApiClient\KeycloakApi\Model\ScopeRepresentation[]',
        'config' => 'array<string,string>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'description' => null,
        'type' => null,
        'policies' => null,
        'resources' => null,
        'scopes' => null,
        'logic' => null,
        'decision_strategy' => null,
        'owner' => null,
        'resources_data' => null,
        'scopes_data' => null,
        'config' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'description' => false,
        'type' => false,
        'policies' => false,
        'resources' => false,
        'scopes' => false,
        'logic' => false,
        'decision_strategy' => false,
        'owner' => false,
        'resources_data' => false,
        'scopes_data' => false,
        'config' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'description' => 'description',
        'type' => 'type',
        'policies' => 'policies',
        'resources' => 'resources',
        'scopes' => 'scopes',
        'logic' => 'logic',
        'decision_strategy' => 'decisionStrategy',
        'owner' => 'owner',
        'resources_data' => 'resourcesData',
        'scopes_data' => 'scopesData',
        'config' => 'config'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'set_id',
        'name' => 'set_name',
        'description' => 'set_description',
        'type' => 'set_type',
        'policies' => 'set_policies',
        'resources' => 'set_resources',
        'scopes' => 'set_scopes',
        'logic' => 'set_logic',
        'decision_strategy' => 'set_decision_strategy',
        'owner' => 'set_owner',
        'resources_data' => 'set_resources_data',
        'scopes_data' => 'set_scopes_data',
        'config' => 'set_config'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'get_id',
        'name' => 'get_name',
        'description' => 'get_description',
        'type' => 'get_type',
        'policies' => 'get_policies',
        'resources' => 'get_resources',
        'scopes' => 'get_scopes',
        'logic' => 'get_logic',
        'decision_strategy' => 'get_decision_strategy',
        'owner' => 'get_owner',
        'resources_data' => 'get_resources_data',
        'scopes_data' => 'get_scopes_data',
        'config' => 'get_config'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('policies', $data ?? [], null);
        $this->setIfExists('resources', $data ?? [], null);
        $this->setIfExists('scopes', $data ?? [], null);
        $this->setIfExists('logic', $data ?? [], null);
        $this->setIfExists('decision_strategy', $data ?? [], null);
        $this->setIfExists('owner', $data ?? [], null);
        $this->setIfExists('resources_data', $data ?? [], null);
        $this->setIfExists('scopes_data', $data ?? [], null);
        $this->setIfExists('config', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function get_id()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function set_id($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function get_name()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function set_name($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function get_description()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function set_description($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function get_type()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function set_type($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets policies
     *
     * @return string[]|null
     */
    public function get_policies()
    {
        return $this->container['policies'];
    }

    /**
     * Sets policies
     *
     * @param string[]|null $policies policies
     *
     * @return self
     */
    public function set_policies($policies)
    {
        if (is_null($policies)) {
            throw new \InvalidArgumentException('non-nullable policies cannot be null');
        }


        $this->container['policies'] = $policies;

        return $this;
    }

    /**
     * Gets resources
     *
     * @return string[]|null
     */
    public function get_resources()
    {
        return $this->container['resources'];
    }

    /**
     * Sets resources
     *
     * @param string[]|null $resources resources
     *
     * @return self
     */
    public function set_resources($resources)
    {
        if (is_null($resources)) {
            throw new \InvalidArgumentException('non-nullable resources cannot be null');
        }


        $this->container['resources'] = $resources;

        return $this;
    }

    /**
     * Gets scopes
     *
     * @return string[]|null
     */
    public function get_scopes()
    {
        return $this->container['scopes'];
    }

    /**
     * Sets scopes
     *
     * @param string[]|null $scopes scopes
     *
     * @return self
     */
    public function set_scopes($scopes)
    {
        if (is_null($scopes)) {
            throw new \InvalidArgumentException('non-nullable scopes cannot be null');
        }


        $this->container['scopes'] = $scopes;

        return $this;
    }

    /**
     * Gets logic
     *
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\Logic|null
     */
    public function get_logic()
    {
        return $this->container['logic'];
    }

    /**
     * Sets logic
     *
     * @param \WebMI\KeycloakApiClient\KeycloakApi\Model\Logic|null $logic logic
     *
     * @return self
     */
    public function set_logic($logic)
    {
        if (is_null($logic)) {
            throw new \InvalidArgumentException('non-nullable logic cannot be null');
        }
        $this->container['logic'] = $logic;

        return $this;
    }

    /**
     * Gets decision_strategy
     *
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\DecisionStrategy|null
     */
    public function get_decision_strategy()
    {
        return $this->container['decision_strategy'];
    }

    /**
     * Sets decision_strategy
     *
     * @param \WebMI\KeycloakApiClient\KeycloakApi\Model\DecisionStrategy|null $decision_strategy decision_strategy
     *
     * @return self
     */
    public function set_decision_strategy($decision_strategy)
    {
        if (is_null($decision_strategy)) {
            throw new \InvalidArgumentException('non-nullable decision_strategy cannot be null');
        }
        $this->container['decision_strategy'] = $decision_strategy;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return string|null
     */
    public function get_owner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param string|null $owner owner
     *
     * @return self
     */
    public function set_owner($owner)
    {
        if (is_null($owner)) {
            throw new \InvalidArgumentException('non-nullable owner cannot be null');
        }
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets resources_data
     *
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\ResourceRepresentation[]|null
     */
    public function get_resources_data()
    {
        return $this->container['resources_data'];
    }

    /**
     * Sets resources_data
     *
     * @param \WebMI\KeycloakApiClient\KeycloakApi\Model\ResourceRepresentation[]|null $resources_data resources_data
     *
     * @return self
     */
    public function set_resources_data($resources_data)
    {
        if (is_null($resources_data)) {
            throw new \InvalidArgumentException('non-nullable resources_data cannot be null');
        }


        $this->container['resources_data'] = $resources_data;

        return $this;
    }

    /**
     * Gets scopes_data
     *
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\ScopeRepresentation[]|null
     */
    public function get_scopes_data()
    {
        return $this->container['scopes_data'];
    }

    /**
     * Sets scopes_data
     *
     * @param \WebMI\KeycloakApiClient\KeycloakApi\Model\ScopeRepresentation[]|null $scopes_data scopes_data
     *
     * @return self
     */
    public function set_scopes_data($scopes_data)
    {
        if (is_null($scopes_data)) {
            throw new \InvalidArgumentException('non-nullable scopes_data cannot be null');
        }


        $this->container['scopes_data'] = $scopes_data;

        return $this;
    }

    /**
     * Gets config
     *
     * @return array<string,string>|null
     */
    public function get_config()
    {
        return $this->container['config'];
    }

    /**
     * Sets config
     *
     * @param array<string,string>|null $config config
     *
     * @return self
     */
    public function set_config($config)
    {
        if (is_null($config)) {
            throw new \InvalidArgumentException('non-nullable config cannot be null');
        }
        $this->container['config'] = $config;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


