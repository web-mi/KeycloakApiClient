<?php
/**
 * ClientTemplateRepresentation
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace WebMI\KeycloakApiClient\KeycloakApi\Model;

use \ArrayAccess;
use \WebMI\KeycloakApiClient\KeycloakApi\ObjectSerializer;

/**
 * ClientTemplateRepresentation Class Doc Comment
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ClientTemplateRepresentation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ClientTemplateRepresentation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'name' => 'string',
        'description' => 'string',
        'protocol' => 'string',
        'full_scope_allowed' => 'bool',
        'bearer_only' => 'bool',
        'consent_required' => 'bool',
        'standard_flow_enabled' => 'bool',
        'implicit_flow_enabled' => 'bool',
        'direct_access_grants_enabled' => 'bool',
        'service_accounts_enabled' => 'bool',
        'public_client' => 'bool',
        'frontchannel_logout' => 'bool',
        'attributes' => 'array<string,string>',
        'protocol_mappers' => '\WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'description' => null,
        'protocol' => null,
        'full_scope_allowed' => null,
        'bearer_only' => null,
        'consent_required' => null,
        'standard_flow_enabled' => null,
        'implicit_flow_enabled' => null,
        'direct_access_grants_enabled' => null,
        'service_accounts_enabled' => null,
        'public_client' => null,
        'frontchannel_logout' => null,
        'attributes' => null,
        'protocol_mappers' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'description' => false,
        'protocol' => false,
        'full_scope_allowed' => false,
        'bearer_only' => false,
        'consent_required' => false,
        'standard_flow_enabled' => false,
        'implicit_flow_enabled' => false,
        'direct_access_grants_enabled' => false,
        'service_accounts_enabled' => false,
        'public_client' => false,
        'frontchannel_logout' => false,
        'attributes' => false,
        'protocol_mappers' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'description' => 'description',
        'protocol' => 'protocol',
        'full_scope_allowed' => 'fullScopeAllowed',
        'bearer_only' => 'bearerOnly',
        'consent_required' => 'consentRequired',
        'standard_flow_enabled' => 'standardFlowEnabled',
        'implicit_flow_enabled' => 'implicitFlowEnabled',
        'direct_access_grants_enabled' => 'directAccessGrantsEnabled',
        'service_accounts_enabled' => 'serviceAccountsEnabled',
        'public_client' => 'publicClient',
        'frontchannel_logout' => 'frontchannelLogout',
        'attributes' => 'attributes',
        'protocol_mappers' => 'protocolMappers'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'description' => 'setDescription',
        'protocol' => 'setProtocol',
        'full_scope_allowed' => 'setFullScopeAllowed',
        'bearer_only' => 'setBearerOnly',
        'consent_required' => 'setConsentRequired',
        'standard_flow_enabled' => 'setStandardFlowEnabled',
        'implicit_flow_enabled' => 'setImplicitFlowEnabled',
        'direct_access_grants_enabled' => 'setDirectAccessGrantsEnabled',
        'service_accounts_enabled' => 'setServiceAccountsEnabled',
        'public_client' => 'setPublicClient',
        'frontchannel_logout' => 'setFrontchannelLogout',
        'attributes' => 'setAttributes',
        'protocol_mappers' => 'setProtocolMappers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'description' => 'getDescription',
        'protocol' => 'getProtocol',
        'full_scope_allowed' => 'getFullScopeAllowed',
        'bearer_only' => 'getBearerOnly',
        'consent_required' => 'getConsentRequired',
        'standard_flow_enabled' => 'getStandardFlowEnabled',
        'implicit_flow_enabled' => 'getImplicitFlowEnabled',
        'direct_access_grants_enabled' => 'getDirectAccessGrantsEnabled',
        'service_accounts_enabled' => 'getServiceAccountsEnabled',
        'public_client' => 'getPublicClient',
        'frontchannel_logout' => 'getFrontchannelLogout',
        'attributes' => 'getAttributes',
        'protocol_mappers' => 'getProtocolMappers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('protocol', $data ?? [], null);
        $this->setIfExists('full_scope_allowed', $data ?? [], null);
        $this->setIfExists('bearer_only', $data ?? [], null);
        $this->setIfExists('consent_required', $data ?? [], null);
        $this->setIfExists('standard_flow_enabled', $data ?? [], null);
        $this->setIfExists('implicit_flow_enabled', $data ?? [], null);
        $this->setIfExists('direct_access_grants_enabled', $data ?? [], null);
        $this->setIfExists('service_accounts_enabled', $data ?? [], null);
        $this->setIfExists('public_client', $data ?? [], null);
        $this->setIfExists('frontchannel_logout', $data ?? [], null);
        $this->setIfExists('attributes', $data ?? [], null);
        $this->setIfExists('protocol_mappers', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets protocol
     *
     * @return string|null
     */
    public function getProtocol()
    {
        return $this->container['protocol'];
    }

    /**
     * Sets protocol
     *
     * @param string|null $protocol protocol
     *
     * @return self
     */
    public function setProtocol($protocol)
    {
        if (is_null($protocol)) {
            throw new \InvalidArgumentException('non-nullable protocol cannot be null');
        }
        $this->container['protocol'] = $protocol;

        return $this;
    }

    /**
     * Gets full_scope_allowed
     *
     * @return bool|null
     */
    public function getFullScopeAllowed()
    {
        return $this->container['full_scope_allowed'];
    }

    /**
     * Sets full_scope_allowed
     *
     * @param bool|null $full_scope_allowed full_scope_allowed
     *
     * @return self
     */
    public function setFullScopeAllowed($full_scope_allowed)
    {
        if (is_null($full_scope_allowed)) {
            throw new \InvalidArgumentException('non-nullable full_scope_allowed cannot be null');
        }
        $this->container['full_scope_allowed'] = $full_scope_allowed;

        return $this;
    }

    /**
     * Gets bearer_only
     *
     * @return bool|null
     */
    public function getBearerOnly()
    {
        return $this->container['bearer_only'];
    }

    /**
     * Sets bearer_only
     *
     * @param bool|null $bearer_only bearer_only
     *
     * @return self
     */
    public function setBearerOnly($bearer_only)
    {
        if (is_null($bearer_only)) {
            throw new \InvalidArgumentException('non-nullable bearer_only cannot be null');
        }
        $this->container['bearer_only'] = $bearer_only;

        return $this;
    }

    /**
     * Gets consent_required
     *
     * @return bool|null
     */
    public function getConsentRequired()
    {
        return $this->container['consent_required'];
    }

    /**
     * Sets consent_required
     *
     * @param bool|null $consent_required consent_required
     *
     * @return self
     */
    public function setConsentRequired($consent_required)
    {
        if (is_null($consent_required)) {
            throw new \InvalidArgumentException('non-nullable consent_required cannot be null');
        }
        $this->container['consent_required'] = $consent_required;

        return $this;
    }

    /**
     * Gets standard_flow_enabled
     *
     * @return bool|null
     */
    public function getStandardFlowEnabled()
    {
        return $this->container['standard_flow_enabled'];
    }

    /**
     * Sets standard_flow_enabled
     *
     * @param bool|null $standard_flow_enabled standard_flow_enabled
     *
     * @return self
     */
    public function setStandardFlowEnabled($standard_flow_enabled)
    {
        if (is_null($standard_flow_enabled)) {
            throw new \InvalidArgumentException('non-nullable standard_flow_enabled cannot be null');
        }
        $this->container['standard_flow_enabled'] = $standard_flow_enabled;

        return $this;
    }

    /**
     * Gets implicit_flow_enabled
     *
     * @return bool|null
     */
    public function getImplicitFlowEnabled()
    {
        return $this->container['implicit_flow_enabled'];
    }

    /**
     * Sets implicit_flow_enabled
     *
     * @param bool|null $implicit_flow_enabled implicit_flow_enabled
     *
     * @return self
     */
    public function setImplicitFlowEnabled($implicit_flow_enabled)
    {
        if (is_null($implicit_flow_enabled)) {
            throw new \InvalidArgumentException('non-nullable implicit_flow_enabled cannot be null');
        }
        $this->container['implicit_flow_enabled'] = $implicit_flow_enabled;

        return $this;
    }

    /**
     * Gets direct_access_grants_enabled
     *
     * @return bool|null
     */
    public function getDirectAccessGrantsEnabled()
    {
        return $this->container['direct_access_grants_enabled'];
    }

    /**
     * Sets direct_access_grants_enabled
     *
     * @param bool|null $direct_access_grants_enabled direct_access_grants_enabled
     *
     * @return self
     */
    public function setDirectAccessGrantsEnabled($direct_access_grants_enabled)
    {
        if (is_null($direct_access_grants_enabled)) {
            throw new \InvalidArgumentException('non-nullable direct_access_grants_enabled cannot be null');
        }
        $this->container['direct_access_grants_enabled'] = $direct_access_grants_enabled;

        return $this;
    }

    /**
     * Gets service_accounts_enabled
     *
     * @return bool|null
     */
    public function getServiceAccountsEnabled()
    {
        return $this->container['service_accounts_enabled'];
    }

    /**
     * Sets service_accounts_enabled
     *
     * @param bool|null $service_accounts_enabled service_accounts_enabled
     *
     * @return self
     */
    public function setServiceAccountsEnabled($service_accounts_enabled)
    {
        if (is_null($service_accounts_enabled)) {
            throw new \InvalidArgumentException('non-nullable service_accounts_enabled cannot be null');
        }
        $this->container['service_accounts_enabled'] = $service_accounts_enabled;

        return $this;
    }

    /**
     * Gets public_client
     *
     * @return bool|null
     */
    public function getPublicClient()
    {
        return $this->container['public_client'];
    }

    /**
     * Sets public_client
     *
     * @param bool|null $public_client public_client
     *
     * @return self
     */
    public function setPublicClient($public_client)
    {
        if (is_null($public_client)) {
            throw new \InvalidArgumentException('non-nullable public_client cannot be null');
        }
        $this->container['public_client'] = $public_client;

        return $this;
    }

    /**
     * Gets frontchannel_logout
     *
     * @return bool|null
     */
    public function getFrontchannelLogout()
    {
        return $this->container['frontchannel_logout'];
    }

    /**
     * Sets frontchannel_logout
     *
     * @param bool|null $frontchannel_logout frontchannel_logout
     *
     * @return self
     */
    public function setFrontchannelLogout($frontchannel_logout)
    {
        if (is_null($frontchannel_logout)) {
            throw new \InvalidArgumentException('non-nullable frontchannel_logout cannot be null');
        }
        $this->container['frontchannel_logout'] = $frontchannel_logout;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return array<string,string>|null
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param array<string,string>|null $attributes attributes
     *
     * @return self
     */
    public function setAttributes($attributes)
    {
        if (is_null($attributes)) {
            throw new \InvalidArgumentException('non-nullable attributes cannot be null');
        }
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets protocol_mappers
     *
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[]|null
     */
    public function getProtocolMappers()
    {
        return $this->container['protocol_mappers'];
    }

    /**
     * Sets protocol_mappers
     *
     * @param \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[]|null $protocol_mappers protocol_mappers
     *
     * @return self
     */
    public function setProtocolMappers($protocol_mappers)
    {
        if (is_null($protocol_mappers)) {
            throw new \InvalidArgumentException('non-nullable protocol_mappers cannot be null');
        }
        $this->container['protocol_mappers'] = $protocol_mappers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


