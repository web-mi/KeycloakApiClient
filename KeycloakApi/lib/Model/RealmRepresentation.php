<?php
/**
 * RealmRepresentation
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace WebMI\KeycloakApiClient\KeycloakApi\Model;

use \ArrayAccess;
use \WebMI\KeycloakApiClient\KeycloakApi\ObjectSerializer;

/**
 * RealmRepresentation Class Doc Comment
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RealmRepresentation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RealmRepresentation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'realm' => 'string',
        'display_name' => 'string',
        'display_name_html' => 'string',
        'not_before' => 'int',
        'default_signature_algorithm' => 'string',
        'revoke_refresh_token' => 'bool',
        'refresh_token_max_reuse' => 'int',
        'access_token_lifespan' => 'int',
        'access_token_lifespan_for_implicit_flow' => 'int',
        'sso_session_idle_timeout' => 'int',
        'sso_session_max_lifespan' => 'int',
        'sso_session_idle_timeout_remember_me' => 'int',
        'sso_session_max_lifespan_remember_me' => 'int',
        'offline_session_idle_timeout' => 'int',
        'offline_session_max_lifespan_enabled' => 'bool',
        'offline_session_max_lifespan' => 'int',
        'client_session_idle_timeout' => 'int',
        'client_session_max_lifespan' => 'int',
        'client_offline_session_idle_timeout' => 'int',
        'client_offline_session_max_lifespan' => 'int',
        'access_code_lifespan' => 'int',
        'access_code_lifespan_user_action' => 'int',
        'access_code_lifespan_login' => 'int',
        'action_token_generated_by_admin_lifespan' => 'int',
        'action_token_generated_by_user_lifespan' => 'int',
        'oauth2_device_code_lifespan' => 'int',
        'oauth2_device_polling_interval' => 'int',
        'enabled' => 'bool',
        'ssl_required' => 'string',
        'password_credential_grant_allowed' => 'bool',
        'registration_allowed' => 'bool',
        'registration_email_as_username' => 'bool',
        'remember_me' => 'bool',
        'verify_email' => 'bool',
        'login_with_email_allowed' => 'bool',
        'duplicate_emails_allowed' => 'bool',
        'reset_password_allowed' => 'bool',
        'edit_username_allowed' => 'bool',
        'user_cache_enabled' => 'bool',
        'realm_cache_enabled' => 'bool',
        'brute_force_protected' => 'bool',
        'permanent_lockout' => 'bool',
        'max_temporary_lockouts' => 'int',
        'max_failure_wait_seconds' => 'int',
        'minimum_quick_login_wait_seconds' => 'int',
        'wait_increment_seconds' => 'int',
        'quick_login_check_milli_seconds' => 'int',
        'max_delta_time_seconds' => 'int',
        'failure_factor' => 'int',
        'private_key' => 'string',
        'public_key' => 'string',
        'certificate' => 'string',
        'code_secret' => 'string',
        'roles' => '\WebMI\KeycloakApiClient\KeycloakApi\Model\RolesRepresentation',
        'groups' => '\WebMI\KeycloakApiClient\KeycloakApi\Model\GroupRepresentation[]',
        'default_roles' => 'string[]',
        'default_role' => '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation',
        'default_groups' => 'string[]',
        'required_credentials' => 'string[]',
        'password_policy' => 'string',
        'otp_policy_type' => 'string',
        'otp_policy_algorithm' => 'string',
        'otp_policy_initial_counter' => 'int',
        'otp_policy_digits' => 'int',
        'otp_policy_look_ahead_window' => 'int',
        'otp_policy_period' => 'int',
        'otp_policy_code_reusable' => 'bool',
        'otp_supported_applications' => 'string[]',
        'localization_texts' => 'array<string,array<string,string>>',
        'web_authn_policy_rp_entity_name' => 'string',
        'web_authn_policy_signature_algorithms' => 'string[]',
        'web_authn_policy_rp_id' => 'string',
        'web_authn_policy_attestation_conveyance_preference' => 'string',
        'web_authn_policy_authenticator_attachment' => 'string',
        'web_authn_policy_require_resident_key' => 'string',
        'web_authn_policy_user_verification_requirement' => 'string',
        'web_authn_policy_create_timeout' => 'int',
        'web_authn_policy_avoid_same_authenticator_register' => 'bool',
        'web_authn_policy_acceptable_aaguids' => 'string[]',
        'web_authn_policy_extra_origins' => 'string[]',
        'web_authn_policy_passwordless_rp_entity_name' => 'string',
        'web_authn_policy_passwordless_signature_algorithms' => 'string[]',
        'web_authn_policy_passwordless_rp_id' => 'string',
        'web_authn_policy_passwordless_attestation_conveyance_preference' => 'string',
        'web_authn_policy_passwordless_authenticator_attachment' => 'string',
        'web_authn_policy_passwordless_require_resident_key' => 'string',
        'web_authn_policy_passwordless_user_verification_requirement' => 'string',
        'web_authn_policy_passwordless_create_timeout' => 'int',
        'web_authn_policy_passwordless_avoid_same_authenticator_register' => 'bool',
        'web_authn_policy_passwordless_acceptable_aaguids' => 'string[]',
        'web_authn_policy_passwordless_extra_origins' => 'string[]',
        'client_profiles' => '\WebMI\KeycloakApiClient\KeycloakApi\Model\ClientProfilesRepresentation',
        'client_policies' => '\WebMI\KeycloakApiClient\KeycloakApi\Model\ClientPoliciesRepresentation',
        'users' => '\WebMI\KeycloakApiClient\KeycloakApi\Model\UserRepresentation[]',
        'federated_users' => '\WebMI\KeycloakApiClient\KeycloakApi\Model\UserRepresentation[]',
        'scope_mappings' => '\WebMI\KeycloakApiClient\KeycloakApi\Model\ScopeMappingRepresentation[]',
        'client_scope_mappings' => 'array<string,\WebMI\KeycloakApiClient\KeycloakApi\Model\ScopeMappingRepresentation[]>',
        'clients' => '\WebMI\KeycloakApiClient\KeycloakApi\Model\ClientRepresentation[]',
        'client_scopes' => '\WebMI\KeycloakApiClient\KeycloakApi\Model\ClientScopeRepresentation[]',
        'default_default_client_scopes' => 'string[]',
        'default_optional_client_scopes' => 'string[]',
        'browser_security_headers' => 'array<string,string>',
        'smtp_server' => 'array<string,string>',
        'user_federation_providers' => '\WebMI\KeycloakApiClient\KeycloakApi\Model\UserFederationProviderRepresentation[]',
        'user_federation_mappers' => '\WebMI\KeycloakApiClient\KeycloakApi\Model\UserFederationMapperRepresentation[]',
        'login_theme' => 'string',
        'account_theme' => 'string',
        'admin_theme' => 'string',
        'email_theme' => 'string',
        'events_enabled' => 'bool',
        'events_expiration' => 'int',
        'events_listeners' => 'string[]',
        'enabled_event_types' => 'string[]',
        'admin_events_enabled' => 'bool',
        'admin_events_details_enabled' => 'bool',
        'identity_providers' => '\WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderRepresentation[]',
        'identity_provider_mappers' => '\WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderMapperRepresentation[]',
        'protocol_mappers' => '\WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[]',
        'components' => 'array<string,\WebMI\KeycloakApiClient\KeycloakApi\Model\ComponentExportRepresentation[]>',
        'internationalization_enabled' => 'bool',
        'supported_locales' => 'string[]',
        'default_locale' => 'string',
        'authentication_flows' => '\WebMI\KeycloakApiClient\KeycloakApi\Model\AuthenticationFlowRepresentation[]',
        'authenticator_config' => '\WebMI\KeycloakApiClient\KeycloakApi\Model\AuthenticatorConfigRepresentation[]',
        'required_actions' => '\WebMI\KeycloakApiClient\KeycloakApi\Model\RequiredActionProviderRepresentation[]',
        'browser_flow' => 'string',
        'registration_flow' => 'string',
        'direct_grant_flow' => 'string',
        'reset_credentials_flow' => 'string',
        'client_authentication_flow' => 'string',
        'docker_authentication_flow' => 'string',
        'first_broker_login_flow' => 'string',
        'attributes' => 'array<string,string>',
        'keycloak_version' => 'string',
        'user_managed_access_allowed' => 'bool',
        'organizations_enabled' => 'bool',
        'organizations' => '\WebMI\KeycloakApiClient\KeycloakApi\Model\OrganizationRepresentation[]',
        'social' => 'bool',
        'update_profile_on_initial_social_login' => 'bool',
        'social_providers' => 'array<string,string>',
        'application_scope_mappings' => 'array<string,\WebMI\KeycloakApiClient\KeycloakApi\Model\ScopeMappingRepresentation[]>',
        'applications' => '\WebMI\KeycloakApiClient\KeycloakApi\Model\ApplicationRepresentation[]',
        'oauth_clients' => '\WebMI\KeycloakApiClient\KeycloakApi\Model\OAuthClientRepresentation[]',
        'client_templates' => '\WebMI\KeycloakApiClient\KeycloakApi\Model\ClientTemplateRepresentation[]',
        'o_auth2_device_code_lifespan' => 'int',
        'o_auth2_device_polling_interval' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'realm' => null,
        'display_name' => null,
        'display_name_html' => null,
        'not_before' => 'int32',
        'default_signature_algorithm' => null,
        'revoke_refresh_token' => null,
        'refresh_token_max_reuse' => 'int32',
        'access_token_lifespan' => 'int32',
        'access_token_lifespan_for_implicit_flow' => 'int32',
        'sso_session_idle_timeout' => 'int32',
        'sso_session_max_lifespan' => 'int32',
        'sso_session_idle_timeout_remember_me' => 'int32',
        'sso_session_max_lifespan_remember_me' => 'int32',
        'offline_session_idle_timeout' => 'int32',
        'offline_session_max_lifespan_enabled' => null,
        'offline_session_max_lifespan' => 'int32',
        'client_session_idle_timeout' => 'int32',
        'client_session_max_lifespan' => 'int32',
        'client_offline_session_idle_timeout' => 'int32',
        'client_offline_session_max_lifespan' => 'int32',
        'access_code_lifespan' => 'int32',
        'access_code_lifespan_user_action' => 'int32',
        'access_code_lifespan_login' => 'int32',
        'action_token_generated_by_admin_lifespan' => 'int32',
        'action_token_generated_by_user_lifespan' => 'int32',
        'oauth2_device_code_lifespan' => 'int32',
        'oauth2_device_polling_interval' => 'int32',
        'enabled' => null,
        'ssl_required' => null,
        'password_credential_grant_allowed' => null,
        'registration_allowed' => null,
        'registration_email_as_username' => null,
        'remember_me' => null,
        'verify_email' => null,
        'login_with_email_allowed' => null,
        'duplicate_emails_allowed' => null,
        'reset_password_allowed' => null,
        'edit_username_allowed' => null,
        'user_cache_enabled' => null,
        'realm_cache_enabled' => null,
        'brute_force_protected' => null,
        'permanent_lockout' => null,
        'max_temporary_lockouts' => 'int32',
        'max_failure_wait_seconds' => 'int32',
        'minimum_quick_login_wait_seconds' => 'int32',
        'wait_increment_seconds' => 'int32',
        'quick_login_check_milli_seconds' => 'int64',
        'max_delta_time_seconds' => 'int32',
        'failure_factor' => 'int32',
        'private_key' => null,
        'public_key' => null,
        'certificate' => null,
        'code_secret' => null,
        'roles' => null,
        'groups' => null,
        'default_roles' => null,
        'default_role' => null,
        'default_groups' => null,
        'required_credentials' => null,
        'password_policy' => null,
        'otp_policy_type' => null,
        'otp_policy_algorithm' => null,
        'otp_policy_initial_counter' => 'int32',
        'otp_policy_digits' => 'int32',
        'otp_policy_look_ahead_window' => 'int32',
        'otp_policy_period' => 'int32',
        'otp_policy_code_reusable' => null,
        'otp_supported_applications' => null,
        'localization_texts' => null,
        'web_authn_policy_rp_entity_name' => null,
        'web_authn_policy_signature_algorithms' => null,
        'web_authn_policy_rp_id' => null,
        'web_authn_policy_attestation_conveyance_preference' => null,
        'web_authn_policy_authenticator_attachment' => null,
        'web_authn_policy_require_resident_key' => null,
        'web_authn_policy_user_verification_requirement' => null,
        'web_authn_policy_create_timeout' => 'int32',
        'web_authn_policy_avoid_same_authenticator_register' => null,
        'web_authn_policy_acceptable_aaguids' => null,
        'web_authn_policy_extra_origins' => null,
        'web_authn_policy_passwordless_rp_entity_name' => null,
        'web_authn_policy_passwordless_signature_algorithms' => null,
        'web_authn_policy_passwordless_rp_id' => null,
        'web_authn_policy_passwordless_attestation_conveyance_preference' => null,
        'web_authn_policy_passwordless_authenticator_attachment' => null,
        'web_authn_policy_passwordless_require_resident_key' => null,
        'web_authn_policy_passwordless_user_verification_requirement' => null,
        'web_authn_policy_passwordless_create_timeout' => 'int32',
        'web_authn_policy_passwordless_avoid_same_authenticator_register' => null,
        'web_authn_policy_passwordless_acceptable_aaguids' => null,
        'web_authn_policy_passwordless_extra_origins' => null,
        'client_profiles' => null,
        'client_policies' => null,
        'users' => null,
        'federated_users' => null,
        'scope_mappings' => null,
        'client_scope_mappings' => null,
        'clients' => null,
        'client_scopes' => null,
        'default_default_client_scopes' => null,
        'default_optional_client_scopes' => null,
        'browser_security_headers' => null,
        'smtp_server' => null,
        'user_federation_providers' => null,
        'user_federation_mappers' => null,
        'login_theme' => null,
        'account_theme' => null,
        'admin_theme' => null,
        'email_theme' => null,
        'events_enabled' => null,
        'events_expiration' => 'int64',
        'events_listeners' => null,
        'enabled_event_types' => null,
        'admin_events_enabled' => null,
        'admin_events_details_enabled' => null,
        'identity_providers' => null,
        'identity_provider_mappers' => null,
        'protocol_mappers' => null,
        'components' => null,
        'internationalization_enabled' => null,
        'supported_locales' => null,
        'default_locale' => null,
        'authentication_flows' => null,
        'authenticator_config' => null,
        'required_actions' => null,
        'browser_flow' => null,
        'registration_flow' => null,
        'direct_grant_flow' => null,
        'reset_credentials_flow' => null,
        'client_authentication_flow' => null,
        'docker_authentication_flow' => null,
        'first_broker_login_flow' => null,
        'attributes' => null,
        'keycloak_version' => null,
        'user_managed_access_allowed' => null,
        'organizations_enabled' => null,
        'organizations' => null,
        'social' => null,
        'update_profile_on_initial_social_login' => null,
        'social_providers' => null,
        'application_scope_mappings' => null,
        'applications' => null,
        'oauth_clients' => null,
        'client_templates' => null,
        'o_auth2_device_code_lifespan' => 'int32',
        'o_auth2_device_polling_interval' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'realm' => false,
        'display_name' => false,
        'display_name_html' => false,
        'not_before' => false,
        'default_signature_algorithm' => false,
        'revoke_refresh_token' => false,
        'refresh_token_max_reuse' => false,
        'access_token_lifespan' => false,
        'access_token_lifespan_for_implicit_flow' => false,
        'sso_session_idle_timeout' => false,
        'sso_session_max_lifespan' => false,
        'sso_session_idle_timeout_remember_me' => false,
        'sso_session_max_lifespan_remember_me' => false,
        'offline_session_idle_timeout' => false,
        'offline_session_max_lifespan_enabled' => false,
        'offline_session_max_lifespan' => false,
        'client_session_idle_timeout' => false,
        'client_session_max_lifespan' => false,
        'client_offline_session_idle_timeout' => false,
        'client_offline_session_max_lifespan' => false,
        'access_code_lifespan' => false,
        'access_code_lifespan_user_action' => false,
        'access_code_lifespan_login' => false,
        'action_token_generated_by_admin_lifespan' => false,
        'action_token_generated_by_user_lifespan' => false,
        'oauth2_device_code_lifespan' => false,
        'oauth2_device_polling_interval' => false,
        'enabled' => false,
        'ssl_required' => false,
        'password_credential_grant_allowed' => false,
        'registration_allowed' => false,
        'registration_email_as_username' => false,
        'remember_me' => false,
        'verify_email' => false,
        'login_with_email_allowed' => false,
        'duplicate_emails_allowed' => false,
        'reset_password_allowed' => false,
        'edit_username_allowed' => false,
        'user_cache_enabled' => false,
        'realm_cache_enabled' => false,
        'brute_force_protected' => false,
        'permanent_lockout' => false,
        'max_temporary_lockouts' => false,
        'max_failure_wait_seconds' => false,
        'minimum_quick_login_wait_seconds' => false,
        'wait_increment_seconds' => false,
        'quick_login_check_milli_seconds' => false,
        'max_delta_time_seconds' => false,
        'failure_factor' => false,
        'private_key' => false,
        'public_key' => false,
        'certificate' => false,
        'code_secret' => false,
        'roles' => false,
        'groups' => false,
        'default_roles' => false,
        'default_role' => false,
        'default_groups' => false,
        'required_credentials' => false,
        'password_policy' => false,
        'otp_policy_type' => false,
        'otp_policy_algorithm' => false,
        'otp_policy_initial_counter' => false,
        'otp_policy_digits' => false,
        'otp_policy_look_ahead_window' => false,
        'otp_policy_period' => false,
        'otp_policy_code_reusable' => false,
        'otp_supported_applications' => false,
        'localization_texts' => false,
        'web_authn_policy_rp_entity_name' => false,
        'web_authn_policy_signature_algorithms' => false,
        'web_authn_policy_rp_id' => false,
        'web_authn_policy_attestation_conveyance_preference' => false,
        'web_authn_policy_authenticator_attachment' => false,
        'web_authn_policy_require_resident_key' => false,
        'web_authn_policy_user_verification_requirement' => false,
        'web_authn_policy_create_timeout' => false,
        'web_authn_policy_avoid_same_authenticator_register' => false,
        'web_authn_policy_acceptable_aaguids' => false,
        'web_authn_policy_extra_origins' => false,
        'web_authn_policy_passwordless_rp_entity_name' => false,
        'web_authn_policy_passwordless_signature_algorithms' => false,
        'web_authn_policy_passwordless_rp_id' => false,
        'web_authn_policy_passwordless_attestation_conveyance_preference' => false,
        'web_authn_policy_passwordless_authenticator_attachment' => false,
        'web_authn_policy_passwordless_require_resident_key' => false,
        'web_authn_policy_passwordless_user_verification_requirement' => false,
        'web_authn_policy_passwordless_create_timeout' => false,
        'web_authn_policy_passwordless_avoid_same_authenticator_register' => false,
        'web_authn_policy_passwordless_acceptable_aaguids' => false,
        'web_authn_policy_passwordless_extra_origins' => false,
        'client_profiles' => false,
        'client_policies' => false,
        'users' => false,
        'federated_users' => false,
        'scope_mappings' => false,
        'client_scope_mappings' => false,
        'clients' => false,
        'client_scopes' => false,
        'default_default_client_scopes' => false,
        'default_optional_client_scopes' => false,
        'browser_security_headers' => false,
        'smtp_server' => false,
        'user_federation_providers' => false,
        'user_federation_mappers' => false,
        'login_theme' => false,
        'account_theme' => false,
        'admin_theme' => false,
        'email_theme' => false,
        'events_enabled' => false,
        'events_expiration' => false,
        'events_listeners' => false,
        'enabled_event_types' => false,
        'admin_events_enabled' => false,
        'admin_events_details_enabled' => false,
        'identity_providers' => false,
        'identity_provider_mappers' => false,
        'protocol_mappers' => false,
        'components' => false,
        'internationalization_enabled' => false,
        'supported_locales' => false,
        'default_locale' => false,
        'authentication_flows' => false,
        'authenticator_config' => false,
        'required_actions' => false,
        'browser_flow' => false,
        'registration_flow' => false,
        'direct_grant_flow' => false,
        'reset_credentials_flow' => false,
        'client_authentication_flow' => false,
        'docker_authentication_flow' => false,
        'first_broker_login_flow' => false,
        'attributes' => false,
        'keycloak_version' => false,
        'user_managed_access_allowed' => false,
        'organizations_enabled' => false,
        'organizations' => false,
        'social' => false,
        'update_profile_on_initial_social_login' => false,
        'social_providers' => false,
        'application_scope_mappings' => false,
        'applications' => false,
        'oauth_clients' => false,
        'client_templates' => false,
        'o_auth2_device_code_lifespan' => false,
        'o_auth2_device_polling_interval' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'realm' => 'realm',
        'display_name' => 'displayName',
        'display_name_html' => 'displayNameHtml',
        'not_before' => 'notBefore',
        'default_signature_algorithm' => 'defaultSignatureAlgorithm',
        'revoke_refresh_token' => 'revokeRefreshToken',
        'refresh_token_max_reuse' => 'refreshTokenMaxReuse',
        'access_token_lifespan' => 'accessTokenLifespan',
        'access_token_lifespan_for_implicit_flow' => 'accessTokenLifespanForImplicitFlow',
        'sso_session_idle_timeout' => 'ssoSessionIdleTimeout',
        'sso_session_max_lifespan' => 'ssoSessionMaxLifespan',
        'sso_session_idle_timeout_remember_me' => 'ssoSessionIdleTimeoutRememberMe',
        'sso_session_max_lifespan_remember_me' => 'ssoSessionMaxLifespanRememberMe',
        'offline_session_idle_timeout' => 'offlineSessionIdleTimeout',
        'offline_session_max_lifespan_enabled' => 'offlineSessionMaxLifespanEnabled',
        'offline_session_max_lifespan' => 'offlineSessionMaxLifespan',
        'client_session_idle_timeout' => 'clientSessionIdleTimeout',
        'client_session_max_lifespan' => 'clientSessionMaxLifespan',
        'client_offline_session_idle_timeout' => 'clientOfflineSessionIdleTimeout',
        'client_offline_session_max_lifespan' => 'clientOfflineSessionMaxLifespan',
        'access_code_lifespan' => 'accessCodeLifespan',
        'access_code_lifespan_user_action' => 'accessCodeLifespanUserAction',
        'access_code_lifespan_login' => 'accessCodeLifespanLogin',
        'action_token_generated_by_admin_lifespan' => 'actionTokenGeneratedByAdminLifespan',
        'action_token_generated_by_user_lifespan' => 'actionTokenGeneratedByUserLifespan',
        'oauth2_device_code_lifespan' => 'oauth2DeviceCodeLifespan',
        'oauth2_device_polling_interval' => 'oauth2DevicePollingInterval',
        'enabled' => 'enabled',
        'ssl_required' => 'sslRequired',
        'password_credential_grant_allowed' => 'passwordCredentialGrantAllowed',
        'registration_allowed' => 'registrationAllowed',
        'registration_email_as_username' => 'registrationEmailAsUsername',
        'remember_me' => 'rememberMe',
        'verify_email' => 'verifyEmail',
        'login_with_email_allowed' => 'loginWithEmailAllowed',
        'duplicate_emails_allowed' => 'duplicateEmailsAllowed',
        'reset_password_allowed' => 'resetPasswordAllowed',
        'edit_username_allowed' => 'editUsernameAllowed',
        'user_cache_enabled' => 'userCacheEnabled',
        'realm_cache_enabled' => 'realmCacheEnabled',
        'brute_force_protected' => 'bruteForceProtected',
        'permanent_lockout' => 'permanentLockout',
        'max_temporary_lockouts' => 'maxTemporaryLockouts',
        'max_failure_wait_seconds' => 'maxFailureWaitSeconds',
        'minimum_quick_login_wait_seconds' => 'minimumQuickLoginWaitSeconds',
        'wait_increment_seconds' => 'waitIncrementSeconds',
        'quick_login_check_milli_seconds' => 'quickLoginCheckMilliSeconds',
        'max_delta_time_seconds' => 'maxDeltaTimeSeconds',
        'failure_factor' => 'failureFactor',
        'private_key' => 'privateKey',
        'public_key' => 'publicKey',
        'certificate' => 'certificate',
        'code_secret' => 'codeSecret',
        'roles' => 'roles',
        'groups' => 'groups',
        'default_roles' => 'defaultRoles',
        'default_role' => 'defaultRole',
        'default_groups' => 'defaultGroups',
        'required_credentials' => 'requiredCredentials',
        'password_policy' => 'passwordPolicy',
        'otp_policy_type' => 'otpPolicyType',
        'otp_policy_algorithm' => 'otpPolicyAlgorithm',
        'otp_policy_initial_counter' => 'otpPolicyInitialCounter',
        'otp_policy_digits' => 'otpPolicyDigits',
        'otp_policy_look_ahead_window' => 'otpPolicyLookAheadWindow',
        'otp_policy_period' => 'otpPolicyPeriod',
        'otp_policy_code_reusable' => 'otpPolicyCodeReusable',
        'otp_supported_applications' => 'otpSupportedApplications',
        'localization_texts' => 'localizationTexts',
        'web_authn_policy_rp_entity_name' => 'webAuthnPolicyRpEntityName',
        'web_authn_policy_signature_algorithms' => 'webAuthnPolicySignatureAlgorithms',
        'web_authn_policy_rp_id' => 'webAuthnPolicyRpId',
        'web_authn_policy_attestation_conveyance_preference' => 'webAuthnPolicyAttestationConveyancePreference',
        'web_authn_policy_authenticator_attachment' => 'webAuthnPolicyAuthenticatorAttachment',
        'web_authn_policy_require_resident_key' => 'webAuthnPolicyRequireResidentKey',
        'web_authn_policy_user_verification_requirement' => 'webAuthnPolicyUserVerificationRequirement',
        'web_authn_policy_create_timeout' => 'webAuthnPolicyCreateTimeout',
        'web_authn_policy_avoid_same_authenticator_register' => 'webAuthnPolicyAvoidSameAuthenticatorRegister',
        'web_authn_policy_acceptable_aaguids' => 'webAuthnPolicyAcceptableAaguids',
        'web_authn_policy_extra_origins' => 'webAuthnPolicyExtraOrigins',
        'web_authn_policy_passwordless_rp_entity_name' => 'webAuthnPolicyPasswordlessRpEntityName',
        'web_authn_policy_passwordless_signature_algorithms' => 'webAuthnPolicyPasswordlessSignatureAlgorithms',
        'web_authn_policy_passwordless_rp_id' => 'webAuthnPolicyPasswordlessRpId',
        'web_authn_policy_passwordless_attestation_conveyance_preference' => 'webAuthnPolicyPasswordlessAttestationConveyancePreference',
        'web_authn_policy_passwordless_authenticator_attachment' => 'webAuthnPolicyPasswordlessAuthenticatorAttachment',
        'web_authn_policy_passwordless_require_resident_key' => 'webAuthnPolicyPasswordlessRequireResidentKey',
        'web_authn_policy_passwordless_user_verification_requirement' => 'webAuthnPolicyPasswordlessUserVerificationRequirement',
        'web_authn_policy_passwordless_create_timeout' => 'webAuthnPolicyPasswordlessCreateTimeout',
        'web_authn_policy_passwordless_avoid_same_authenticator_register' => 'webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister',
        'web_authn_policy_passwordless_acceptable_aaguids' => 'webAuthnPolicyPasswordlessAcceptableAaguids',
        'web_authn_policy_passwordless_extra_origins' => 'webAuthnPolicyPasswordlessExtraOrigins',
        'client_profiles' => 'clientProfiles',
        'client_policies' => 'clientPolicies',
        'users' => 'users',
        'federated_users' => 'federatedUsers',
        'scope_mappings' => 'scopeMappings',
        'client_scope_mappings' => 'clientScopeMappings',
        'clients' => 'clients',
        'client_scopes' => 'clientScopes',
        'default_default_client_scopes' => 'defaultDefaultClientScopes',
        'default_optional_client_scopes' => 'defaultOptionalClientScopes',
        'browser_security_headers' => 'browserSecurityHeaders',
        'smtp_server' => 'smtpServer',
        'user_federation_providers' => 'userFederationProviders',
        'user_federation_mappers' => 'userFederationMappers',
        'login_theme' => 'loginTheme',
        'account_theme' => 'accountTheme',
        'admin_theme' => 'adminTheme',
        'email_theme' => 'emailTheme',
        'events_enabled' => 'eventsEnabled',
        'events_expiration' => 'eventsExpiration',
        'events_listeners' => 'eventsListeners',
        'enabled_event_types' => 'enabledEventTypes',
        'admin_events_enabled' => 'adminEventsEnabled',
        'admin_events_details_enabled' => 'adminEventsDetailsEnabled',
        'identity_providers' => 'identityProviders',
        'identity_provider_mappers' => 'identityProviderMappers',
        'protocol_mappers' => 'protocolMappers',
        'components' => 'components',
        'internationalization_enabled' => 'internationalizationEnabled',
        'supported_locales' => 'supportedLocales',
        'default_locale' => 'defaultLocale',
        'authentication_flows' => 'authenticationFlows',
        'authenticator_config' => 'authenticatorConfig',
        'required_actions' => 'requiredActions',
        'browser_flow' => 'browserFlow',
        'registration_flow' => 'registrationFlow',
        'direct_grant_flow' => 'directGrantFlow',
        'reset_credentials_flow' => 'resetCredentialsFlow',
        'client_authentication_flow' => 'clientAuthenticationFlow',
        'docker_authentication_flow' => 'dockerAuthenticationFlow',
        'first_broker_login_flow' => 'firstBrokerLoginFlow',
        'attributes' => 'attributes',
        'keycloak_version' => 'keycloakVersion',
        'user_managed_access_allowed' => 'userManagedAccessAllowed',
        'organizations_enabled' => 'organizationsEnabled',
        'organizations' => 'organizations',
        'social' => 'social',
        'update_profile_on_initial_social_login' => 'updateProfileOnInitialSocialLogin',
        'social_providers' => 'socialProviders',
        'application_scope_mappings' => 'applicationScopeMappings',
        'applications' => 'applications',
        'oauth_clients' => 'oauthClients',
        'client_templates' => 'clientTemplates',
        'o_auth2_device_code_lifespan' => 'oAuth2DeviceCodeLifespan',
        'o_auth2_device_polling_interval' => 'oAuth2DevicePollingInterval'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'set_id',
        'realm' => 'set_realm',
        'display_name' => 'set_display_name',
        'display_name_html' => 'set_display_name_html',
        'not_before' => 'set_not_before',
        'default_signature_algorithm' => 'set_default_signature_algorithm',
        'revoke_refresh_token' => 'set_revoke_refresh_token',
        'refresh_token_max_reuse' => 'set_refresh_token_max_reuse',
        'access_token_lifespan' => 'set_access_token_lifespan',
        'access_token_lifespan_for_implicit_flow' => 'set_access_token_lifespan_for_implicit_flow',
        'sso_session_idle_timeout' => 'set_sso_session_idle_timeout',
        'sso_session_max_lifespan' => 'set_sso_session_max_lifespan',
        'sso_session_idle_timeout_remember_me' => 'set_sso_session_idle_timeout_remember_me',
        'sso_session_max_lifespan_remember_me' => 'set_sso_session_max_lifespan_remember_me',
        'offline_session_idle_timeout' => 'set_offline_session_idle_timeout',
        'offline_session_max_lifespan_enabled' => 'set_offline_session_max_lifespan_enabled',
        'offline_session_max_lifespan' => 'set_offline_session_max_lifespan',
        'client_session_idle_timeout' => 'set_client_session_idle_timeout',
        'client_session_max_lifespan' => 'set_client_session_max_lifespan',
        'client_offline_session_idle_timeout' => 'set_client_offline_session_idle_timeout',
        'client_offline_session_max_lifespan' => 'set_client_offline_session_max_lifespan',
        'access_code_lifespan' => 'set_access_code_lifespan',
        'access_code_lifespan_user_action' => 'set_access_code_lifespan_user_action',
        'access_code_lifespan_login' => 'set_access_code_lifespan_login',
        'action_token_generated_by_admin_lifespan' => 'set_action_token_generated_by_admin_lifespan',
        'action_token_generated_by_user_lifespan' => 'set_action_token_generated_by_user_lifespan',
        'oauth2_device_code_lifespan' => 'set_oauth2_device_code_lifespan',
        'oauth2_device_polling_interval' => 'set_oauth2_device_polling_interval',
        'enabled' => 'set_enabled',
        'ssl_required' => 'set_ssl_required',
        'password_credential_grant_allowed' => 'set_password_credential_grant_allowed',
        'registration_allowed' => 'set_registration_allowed',
        'registration_email_as_username' => 'set_registration_email_as_username',
        'remember_me' => 'set_remember_me',
        'verify_email' => 'set_verify_email',
        'login_with_email_allowed' => 'set_login_with_email_allowed',
        'duplicate_emails_allowed' => 'set_duplicate_emails_allowed',
        'reset_password_allowed' => 'set_reset_password_allowed',
        'edit_username_allowed' => 'set_edit_username_allowed',
        'user_cache_enabled' => 'set_user_cache_enabled',
        'realm_cache_enabled' => 'set_realm_cache_enabled',
        'brute_force_protected' => 'set_brute_force_protected',
        'permanent_lockout' => 'set_permanent_lockout',
        'max_temporary_lockouts' => 'set_max_temporary_lockouts',
        'max_failure_wait_seconds' => 'set_max_failure_wait_seconds',
        'minimum_quick_login_wait_seconds' => 'set_minimum_quick_login_wait_seconds',
        'wait_increment_seconds' => 'set_wait_increment_seconds',
        'quick_login_check_milli_seconds' => 'set_quick_login_check_milli_seconds',
        'max_delta_time_seconds' => 'set_max_delta_time_seconds',
        'failure_factor' => 'set_failure_factor',
        'private_key' => 'set_private_key',
        'public_key' => 'set_public_key',
        'certificate' => 'set_certificate',
        'code_secret' => 'set_code_secret',
        'roles' => 'set_roles',
        'groups' => 'set_groups',
        'default_roles' => 'set_default_roles',
        'default_role' => 'set_default_role',
        'default_groups' => 'set_default_groups',
        'required_credentials' => 'set_required_credentials',
        'password_policy' => 'set_password_policy',
        'otp_policy_type' => 'set_otp_policy_type',
        'otp_policy_algorithm' => 'set_otp_policy_algorithm',
        'otp_policy_initial_counter' => 'set_otp_policy_initial_counter',
        'otp_policy_digits' => 'set_otp_policy_digits',
        'otp_policy_look_ahead_window' => 'set_otp_policy_look_ahead_window',
        'otp_policy_period' => 'set_otp_policy_period',
        'otp_policy_code_reusable' => 'set_otp_policy_code_reusable',
        'otp_supported_applications' => 'set_otp_supported_applications',
        'localization_texts' => 'set_localization_texts',
        'web_authn_policy_rp_entity_name' => 'set_web_authn_policy_rp_entity_name',
        'web_authn_policy_signature_algorithms' => 'set_web_authn_policy_signature_algorithms',
        'web_authn_policy_rp_id' => 'set_web_authn_policy_rp_id',
        'web_authn_policy_attestation_conveyance_preference' => 'set_web_authn_policy_attestation_conveyance_preference',
        'web_authn_policy_authenticator_attachment' => 'set_web_authn_policy_authenticator_attachment',
        'web_authn_policy_require_resident_key' => 'set_web_authn_policy_require_resident_key',
        'web_authn_policy_user_verification_requirement' => 'set_web_authn_policy_user_verification_requirement',
        'web_authn_policy_create_timeout' => 'set_web_authn_policy_create_timeout',
        'web_authn_policy_avoid_same_authenticator_register' => 'set_web_authn_policy_avoid_same_authenticator_register',
        'web_authn_policy_acceptable_aaguids' => 'set_web_authn_policy_acceptable_aaguids',
        'web_authn_policy_extra_origins' => 'set_web_authn_policy_extra_origins',
        'web_authn_policy_passwordless_rp_entity_name' => 'set_web_authn_policy_passwordless_rp_entity_name',
        'web_authn_policy_passwordless_signature_algorithms' => 'set_web_authn_policy_passwordless_signature_algorithms',
        'web_authn_policy_passwordless_rp_id' => 'set_web_authn_policy_passwordless_rp_id',
        'web_authn_policy_passwordless_attestation_conveyance_preference' => 'set_web_authn_policy_passwordless_attestation_conveyance_preference',
        'web_authn_policy_passwordless_authenticator_attachment' => 'set_web_authn_policy_passwordless_authenticator_attachment',
        'web_authn_policy_passwordless_require_resident_key' => 'set_web_authn_policy_passwordless_require_resident_key',
        'web_authn_policy_passwordless_user_verification_requirement' => 'set_web_authn_policy_passwordless_user_verification_requirement',
        'web_authn_policy_passwordless_create_timeout' => 'set_web_authn_policy_passwordless_create_timeout',
        'web_authn_policy_passwordless_avoid_same_authenticator_register' => 'set_web_authn_policy_passwordless_avoid_same_authenticator_register',
        'web_authn_policy_passwordless_acceptable_aaguids' => 'set_web_authn_policy_passwordless_acceptable_aaguids',
        'web_authn_policy_passwordless_extra_origins' => 'set_web_authn_policy_passwordless_extra_origins',
        'client_profiles' => 'set_client_profiles',
        'client_policies' => 'set_client_policies',
        'users' => 'set_users',
        'federated_users' => 'set_federated_users',
        'scope_mappings' => 'set_scope_mappings',
        'client_scope_mappings' => 'set_client_scope_mappings',
        'clients' => 'set_clients',
        'client_scopes' => 'set_client_scopes',
        'default_default_client_scopes' => 'set_default_default_client_scopes',
        'default_optional_client_scopes' => 'set_default_optional_client_scopes',
        'browser_security_headers' => 'set_browser_security_headers',
        'smtp_server' => 'set_smtp_server',
        'user_federation_providers' => 'set_user_federation_providers',
        'user_federation_mappers' => 'set_user_federation_mappers',
        'login_theme' => 'set_login_theme',
        'account_theme' => 'set_account_theme',
        'admin_theme' => 'set_admin_theme',
        'email_theme' => 'set_email_theme',
        'events_enabled' => 'set_events_enabled',
        'events_expiration' => 'set_events_expiration',
        'events_listeners' => 'set_events_listeners',
        'enabled_event_types' => 'set_enabled_event_types',
        'admin_events_enabled' => 'set_admin_events_enabled',
        'admin_events_details_enabled' => 'set_admin_events_details_enabled',
        'identity_providers' => 'set_identity_providers',
        'identity_provider_mappers' => 'set_identity_provider_mappers',
        'protocol_mappers' => 'set_protocol_mappers',
        'components' => 'set_components',
        'internationalization_enabled' => 'set_internationalization_enabled',
        'supported_locales' => 'set_supported_locales',
        'default_locale' => 'set_default_locale',
        'authentication_flows' => 'set_authentication_flows',
        'authenticator_config' => 'set_authenticator_config',
        'required_actions' => 'set_required_actions',
        'browser_flow' => 'set_browser_flow',
        'registration_flow' => 'set_registration_flow',
        'direct_grant_flow' => 'set_direct_grant_flow',
        'reset_credentials_flow' => 'set_reset_credentials_flow',
        'client_authentication_flow' => 'set_client_authentication_flow',
        'docker_authentication_flow' => 'set_docker_authentication_flow',
        'first_broker_login_flow' => 'set_first_broker_login_flow',
        'attributes' => 'set_attributes',
        'keycloak_version' => 'set_keycloak_version',
        'user_managed_access_allowed' => 'set_user_managed_access_allowed',
        'organizations_enabled' => 'set_organizations_enabled',
        'organizations' => 'set_organizations',
        'social' => 'set_social',
        'update_profile_on_initial_social_login' => 'set_update_profile_on_initial_social_login',
        'social_providers' => 'set_social_providers',
        'application_scope_mappings' => 'set_application_scope_mappings',
        'applications' => 'set_applications',
        'oauth_clients' => 'set_oauth_clients',
        'client_templates' => 'set_client_templates',
        'o_auth2_device_code_lifespan' => 'set_o_auth2_device_code_lifespan',
        'o_auth2_device_polling_interval' => 'set_o_auth2_device_polling_interval'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'get_id',
        'realm' => 'get_realm',
        'display_name' => 'get_display_name',
        'display_name_html' => 'get_display_name_html',
        'not_before' => 'get_not_before',
        'default_signature_algorithm' => 'get_default_signature_algorithm',
        'revoke_refresh_token' => 'get_revoke_refresh_token',
        'refresh_token_max_reuse' => 'get_refresh_token_max_reuse',
        'access_token_lifespan' => 'get_access_token_lifespan',
        'access_token_lifespan_for_implicit_flow' => 'get_access_token_lifespan_for_implicit_flow',
        'sso_session_idle_timeout' => 'get_sso_session_idle_timeout',
        'sso_session_max_lifespan' => 'get_sso_session_max_lifespan',
        'sso_session_idle_timeout_remember_me' => 'get_sso_session_idle_timeout_remember_me',
        'sso_session_max_lifespan_remember_me' => 'get_sso_session_max_lifespan_remember_me',
        'offline_session_idle_timeout' => 'get_offline_session_idle_timeout',
        'offline_session_max_lifespan_enabled' => 'get_offline_session_max_lifespan_enabled',
        'offline_session_max_lifespan' => 'get_offline_session_max_lifespan',
        'client_session_idle_timeout' => 'get_client_session_idle_timeout',
        'client_session_max_lifespan' => 'get_client_session_max_lifespan',
        'client_offline_session_idle_timeout' => 'get_client_offline_session_idle_timeout',
        'client_offline_session_max_lifespan' => 'get_client_offline_session_max_lifespan',
        'access_code_lifespan' => 'get_access_code_lifespan',
        'access_code_lifespan_user_action' => 'get_access_code_lifespan_user_action',
        'access_code_lifespan_login' => 'get_access_code_lifespan_login',
        'action_token_generated_by_admin_lifespan' => 'get_action_token_generated_by_admin_lifespan',
        'action_token_generated_by_user_lifespan' => 'get_action_token_generated_by_user_lifespan',
        'oauth2_device_code_lifespan' => 'get_oauth2_device_code_lifespan',
        'oauth2_device_polling_interval' => 'get_oauth2_device_polling_interval',
        'enabled' => 'get_enabled',
        'ssl_required' => 'get_ssl_required',
        'password_credential_grant_allowed' => 'get_password_credential_grant_allowed',
        'registration_allowed' => 'get_registration_allowed',
        'registration_email_as_username' => 'get_registration_email_as_username',
        'remember_me' => 'get_remember_me',
        'verify_email' => 'get_verify_email',
        'login_with_email_allowed' => 'get_login_with_email_allowed',
        'duplicate_emails_allowed' => 'get_duplicate_emails_allowed',
        'reset_password_allowed' => 'get_reset_password_allowed',
        'edit_username_allowed' => 'get_edit_username_allowed',
        'user_cache_enabled' => 'get_user_cache_enabled',
        'realm_cache_enabled' => 'get_realm_cache_enabled',
        'brute_force_protected' => 'get_brute_force_protected',
        'permanent_lockout' => 'get_permanent_lockout',
        'max_temporary_lockouts' => 'get_max_temporary_lockouts',
        'max_failure_wait_seconds' => 'get_max_failure_wait_seconds',
        'minimum_quick_login_wait_seconds' => 'get_minimum_quick_login_wait_seconds',
        'wait_increment_seconds' => 'get_wait_increment_seconds',
        'quick_login_check_milli_seconds' => 'get_quick_login_check_milli_seconds',
        'max_delta_time_seconds' => 'get_max_delta_time_seconds',
        'failure_factor' => 'get_failure_factor',
        'private_key' => 'get_private_key',
        'public_key' => 'get_public_key',
        'certificate' => 'get_certificate',
        'code_secret' => 'get_code_secret',
        'roles' => 'get_roles',
        'groups' => 'get_groups',
        'default_roles' => 'get_default_roles',
        'default_role' => 'get_default_role',
        'default_groups' => 'get_default_groups',
        'required_credentials' => 'get_required_credentials',
        'password_policy' => 'get_password_policy',
        'otp_policy_type' => 'get_otp_policy_type',
        'otp_policy_algorithm' => 'get_otp_policy_algorithm',
        'otp_policy_initial_counter' => 'get_otp_policy_initial_counter',
        'otp_policy_digits' => 'get_otp_policy_digits',
        'otp_policy_look_ahead_window' => 'get_otp_policy_look_ahead_window',
        'otp_policy_period' => 'get_otp_policy_period',
        'otp_policy_code_reusable' => 'get_otp_policy_code_reusable',
        'otp_supported_applications' => 'get_otp_supported_applications',
        'localization_texts' => 'get_localization_texts',
        'web_authn_policy_rp_entity_name' => 'get_web_authn_policy_rp_entity_name',
        'web_authn_policy_signature_algorithms' => 'get_web_authn_policy_signature_algorithms',
        'web_authn_policy_rp_id' => 'get_web_authn_policy_rp_id',
        'web_authn_policy_attestation_conveyance_preference' => 'get_web_authn_policy_attestation_conveyance_preference',
        'web_authn_policy_authenticator_attachment' => 'get_web_authn_policy_authenticator_attachment',
        'web_authn_policy_require_resident_key' => 'get_web_authn_policy_require_resident_key',
        'web_authn_policy_user_verification_requirement' => 'get_web_authn_policy_user_verification_requirement',
        'web_authn_policy_create_timeout' => 'get_web_authn_policy_create_timeout',
        'web_authn_policy_avoid_same_authenticator_register' => 'get_web_authn_policy_avoid_same_authenticator_register',
        'web_authn_policy_acceptable_aaguids' => 'get_web_authn_policy_acceptable_aaguids',
        'web_authn_policy_extra_origins' => 'get_web_authn_policy_extra_origins',
        'web_authn_policy_passwordless_rp_entity_name' => 'get_web_authn_policy_passwordless_rp_entity_name',
        'web_authn_policy_passwordless_signature_algorithms' => 'get_web_authn_policy_passwordless_signature_algorithms',
        'web_authn_policy_passwordless_rp_id' => 'get_web_authn_policy_passwordless_rp_id',
        'web_authn_policy_passwordless_attestation_conveyance_preference' => 'get_web_authn_policy_passwordless_attestation_conveyance_preference',
        'web_authn_policy_passwordless_authenticator_attachment' => 'get_web_authn_policy_passwordless_authenticator_attachment',
        'web_authn_policy_passwordless_require_resident_key' => 'get_web_authn_policy_passwordless_require_resident_key',
        'web_authn_policy_passwordless_user_verification_requirement' => 'get_web_authn_policy_passwordless_user_verification_requirement',
        'web_authn_policy_passwordless_create_timeout' => 'get_web_authn_policy_passwordless_create_timeout',
        'web_authn_policy_passwordless_avoid_same_authenticator_register' => 'get_web_authn_policy_passwordless_avoid_same_authenticator_register',
        'web_authn_policy_passwordless_acceptable_aaguids' => 'get_web_authn_policy_passwordless_acceptable_aaguids',
        'web_authn_policy_passwordless_extra_origins' => 'get_web_authn_policy_passwordless_extra_origins',
        'client_profiles' => 'get_client_profiles',
        'client_policies' => 'get_client_policies',
        'users' => 'get_users',
        'federated_users' => 'get_federated_users',
        'scope_mappings' => 'get_scope_mappings',
        'client_scope_mappings' => 'get_client_scope_mappings',
        'clients' => 'get_clients',
        'client_scopes' => 'get_client_scopes',
        'default_default_client_scopes' => 'get_default_default_client_scopes',
        'default_optional_client_scopes' => 'get_default_optional_client_scopes',
        'browser_security_headers' => 'get_browser_security_headers',
        'smtp_server' => 'get_smtp_server',
        'user_federation_providers' => 'get_user_federation_providers',
        'user_federation_mappers' => 'get_user_federation_mappers',
        'login_theme' => 'get_login_theme',
        'account_theme' => 'get_account_theme',
        'admin_theme' => 'get_admin_theme',
        'email_theme' => 'get_email_theme',
        'events_enabled' => 'get_events_enabled',
        'events_expiration' => 'get_events_expiration',
        'events_listeners' => 'get_events_listeners',
        'enabled_event_types' => 'get_enabled_event_types',
        'admin_events_enabled' => 'get_admin_events_enabled',
        'admin_events_details_enabled' => 'get_admin_events_details_enabled',
        'identity_providers' => 'get_identity_providers',
        'identity_provider_mappers' => 'get_identity_provider_mappers',
        'protocol_mappers' => 'get_protocol_mappers',
        'components' => 'get_components',
        'internationalization_enabled' => 'get_internationalization_enabled',
        'supported_locales' => 'get_supported_locales',
        'default_locale' => 'get_default_locale',
        'authentication_flows' => 'get_authentication_flows',
        'authenticator_config' => 'get_authenticator_config',
        'required_actions' => 'get_required_actions',
        'browser_flow' => 'get_browser_flow',
        'registration_flow' => 'get_registration_flow',
        'direct_grant_flow' => 'get_direct_grant_flow',
        'reset_credentials_flow' => 'get_reset_credentials_flow',
        'client_authentication_flow' => 'get_client_authentication_flow',
        'docker_authentication_flow' => 'get_docker_authentication_flow',
        'first_broker_login_flow' => 'get_first_broker_login_flow',
        'attributes' => 'get_attributes',
        'keycloak_version' => 'get_keycloak_version',
        'user_managed_access_allowed' => 'get_user_managed_access_allowed',
        'organizations_enabled' => 'get_organizations_enabled',
        'organizations' => 'get_organizations',
        'social' => 'get_social',
        'update_profile_on_initial_social_login' => 'get_update_profile_on_initial_social_login',
        'social_providers' => 'get_social_providers',
        'application_scope_mappings' => 'get_application_scope_mappings',
        'applications' => 'get_applications',
        'oauth_clients' => 'get_oauth_clients',
        'client_templates' => 'get_client_templates',
        'o_auth2_device_code_lifespan' => 'get_o_auth2_device_code_lifespan',
        'o_auth2_device_polling_interval' => 'get_o_auth2_device_polling_interval'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('realm', $data ?? [], null);
        $this->setIfExists('display_name', $data ?? [], null);
        $this->setIfExists('display_name_html', $data ?? [], null);
        $this->setIfExists('not_before', $data ?? [], null);
        $this->setIfExists('default_signature_algorithm', $data ?? [], null);
        $this->setIfExists('revoke_refresh_token', $data ?? [], null);
        $this->setIfExists('refresh_token_max_reuse', $data ?? [], null);
        $this->setIfExists('access_token_lifespan', $data ?? [], null);
        $this->setIfExists('access_token_lifespan_for_implicit_flow', $data ?? [], null);
        $this->setIfExists('sso_session_idle_timeout', $data ?? [], null);
        $this->setIfExists('sso_session_max_lifespan', $data ?? [], null);
        $this->setIfExists('sso_session_idle_timeout_remember_me', $data ?? [], null);
        $this->setIfExists('sso_session_max_lifespan_remember_me', $data ?? [], null);
        $this->setIfExists('offline_session_idle_timeout', $data ?? [], null);
        $this->setIfExists('offline_session_max_lifespan_enabled', $data ?? [], null);
        $this->setIfExists('offline_session_max_lifespan', $data ?? [], null);
        $this->setIfExists('client_session_idle_timeout', $data ?? [], null);
        $this->setIfExists('client_session_max_lifespan', $data ?? [], null);
        $this->setIfExists('client_offline_session_idle_timeout', $data ?? [], null);
        $this->setIfExists('client_offline_session_max_lifespan', $data ?? [], null);
        $this->setIfExists('access_code_lifespan', $data ?? [], null);
        $this->setIfExists('access_code_lifespan_user_action', $data ?? [], null);
        $this->setIfExists('access_code_lifespan_login', $data ?? [], null);
        $this->setIfExists('action_token_generated_by_admin_lifespan', $data ?? [], null);
        $this->setIfExists('action_token_generated_by_user_lifespan', $data ?? [], null);
        $this->setIfExists('oauth2_device_code_lifespan', $data ?? [], null);
        $this->setIfExists('oauth2_device_polling_interval', $data ?? [], null);
        $this->setIfExists('enabled', $data ?? [], null);
        $this->setIfExists('ssl_required', $data ?? [], null);
        $this->setIfExists('password_credential_grant_allowed', $data ?? [], null);
        $this->setIfExists('registration_allowed', $data ?? [], null);
        $this->setIfExists('registration_email_as_username', $data ?? [], null);
        $this->setIfExists('remember_me', $data ?? [], null);
        $this->setIfExists('verify_email', $data ?? [], null);
        $this->setIfExists('login_with_email_allowed', $data ?? [], null);
        $this->setIfExists('duplicate_emails_allowed', $data ?? [], null);
        $this->setIfExists('reset_password_allowed', $data ?? [], null);
        $this->setIfExists('edit_username_allowed', $data ?? [], null);
        $this->setIfExists('user_cache_enabled', $data ?? [], null);
        $this->setIfExists('realm_cache_enabled', $data ?? [], null);
        $this->setIfExists('brute_force_protected', $data ?? [], null);
        $this->setIfExists('permanent_lockout', $data ?? [], null);
        $this->setIfExists('max_temporary_lockouts', $data ?? [], null);
        $this->setIfExists('max_failure_wait_seconds', $data ?? [], null);
        $this->setIfExists('minimum_quick_login_wait_seconds', $data ?? [], null);
        $this->setIfExists('wait_increment_seconds', $data ?? [], null);
        $this->setIfExists('quick_login_check_milli_seconds', $data ?? [], null);
        $this->setIfExists('max_delta_time_seconds', $data ?? [], null);
        $this->setIfExists('failure_factor', $data ?? [], null);
        $this->setIfExists('private_key', $data ?? [], null);
        $this->setIfExists('public_key', $data ?? [], null);
        $this->setIfExists('certificate', $data ?? [], null);
        $this->setIfExists('code_secret', $data ?? [], null);
        $this->setIfExists('roles', $data ?? [], null);
        $this->setIfExists('groups', $data ?? [], null);
        $this->setIfExists('default_roles', $data ?? [], null);
        $this->setIfExists('default_role', $data ?? [], null);
        $this->setIfExists('default_groups', $data ?? [], null);
        $this->setIfExists('required_credentials', $data ?? [], null);
        $this->setIfExists('password_policy', $data ?? [], null);
        $this->setIfExists('otp_policy_type', $data ?? [], null);
        $this->setIfExists('otp_policy_algorithm', $data ?? [], null);
        $this->setIfExists('otp_policy_initial_counter', $data ?? [], null);
        $this->setIfExists('otp_policy_digits', $data ?? [], null);
        $this->setIfExists('otp_policy_look_ahead_window', $data ?? [], null);
        $this->setIfExists('otp_policy_period', $data ?? [], null);
        $this->setIfExists('otp_policy_code_reusable', $data ?? [], null);
        $this->setIfExists('otp_supported_applications', $data ?? [], null);
        $this->setIfExists('localization_texts', $data ?? [], null);
        $this->setIfExists('web_authn_policy_rp_entity_name', $data ?? [], null);
        $this->setIfExists('web_authn_policy_signature_algorithms', $data ?? [], null);
        $this->setIfExists('web_authn_policy_rp_id', $data ?? [], null);
        $this->setIfExists('web_authn_policy_attestation_conveyance_preference', $data ?? [], null);
        $this->setIfExists('web_authn_policy_authenticator_attachment', $data ?? [], null);
        $this->setIfExists('web_authn_policy_require_resident_key', $data ?? [], null);
        $this->setIfExists('web_authn_policy_user_verification_requirement', $data ?? [], null);
        $this->setIfExists('web_authn_policy_create_timeout', $data ?? [], null);
        $this->setIfExists('web_authn_policy_avoid_same_authenticator_register', $data ?? [], null);
        $this->setIfExists('web_authn_policy_acceptable_aaguids', $data ?? [], null);
        $this->setIfExists('web_authn_policy_extra_origins', $data ?? [], null);
        $this->setIfExists('web_authn_policy_passwordless_rp_entity_name', $data ?? [], null);
        $this->setIfExists('web_authn_policy_passwordless_signature_algorithms', $data ?? [], null);
        $this->setIfExists('web_authn_policy_passwordless_rp_id', $data ?? [], null);
        $this->setIfExists('web_authn_policy_passwordless_attestation_conveyance_preference', $data ?? [], null);
        $this->setIfExists('web_authn_policy_passwordless_authenticator_attachment', $data ?? [], null);
        $this->setIfExists('web_authn_policy_passwordless_require_resident_key', $data ?? [], null);
        $this->setIfExists('web_authn_policy_passwordless_user_verification_requirement', $data ?? [], null);
        $this->setIfExists('web_authn_policy_passwordless_create_timeout', $data ?? [], null);
        $this->setIfExists('web_authn_policy_passwordless_avoid_same_authenticator_register', $data ?? [], null);
        $this->setIfExists('web_authn_policy_passwordless_acceptable_aaguids', $data ?? [], null);
        $this->setIfExists('web_authn_policy_passwordless_extra_origins', $data ?? [], null);
        $this->setIfExists('client_profiles', $data ?? [], null);
        $this->setIfExists('client_policies', $data ?? [], null);
        $this->setIfExists('users', $data ?? [], null);
        $this->setIfExists('federated_users', $data ?? [], null);
        $this->setIfExists('scope_mappings', $data ?? [], null);
        $this->setIfExists('client_scope_mappings', $data ?? [], null);
        $this->setIfExists('clients', $data ?? [], null);
        $this->setIfExists('client_scopes', $data ?? [], null);
        $this->setIfExists('default_default_client_scopes', $data ?? [], null);
        $this->setIfExists('default_optional_client_scopes', $data ?? [], null);
        $this->setIfExists('browser_security_headers', $data ?? [], null);
        $this->setIfExists('smtp_server', $data ?? [], null);
        $this->setIfExists('user_federation_providers', $data ?? [], null);
        $this->setIfExists('user_federation_mappers', $data ?? [], null);
        $this->setIfExists('login_theme', $data ?? [], null);
        $this->setIfExists('account_theme', $data ?? [], null);
        $this->setIfExists('admin_theme', $data ?? [], null);
        $this->setIfExists('email_theme', $data ?? [], null);
        $this->setIfExists('events_enabled', $data ?? [], null);
        $this->setIfExists('events_expiration', $data ?? [], null);
        $this->setIfExists('events_listeners', $data ?? [], null);
        $this->setIfExists('enabled_event_types', $data ?? [], null);
        $this->setIfExists('admin_events_enabled', $data ?? [], null);
        $this->setIfExists('admin_events_details_enabled', $data ?? [], null);
        $this->setIfExists('identity_providers', $data ?? [], null);
        $this->setIfExists('identity_provider_mappers', $data ?? [], null);
        $this->setIfExists('protocol_mappers', $data ?? [], null);
        $this->setIfExists('components', $data ?? [], null);
        $this->setIfExists('internationalization_enabled', $data ?? [], null);
        $this->setIfExists('supported_locales', $data ?? [], null);
        $this->setIfExists('default_locale', $data ?? [], null);
        $this->setIfExists('authentication_flows', $data ?? [], null);
        $this->setIfExists('authenticator_config', $data ?? [], null);
        $this->setIfExists('required_actions', $data ?? [], null);
        $this->setIfExists('browser_flow', $data ?? [], null);
        $this->setIfExists('registration_flow', $data ?? [], null);
        $this->setIfExists('direct_grant_flow', $data ?? [], null);
        $this->setIfExists('reset_credentials_flow', $data ?? [], null);
        $this->setIfExists('client_authentication_flow', $data ?? [], null);
        $this->setIfExists('docker_authentication_flow', $data ?? [], null);
        $this->setIfExists('first_broker_login_flow', $data ?? [], null);
        $this->setIfExists('attributes', $data ?? [], null);
        $this->setIfExists('keycloak_version', $data ?? [], null);
        $this->setIfExists('user_managed_access_allowed', $data ?? [], null);
        $this->setIfExists('organizations_enabled', $data ?? [], null);
        $this->setIfExists('organizations', $data ?? [], null);
        $this->setIfExists('social', $data ?? [], null);
        $this->setIfExists('update_profile_on_initial_social_login', $data ?? [], null);
        $this->setIfExists('social_providers', $data ?? [], null);
        $this->setIfExists('application_scope_mappings', $data ?? [], null);
        $this->setIfExists('applications', $data ?? [], null);
        $this->setIfExists('oauth_clients', $data ?? [], null);
        $this->setIfExists('client_templates', $data ?? [], null);
        $this->setIfExists('o_auth2_device_code_lifespan', $data ?? [], null);
        $this->setIfExists('o_auth2_device_polling_interval', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function get_id()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function set_id($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets realm
     *
     * @return string|null
     */
    public function get_realm()
    {
        return $this->container['realm'];
    }

    /**
     * Sets realm
     *
     * @param string|null $realm realm
     *
     * @return self
     */
    public function set_realm($realm)
    {
        if (is_null($realm)) {
            throw new \InvalidArgumentException('non-nullable realm cannot be null');
        }
        $this->container['realm'] = $realm;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string|null
     */
    public function get_display_name()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string|null $display_name display_name
     *
     * @return self
     */
    public function set_display_name($display_name)
    {
        if (is_null($display_name)) {
            throw new \InvalidArgumentException('non-nullable display_name cannot be null');
        }
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets display_name_html
     *
     * @return string|null
     */
    public function get_display_name_html()
    {
        return $this->container['display_name_html'];
    }

    /**
     * Sets display_name_html
     *
     * @param string|null $display_name_html display_name_html
     *
     * @return self
     */
    public function set_display_name_html($display_name_html)
    {
        if (is_null($display_name_html)) {
            throw new \InvalidArgumentException('non-nullable display_name_html cannot be null');
        }
        $this->container['display_name_html'] = $display_name_html;

        return $this;
    }

    /**
     * Gets not_before
     *
     * @return int|null
     */
    public function get_not_before()
    {
        return $this->container['not_before'];
    }

    /**
     * Sets not_before
     *
     * @param int|null $not_before not_before
     *
     * @return self
     */
    public function set_not_before($not_before)
    {
        if (is_null($not_before)) {
            throw new \InvalidArgumentException('non-nullable not_before cannot be null');
        }
        $this->container['not_before'] = $not_before;

        return $this;
    }

    /**
     * Gets default_signature_algorithm
     *
     * @return string|null
     */
    public function get_default_signature_algorithm()
    {
        return $this->container['default_signature_algorithm'];
    }

    /**
     * Sets default_signature_algorithm
     *
     * @param string|null $default_signature_algorithm default_signature_algorithm
     *
     * @return self
     */
    public function set_default_signature_algorithm($default_signature_algorithm)
    {
        if (is_null($default_signature_algorithm)) {
            throw new \InvalidArgumentException('non-nullable default_signature_algorithm cannot be null');
        }
        $this->container['default_signature_algorithm'] = $default_signature_algorithm;

        return $this;
    }

    /**
     * Gets revoke_refresh_token
     *
     * @return bool|null
     */
    public function get_revoke_refresh_token()
    {
        return $this->container['revoke_refresh_token'];
    }

    /**
     * Sets revoke_refresh_token
     *
     * @param bool|null $revoke_refresh_token revoke_refresh_token
     *
     * @return self
     */
    public function set_revoke_refresh_token($revoke_refresh_token)
    {
        if (is_null($revoke_refresh_token)) {
            throw new \InvalidArgumentException('non-nullable revoke_refresh_token cannot be null');
        }
        $this->container['revoke_refresh_token'] = $revoke_refresh_token;

        return $this;
    }

    /**
     * Gets refresh_token_max_reuse
     *
     * @return int|null
     */
    public function get_refresh_token_max_reuse()
    {
        return $this->container['refresh_token_max_reuse'];
    }

    /**
     * Sets refresh_token_max_reuse
     *
     * @param int|null $refresh_token_max_reuse refresh_token_max_reuse
     *
     * @return self
     */
    public function set_refresh_token_max_reuse($refresh_token_max_reuse)
    {
        if (is_null($refresh_token_max_reuse)) {
            throw new \InvalidArgumentException('non-nullable refresh_token_max_reuse cannot be null');
        }
        $this->container['refresh_token_max_reuse'] = $refresh_token_max_reuse;

        return $this;
    }

    /**
     * Gets access_token_lifespan
     *
     * @return int|null
     */
    public function get_access_token_lifespan()
    {
        return $this->container['access_token_lifespan'];
    }

    /**
     * Sets access_token_lifespan
     *
     * @param int|null $access_token_lifespan access_token_lifespan
     *
     * @return self
     */
    public function set_access_token_lifespan($access_token_lifespan)
    {
        if (is_null($access_token_lifespan)) {
            throw new \InvalidArgumentException('non-nullable access_token_lifespan cannot be null');
        }
        $this->container['access_token_lifespan'] = $access_token_lifespan;

        return $this;
    }

    /**
     * Gets access_token_lifespan_for_implicit_flow
     *
     * @return int|null
     */
    public function get_access_token_lifespan_for_implicit_flow()
    {
        return $this->container['access_token_lifespan_for_implicit_flow'];
    }

    /**
     * Sets access_token_lifespan_for_implicit_flow
     *
     * @param int|null $access_token_lifespan_for_implicit_flow access_token_lifespan_for_implicit_flow
     *
     * @return self
     */
    public function set_access_token_lifespan_for_implicit_flow($access_token_lifespan_for_implicit_flow)
    {
        if (is_null($access_token_lifespan_for_implicit_flow)) {
            throw new \InvalidArgumentException('non-nullable access_token_lifespan_for_implicit_flow cannot be null');
        }
        $this->container['access_token_lifespan_for_implicit_flow'] = $access_token_lifespan_for_implicit_flow;

        return $this;
    }

    /**
     * Gets sso_session_idle_timeout
     *
     * @return int|null
     */
    public function get_sso_session_idle_timeout()
    {
        return $this->container['sso_session_idle_timeout'];
    }

    /**
     * Sets sso_session_idle_timeout
     *
     * @param int|null $sso_session_idle_timeout sso_session_idle_timeout
     *
     * @return self
     */
    public function set_sso_session_idle_timeout($sso_session_idle_timeout)
    {
        if (is_null($sso_session_idle_timeout)) {
            throw new \InvalidArgumentException('non-nullable sso_session_idle_timeout cannot be null');
        }
        $this->container['sso_session_idle_timeout'] = $sso_session_idle_timeout;

        return $this;
    }

    /**
     * Gets sso_session_max_lifespan
     *
     * @return int|null
     */
    public function get_sso_session_max_lifespan()
    {
        return $this->container['sso_session_max_lifespan'];
    }

    /**
     * Sets sso_session_max_lifespan
     *
     * @param int|null $sso_session_max_lifespan sso_session_max_lifespan
     *
     * @return self
     */
    public function set_sso_session_max_lifespan($sso_session_max_lifespan)
    {
        if (is_null($sso_session_max_lifespan)) {
            throw new \InvalidArgumentException('non-nullable sso_session_max_lifespan cannot be null');
        }
        $this->container['sso_session_max_lifespan'] = $sso_session_max_lifespan;

        return $this;
    }

    /**
     * Gets sso_session_idle_timeout_remember_me
     *
     * @return int|null
     */
    public function get_sso_session_idle_timeout_remember_me()
    {
        return $this->container['sso_session_idle_timeout_remember_me'];
    }

    /**
     * Sets sso_session_idle_timeout_remember_me
     *
     * @param int|null $sso_session_idle_timeout_remember_me sso_session_idle_timeout_remember_me
     *
     * @return self
     */
    public function set_sso_session_idle_timeout_remember_me($sso_session_idle_timeout_remember_me)
    {
        if (is_null($sso_session_idle_timeout_remember_me)) {
            throw new \InvalidArgumentException('non-nullable sso_session_idle_timeout_remember_me cannot be null');
        }
        $this->container['sso_session_idle_timeout_remember_me'] = $sso_session_idle_timeout_remember_me;

        return $this;
    }

    /**
     * Gets sso_session_max_lifespan_remember_me
     *
     * @return int|null
     */
    public function get_sso_session_max_lifespan_remember_me()
    {
        return $this->container['sso_session_max_lifespan_remember_me'];
    }

    /**
     * Sets sso_session_max_lifespan_remember_me
     *
     * @param int|null $sso_session_max_lifespan_remember_me sso_session_max_lifespan_remember_me
     *
     * @return self
     */
    public function set_sso_session_max_lifespan_remember_me($sso_session_max_lifespan_remember_me)
    {
        if (is_null($sso_session_max_lifespan_remember_me)) {
            throw new \InvalidArgumentException('non-nullable sso_session_max_lifespan_remember_me cannot be null');
        }
        $this->container['sso_session_max_lifespan_remember_me'] = $sso_session_max_lifespan_remember_me;

        return $this;
    }

    /**
     * Gets offline_session_idle_timeout
     *
     * @return int|null
     */
    public function get_offline_session_idle_timeout()
    {
        return $this->container['offline_session_idle_timeout'];
    }

    /**
     * Sets offline_session_idle_timeout
     *
     * @param int|null $offline_session_idle_timeout offline_session_idle_timeout
     *
     * @return self
     */
    public function set_offline_session_idle_timeout($offline_session_idle_timeout)
    {
        if (is_null($offline_session_idle_timeout)) {
            throw new \InvalidArgumentException('non-nullable offline_session_idle_timeout cannot be null');
        }
        $this->container['offline_session_idle_timeout'] = $offline_session_idle_timeout;

        return $this;
    }

    /**
     * Gets offline_session_max_lifespan_enabled
     *
     * @return bool|null
     */
    public function get_offline_session_max_lifespan_enabled()
    {
        return $this->container['offline_session_max_lifespan_enabled'];
    }

    /**
     * Sets offline_session_max_lifespan_enabled
     *
     * @param bool|null $offline_session_max_lifespan_enabled offline_session_max_lifespan_enabled
     *
     * @return self
     */
    public function set_offline_session_max_lifespan_enabled($offline_session_max_lifespan_enabled)
    {
        if (is_null($offline_session_max_lifespan_enabled)) {
            throw new \InvalidArgumentException('non-nullable offline_session_max_lifespan_enabled cannot be null');
        }
        $this->container['offline_session_max_lifespan_enabled'] = $offline_session_max_lifespan_enabled;

        return $this;
    }

    /**
     * Gets offline_session_max_lifespan
     *
     * @return int|null
     */
    public function get_offline_session_max_lifespan()
    {
        return $this->container['offline_session_max_lifespan'];
    }

    /**
     * Sets offline_session_max_lifespan
     *
     * @param int|null $offline_session_max_lifespan offline_session_max_lifespan
     *
     * @return self
     */
    public function set_offline_session_max_lifespan($offline_session_max_lifespan)
    {
        if (is_null($offline_session_max_lifespan)) {
            throw new \InvalidArgumentException('non-nullable offline_session_max_lifespan cannot be null');
        }
        $this->container['offline_session_max_lifespan'] = $offline_session_max_lifespan;

        return $this;
    }

    /**
     * Gets client_session_idle_timeout
     *
     * @return int|null
     */
    public function get_client_session_idle_timeout()
    {
        return $this->container['client_session_idle_timeout'];
    }

    /**
     * Sets client_session_idle_timeout
     *
     * @param int|null $client_session_idle_timeout client_session_idle_timeout
     *
     * @return self
     */
    public function set_client_session_idle_timeout($client_session_idle_timeout)
    {
        if (is_null($client_session_idle_timeout)) {
            throw new \InvalidArgumentException('non-nullable client_session_idle_timeout cannot be null');
        }
        $this->container['client_session_idle_timeout'] = $client_session_idle_timeout;

        return $this;
    }

    /**
     * Gets client_session_max_lifespan
     *
     * @return int|null
     */
    public function get_client_session_max_lifespan()
    {
        return $this->container['client_session_max_lifespan'];
    }

    /**
     * Sets client_session_max_lifespan
     *
     * @param int|null $client_session_max_lifespan client_session_max_lifespan
     *
     * @return self
     */
    public function set_client_session_max_lifespan($client_session_max_lifespan)
    {
        if (is_null($client_session_max_lifespan)) {
            throw new \InvalidArgumentException('non-nullable client_session_max_lifespan cannot be null');
        }
        $this->container['client_session_max_lifespan'] = $client_session_max_lifespan;

        return $this;
    }

    /**
     * Gets client_offline_session_idle_timeout
     *
     * @return int|null
     */
    public function get_client_offline_session_idle_timeout()
    {
        return $this->container['client_offline_session_idle_timeout'];
    }

    /**
     * Sets client_offline_session_idle_timeout
     *
     * @param int|null $client_offline_session_idle_timeout client_offline_session_idle_timeout
     *
     * @return self
     */
    public function set_client_offline_session_idle_timeout($client_offline_session_idle_timeout)
    {
        if (is_null($client_offline_session_idle_timeout)) {
            throw new \InvalidArgumentException('non-nullable client_offline_session_idle_timeout cannot be null');
        }
        $this->container['client_offline_session_idle_timeout'] = $client_offline_session_idle_timeout;

        return $this;
    }

    /**
     * Gets client_offline_session_max_lifespan
     *
     * @return int|null
     */
    public function get_client_offline_session_max_lifespan()
    {
        return $this->container['client_offline_session_max_lifespan'];
    }

    /**
     * Sets client_offline_session_max_lifespan
     *
     * @param int|null $client_offline_session_max_lifespan client_offline_session_max_lifespan
     *
     * @return self
     */
    public function set_client_offline_session_max_lifespan($client_offline_session_max_lifespan)
    {
        if (is_null($client_offline_session_max_lifespan)) {
            throw new \InvalidArgumentException('non-nullable client_offline_session_max_lifespan cannot be null');
        }
        $this->container['client_offline_session_max_lifespan'] = $client_offline_session_max_lifespan;

        return $this;
    }

    /**
     * Gets access_code_lifespan
     *
     * @return int|null
     */
    public function get_access_code_lifespan()
    {
        return $this->container['access_code_lifespan'];
    }

    /**
     * Sets access_code_lifespan
     *
     * @param int|null $access_code_lifespan access_code_lifespan
     *
     * @return self
     */
    public function set_access_code_lifespan($access_code_lifespan)
    {
        if (is_null($access_code_lifespan)) {
            throw new \InvalidArgumentException('non-nullable access_code_lifespan cannot be null');
        }
        $this->container['access_code_lifespan'] = $access_code_lifespan;

        return $this;
    }

    /**
     * Gets access_code_lifespan_user_action
     *
     * @return int|null
     */
    public function get_access_code_lifespan_user_action()
    {
        return $this->container['access_code_lifespan_user_action'];
    }

    /**
     * Sets access_code_lifespan_user_action
     *
     * @param int|null $access_code_lifespan_user_action access_code_lifespan_user_action
     *
     * @return self
     */
    public function set_access_code_lifespan_user_action($access_code_lifespan_user_action)
    {
        if (is_null($access_code_lifespan_user_action)) {
            throw new \InvalidArgumentException('non-nullable access_code_lifespan_user_action cannot be null');
        }
        $this->container['access_code_lifespan_user_action'] = $access_code_lifespan_user_action;

        return $this;
    }

    /**
     * Gets access_code_lifespan_login
     *
     * @return int|null
     */
    public function get_access_code_lifespan_login()
    {
        return $this->container['access_code_lifespan_login'];
    }

    /**
     * Sets access_code_lifespan_login
     *
     * @param int|null $access_code_lifespan_login access_code_lifespan_login
     *
     * @return self
     */
    public function set_access_code_lifespan_login($access_code_lifespan_login)
    {
        if (is_null($access_code_lifespan_login)) {
            throw new \InvalidArgumentException('non-nullable access_code_lifespan_login cannot be null');
        }
        $this->container['access_code_lifespan_login'] = $access_code_lifespan_login;

        return $this;
    }

    /**
     * Gets action_token_generated_by_admin_lifespan
     *
     * @return int|null
     */
    public function get_action_token_generated_by_admin_lifespan()
    {
        return $this->container['action_token_generated_by_admin_lifespan'];
    }

    /**
     * Sets action_token_generated_by_admin_lifespan
     *
     * @param int|null $action_token_generated_by_admin_lifespan action_token_generated_by_admin_lifespan
     *
     * @return self
     */
    public function set_action_token_generated_by_admin_lifespan($action_token_generated_by_admin_lifespan)
    {
        if (is_null($action_token_generated_by_admin_lifespan)) {
            throw new \InvalidArgumentException('non-nullable action_token_generated_by_admin_lifespan cannot be null');
        }
        $this->container['action_token_generated_by_admin_lifespan'] = $action_token_generated_by_admin_lifespan;

        return $this;
    }

    /**
     * Gets action_token_generated_by_user_lifespan
     *
     * @return int|null
     */
    public function get_action_token_generated_by_user_lifespan()
    {
        return $this->container['action_token_generated_by_user_lifespan'];
    }

    /**
     * Sets action_token_generated_by_user_lifespan
     *
     * @param int|null $action_token_generated_by_user_lifespan action_token_generated_by_user_lifespan
     *
     * @return self
     */
    public function set_action_token_generated_by_user_lifespan($action_token_generated_by_user_lifespan)
    {
        if (is_null($action_token_generated_by_user_lifespan)) {
            throw new \InvalidArgumentException('non-nullable action_token_generated_by_user_lifespan cannot be null');
        }
        $this->container['action_token_generated_by_user_lifespan'] = $action_token_generated_by_user_lifespan;

        return $this;
    }

    /**
     * Gets oauth2_device_code_lifespan
     *
     * @return int|null
     */
    public function get_oauth2_device_code_lifespan()
    {
        return $this->container['oauth2_device_code_lifespan'];
    }

    /**
     * Sets oauth2_device_code_lifespan
     *
     * @param int|null $oauth2_device_code_lifespan oauth2_device_code_lifespan
     *
     * @return self
     */
    public function set_oauth2_device_code_lifespan($oauth2_device_code_lifespan)
    {
        if (is_null($oauth2_device_code_lifespan)) {
            throw new \InvalidArgumentException('non-nullable oauth2_device_code_lifespan cannot be null');
        }
        $this->container['oauth2_device_code_lifespan'] = $oauth2_device_code_lifespan;

        return $this;
    }

    /**
     * Gets oauth2_device_polling_interval
     *
     * @return int|null
     */
    public function get_oauth2_device_polling_interval()
    {
        return $this->container['oauth2_device_polling_interval'];
    }

    /**
     * Sets oauth2_device_polling_interval
     *
     * @param int|null $oauth2_device_polling_interval oauth2_device_polling_interval
     *
     * @return self
     */
    public function set_oauth2_device_polling_interval($oauth2_device_polling_interval)
    {
        if (is_null($oauth2_device_polling_interval)) {
            throw new \InvalidArgumentException('non-nullable oauth2_device_polling_interval cannot be null');
        }
        $this->container['oauth2_device_polling_interval'] = $oauth2_device_polling_interval;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function get_enabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled enabled
     *
     * @return self
     */
    public function set_enabled($enabled)
    {
        if (is_null($enabled)) {
            throw new \InvalidArgumentException('non-nullable enabled cannot be null');
        }
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets ssl_required
     *
     * @return string|null
     */
    public function get_ssl_required()
    {
        return $this->container['ssl_required'];
    }

    /**
     * Sets ssl_required
     *
     * @param string|null $ssl_required ssl_required
     *
     * @return self
     */
    public function set_ssl_required($ssl_required)
    {
        if (is_null($ssl_required)) {
            throw new \InvalidArgumentException('non-nullable ssl_required cannot be null');
        }
        $this->container['ssl_required'] = $ssl_required;

        return $this;
    }

    /**
     * Gets password_credential_grant_allowed
     *
     * @return bool|null
     * @deprecated
     */
    public function get_password_credential_grant_allowed()
    {
        return $this->container['password_credential_grant_allowed'];
    }

    /**
     * Sets password_credential_grant_allowed
     *
     * @param bool|null $password_credential_grant_allowed password_credential_grant_allowed
     *
     * @return self
     * @deprecated
     */
    public function set_password_credential_grant_allowed($password_credential_grant_allowed)
    {
        if (is_null($password_credential_grant_allowed)) {
            throw new \InvalidArgumentException('non-nullable password_credential_grant_allowed cannot be null');
        }
        $this->container['password_credential_grant_allowed'] = $password_credential_grant_allowed;

        return $this;
    }

    /**
     * Gets registration_allowed
     *
     * @return bool|null
     */
    public function get_registration_allowed()
    {
        return $this->container['registration_allowed'];
    }

    /**
     * Sets registration_allowed
     *
     * @param bool|null $registration_allowed registration_allowed
     *
     * @return self
     */
    public function set_registration_allowed($registration_allowed)
    {
        if (is_null($registration_allowed)) {
            throw new \InvalidArgumentException('non-nullable registration_allowed cannot be null');
        }
        $this->container['registration_allowed'] = $registration_allowed;

        return $this;
    }

    /**
     * Gets registration_email_as_username
     *
     * @return bool|null
     */
    public function get_registration_email_as_username()
    {
        return $this->container['registration_email_as_username'];
    }

    /**
     * Sets registration_email_as_username
     *
     * @param bool|null $registration_email_as_username registration_email_as_username
     *
     * @return self
     */
    public function set_registration_email_as_username($registration_email_as_username)
    {
        if (is_null($registration_email_as_username)) {
            throw new \InvalidArgumentException('non-nullable registration_email_as_username cannot be null');
        }
        $this->container['registration_email_as_username'] = $registration_email_as_username;

        return $this;
    }

    /**
     * Gets remember_me
     *
     * @return bool|null
     */
    public function get_remember_me()
    {
        return $this->container['remember_me'];
    }

    /**
     * Sets remember_me
     *
     * @param bool|null $remember_me remember_me
     *
     * @return self
     */
    public function set_remember_me($remember_me)
    {
        if (is_null($remember_me)) {
            throw new \InvalidArgumentException('non-nullable remember_me cannot be null');
        }
        $this->container['remember_me'] = $remember_me;

        return $this;
    }

    /**
     * Gets verify_email
     *
     * @return bool|null
     */
    public function get_verify_email()
    {
        return $this->container['verify_email'];
    }

    /**
     * Sets verify_email
     *
     * @param bool|null $verify_email verify_email
     *
     * @return self
     */
    public function set_verify_email($verify_email)
    {
        if (is_null($verify_email)) {
            throw new \InvalidArgumentException('non-nullable verify_email cannot be null');
        }
        $this->container['verify_email'] = $verify_email;

        return $this;
    }

    /**
     * Gets login_with_email_allowed
     *
     * @return bool|null
     */
    public function get_login_with_email_allowed()
    {
        return $this->container['login_with_email_allowed'];
    }

    /**
     * Sets login_with_email_allowed
     *
     * @param bool|null $login_with_email_allowed login_with_email_allowed
     *
     * @return self
     */
    public function set_login_with_email_allowed($login_with_email_allowed)
    {
        if (is_null($login_with_email_allowed)) {
            throw new \InvalidArgumentException('non-nullable login_with_email_allowed cannot be null');
        }
        $this->container['login_with_email_allowed'] = $login_with_email_allowed;

        return $this;
    }

    /**
     * Gets duplicate_emails_allowed
     *
     * @return bool|null
     */
    public function get_duplicate_emails_allowed()
    {
        return $this->container['duplicate_emails_allowed'];
    }

    /**
     * Sets duplicate_emails_allowed
     *
     * @param bool|null $duplicate_emails_allowed duplicate_emails_allowed
     *
     * @return self
     */
    public function set_duplicate_emails_allowed($duplicate_emails_allowed)
    {
        if (is_null($duplicate_emails_allowed)) {
            throw new \InvalidArgumentException('non-nullable duplicate_emails_allowed cannot be null');
        }
        $this->container['duplicate_emails_allowed'] = $duplicate_emails_allowed;

        return $this;
    }

    /**
     * Gets reset_password_allowed
     *
     * @return bool|null
     */
    public function get_reset_password_allowed()
    {
        return $this->container['reset_password_allowed'];
    }

    /**
     * Sets reset_password_allowed
     *
     * @param bool|null $reset_password_allowed reset_password_allowed
     *
     * @return self
     */
    public function set_reset_password_allowed($reset_password_allowed)
    {
        if (is_null($reset_password_allowed)) {
            throw new \InvalidArgumentException('non-nullable reset_password_allowed cannot be null');
        }
        $this->container['reset_password_allowed'] = $reset_password_allowed;

        return $this;
    }

    /**
     * Gets edit_username_allowed
     *
     * @return bool|null
     */
    public function get_edit_username_allowed()
    {
        return $this->container['edit_username_allowed'];
    }

    /**
     * Sets edit_username_allowed
     *
     * @param bool|null $edit_username_allowed edit_username_allowed
     *
     * @return self
     */
    public function set_edit_username_allowed($edit_username_allowed)
    {
        if (is_null($edit_username_allowed)) {
            throw new \InvalidArgumentException('non-nullable edit_username_allowed cannot be null');
        }
        $this->container['edit_username_allowed'] = $edit_username_allowed;

        return $this;
    }

    /**
     * Gets user_cache_enabled
     *
     * @return bool|null
     * @deprecated
     */
    public function get_user_cache_enabled()
    {
        return $this->container['user_cache_enabled'];
    }

    /**
     * Sets user_cache_enabled
     *
     * @param bool|null $user_cache_enabled user_cache_enabled
     *
     * @return self
     * @deprecated
     */
    public function set_user_cache_enabled($user_cache_enabled)
    {
        if (is_null($user_cache_enabled)) {
            throw new \InvalidArgumentException('non-nullable user_cache_enabled cannot be null');
        }
        $this->container['user_cache_enabled'] = $user_cache_enabled;

        return $this;
    }

    /**
     * Gets realm_cache_enabled
     *
     * @return bool|null
     * @deprecated
     */
    public function get_realm_cache_enabled()
    {
        return $this->container['realm_cache_enabled'];
    }

    /**
     * Sets realm_cache_enabled
     *
     * @param bool|null $realm_cache_enabled realm_cache_enabled
     *
     * @return self
     * @deprecated
     */
    public function set_realm_cache_enabled($realm_cache_enabled)
    {
        if (is_null($realm_cache_enabled)) {
            throw new \InvalidArgumentException('non-nullable realm_cache_enabled cannot be null');
        }
        $this->container['realm_cache_enabled'] = $realm_cache_enabled;

        return $this;
    }

    /**
     * Gets brute_force_protected
     *
     * @return bool|null
     */
    public function get_brute_force_protected()
    {
        return $this->container['brute_force_protected'];
    }

    /**
     * Sets brute_force_protected
     *
     * @param bool|null $brute_force_protected brute_force_protected
     *
     * @return self
     */
    public function set_brute_force_protected($brute_force_protected)
    {
        if (is_null($brute_force_protected)) {
            throw new \InvalidArgumentException('non-nullable brute_force_protected cannot be null');
        }
        $this->container['brute_force_protected'] = $brute_force_protected;

        return $this;
    }

    /**
     * Gets permanent_lockout
     *
     * @return bool|null
     */
    public function get_permanent_lockout()
    {
        return $this->container['permanent_lockout'];
    }

    /**
     * Sets permanent_lockout
     *
     * @param bool|null $permanent_lockout permanent_lockout
     *
     * @return self
     */
    public function set_permanent_lockout($permanent_lockout)
    {
        if (is_null($permanent_lockout)) {
            throw new \InvalidArgumentException('non-nullable permanent_lockout cannot be null');
        }
        $this->container['permanent_lockout'] = $permanent_lockout;

        return $this;
    }

    /**
     * Gets max_temporary_lockouts
     *
     * @return int|null
     */
    public function get_max_temporary_lockouts()
    {
        return $this->container['max_temporary_lockouts'];
    }

    /**
     * Sets max_temporary_lockouts
     *
     * @param int|null $max_temporary_lockouts max_temporary_lockouts
     *
     * @return self
     */
    public function set_max_temporary_lockouts($max_temporary_lockouts)
    {
        if (is_null($max_temporary_lockouts)) {
            throw new \InvalidArgumentException('non-nullable max_temporary_lockouts cannot be null');
        }
        $this->container['max_temporary_lockouts'] = $max_temporary_lockouts;

        return $this;
    }

    /**
     * Gets max_failure_wait_seconds
     *
     * @return int|null
     */
    public function get_max_failure_wait_seconds()
    {
        return $this->container['max_failure_wait_seconds'];
    }

    /**
     * Sets max_failure_wait_seconds
     *
     * @param int|null $max_failure_wait_seconds max_failure_wait_seconds
     *
     * @return self
     */
    public function set_max_failure_wait_seconds($max_failure_wait_seconds)
    {
        if (is_null($max_failure_wait_seconds)) {
            throw new \InvalidArgumentException('non-nullable max_failure_wait_seconds cannot be null');
        }
        $this->container['max_failure_wait_seconds'] = $max_failure_wait_seconds;

        return $this;
    }

    /**
     * Gets minimum_quick_login_wait_seconds
     *
     * @return int|null
     */
    public function get_minimum_quick_login_wait_seconds()
    {
        return $this->container['minimum_quick_login_wait_seconds'];
    }

    /**
     * Sets minimum_quick_login_wait_seconds
     *
     * @param int|null $minimum_quick_login_wait_seconds minimum_quick_login_wait_seconds
     *
     * @return self
     */
    public function set_minimum_quick_login_wait_seconds($minimum_quick_login_wait_seconds)
    {
        if (is_null($minimum_quick_login_wait_seconds)) {
            throw new \InvalidArgumentException('non-nullable minimum_quick_login_wait_seconds cannot be null');
        }
        $this->container['minimum_quick_login_wait_seconds'] = $minimum_quick_login_wait_seconds;

        return $this;
    }

    /**
     * Gets wait_increment_seconds
     *
     * @return int|null
     */
    public function get_wait_increment_seconds()
    {
        return $this->container['wait_increment_seconds'];
    }

    /**
     * Sets wait_increment_seconds
     *
     * @param int|null $wait_increment_seconds wait_increment_seconds
     *
     * @return self
     */
    public function set_wait_increment_seconds($wait_increment_seconds)
    {
        if (is_null($wait_increment_seconds)) {
            throw new \InvalidArgumentException('non-nullable wait_increment_seconds cannot be null');
        }
        $this->container['wait_increment_seconds'] = $wait_increment_seconds;

        return $this;
    }

    /**
     * Gets quick_login_check_milli_seconds
     *
     * @return int|null
     */
    public function get_quick_login_check_milli_seconds()
    {
        return $this->container['quick_login_check_milli_seconds'];
    }

    /**
     * Sets quick_login_check_milli_seconds
     *
     * @param int|null $quick_login_check_milli_seconds quick_login_check_milli_seconds
     *
     * @return self
     */
    public function set_quick_login_check_milli_seconds($quick_login_check_milli_seconds)
    {
        if (is_null($quick_login_check_milli_seconds)) {
            throw new \InvalidArgumentException('non-nullable quick_login_check_milli_seconds cannot be null');
        }
        $this->container['quick_login_check_milli_seconds'] = $quick_login_check_milli_seconds;

        return $this;
    }

    /**
     * Gets max_delta_time_seconds
     *
     * @return int|null
     */
    public function get_max_delta_time_seconds()
    {
        return $this->container['max_delta_time_seconds'];
    }

    /**
     * Sets max_delta_time_seconds
     *
     * @param int|null $max_delta_time_seconds max_delta_time_seconds
     *
     * @return self
     */
    public function set_max_delta_time_seconds($max_delta_time_seconds)
    {
        if (is_null($max_delta_time_seconds)) {
            throw new \InvalidArgumentException('non-nullable max_delta_time_seconds cannot be null');
        }
        $this->container['max_delta_time_seconds'] = $max_delta_time_seconds;

        return $this;
    }

    /**
     * Gets failure_factor
     *
     * @return int|null
     */
    public function get_failure_factor()
    {
        return $this->container['failure_factor'];
    }

    /**
     * Sets failure_factor
     *
     * @param int|null $failure_factor failure_factor
     *
     * @return self
     */
    public function set_failure_factor($failure_factor)
    {
        if (is_null($failure_factor)) {
            throw new \InvalidArgumentException('non-nullable failure_factor cannot be null');
        }
        $this->container['failure_factor'] = $failure_factor;

        return $this;
    }

    /**
     * Gets private_key
     *
     * @return string|null
     * @deprecated
     */
    public function get_private_key()
    {
        return $this->container['private_key'];
    }

    /**
     * Sets private_key
     *
     * @param string|null $private_key private_key
     *
     * @return self
     * @deprecated
     */
    public function set_private_key($private_key)
    {
        if (is_null($private_key)) {
            throw new \InvalidArgumentException('non-nullable private_key cannot be null');
        }
        $this->container['private_key'] = $private_key;

        return $this;
    }

    /**
     * Gets public_key
     *
     * @return string|null
     * @deprecated
     */
    public function get_public_key()
    {
        return $this->container['public_key'];
    }

    /**
     * Sets public_key
     *
     * @param string|null $public_key public_key
     *
     * @return self
     * @deprecated
     */
    public function set_public_key($public_key)
    {
        if (is_null($public_key)) {
            throw new \InvalidArgumentException('non-nullable public_key cannot be null');
        }
        $this->container['public_key'] = $public_key;

        return $this;
    }

    /**
     * Gets certificate
     *
     * @return string|null
     * @deprecated
     */
    public function get_certificate()
    {
        return $this->container['certificate'];
    }

    /**
     * Sets certificate
     *
     * @param string|null $certificate certificate
     *
     * @return self
     * @deprecated
     */
    public function set_certificate($certificate)
    {
        if (is_null($certificate)) {
            throw new \InvalidArgumentException('non-nullable certificate cannot be null');
        }
        $this->container['certificate'] = $certificate;

        return $this;
    }

    /**
     * Gets code_secret
     *
     * @return string|null
     * @deprecated
     */
    public function get_code_secret()
    {
        return $this->container['code_secret'];
    }

    /**
     * Sets code_secret
     *
     * @param string|null $code_secret code_secret
     *
     * @return self
     * @deprecated
     */
    public function set_code_secret($code_secret)
    {
        if (is_null($code_secret)) {
            throw new \InvalidArgumentException('non-nullable code_secret cannot be null');
        }
        $this->container['code_secret'] = $code_secret;

        return $this;
    }

    /**
     * Gets roles
     *
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\RolesRepresentation|null
     */
    public function get_roles()
    {
        return $this->container['roles'];
    }

    /**
     * Sets roles
     *
     * @param \WebMI\KeycloakApiClient\KeycloakApi\Model\RolesRepresentation|null $roles roles
     *
     * @return self
     */
    public function set_roles($roles)
    {
        if (is_null($roles)) {
            throw new \InvalidArgumentException('non-nullable roles cannot be null');
        }
        $this->container['roles'] = $roles;

        return $this;
    }

    /**
     * Gets groups
     *
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\GroupRepresentation[]|null
     */
    public function get_groups()
    {
        return $this->container['groups'];
    }

    /**
     * Sets groups
     *
     * @param \WebMI\KeycloakApiClient\KeycloakApi\Model\GroupRepresentation[]|null $groups groups
     *
     * @return self
     */
    public function set_groups($groups)
    {
        if (is_null($groups)) {
            throw new \InvalidArgumentException('non-nullable groups cannot be null');
        }
        $this->container['groups'] = $groups;

        return $this;
    }

    /**
     * Gets default_roles
     *
     * @return string[]|null
     * @deprecated
     */
    public function get_default_roles()
    {
        return $this->container['default_roles'];
    }

    /**
     * Sets default_roles
     *
     * @param string[]|null $default_roles default_roles
     *
     * @return self
     * @deprecated
     */
    public function set_default_roles($default_roles)
    {
        if (is_null($default_roles)) {
            throw new \InvalidArgumentException('non-nullable default_roles cannot be null');
        }
        $this->container['default_roles'] = $default_roles;

        return $this;
    }

    /**
     * Gets default_role
     *
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation|null
     */
    public function get_default_role()
    {
        return $this->container['default_role'];
    }

    /**
     * Sets default_role
     *
     * @param \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation|null $default_role default_role
     *
     * @return self
     */
    public function set_default_role($default_role)
    {
        if (is_null($default_role)) {
            throw new \InvalidArgumentException('non-nullable default_role cannot be null');
        }
        $this->container['default_role'] = $default_role;

        return $this;
    }

    /**
     * Gets default_groups
     *
     * @return string[]|null
     */
    public function get_default_groups()
    {
        return $this->container['default_groups'];
    }

    /**
     * Sets default_groups
     *
     * @param string[]|null $default_groups default_groups
     *
     * @return self
     */
    public function set_default_groups($default_groups)
    {
        if (is_null($default_groups)) {
            throw new \InvalidArgumentException('non-nullable default_groups cannot be null');
        }
        $this->container['default_groups'] = $default_groups;

        return $this;
    }

    /**
     * Gets required_credentials
     *
     * @return string[]|null
     * @deprecated
     */
    public function get_required_credentials()
    {
        return $this->container['required_credentials'];
    }

    /**
     * Sets required_credentials
     *
     * @param string[]|null $required_credentials required_credentials
     *
     * @return self
     * @deprecated
     */
    public function set_required_credentials($required_credentials)
    {
        if (is_null($required_credentials)) {
            throw new \InvalidArgumentException('non-nullable required_credentials cannot be null');
        }


        $this->container['required_credentials'] = $required_credentials;

        return $this;
    }

    /**
     * Gets password_policy
     *
     * @return string|null
     */
    public function get_password_policy()
    {
        return $this->container['password_policy'];
    }

    /**
     * Sets password_policy
     *
     * @param string|null $password_policy password_policy
     *
     * @return self
     */
    public function set_password_policy($password_policy)
    {
        if (is_null($password_policy)) {
            throw new \InvalidArgumentException('non-nullable password_policy cannot be null');
        }
        $this->container['password_policy'] = $password_policy;

        return $this;
    }

    /**
     * Gets otp_policy_type
     *
     * @return string|null
     */
    public function get_otp_policy_type()
    {
        return $this->container['otp_policy_type'];
    }

    /**
     * Sets otp_policy_type
     *
     * @param string|null $otp_policy_type otp_policy_type
     *
     * @return self
     */
    public function set_otp_policy_type($otp_policy_type)
    {
        if (is_null($otp_policy_type)) {
            throw new \InvalidArgumentException('non-nullable otp_policy_type cannot be null');
        }
        $this->container['otp_policy_type'] = $otp_policy_type;

        return $this;
    }

    /**
     * Gets otp_policy_algorithm
     *
     * @return string|null
     */
    public function get_otp_policy_algorithm()
    {
        return $this->container['otp_policy_algorithm'];
    }

    /**
     * Sets otp_policy_algorithm
     *
     * @param string|null $otp_policy_algorithm otp_policy_algorithm
     *
     * @return self
     */
    public function set_otp_policy_algorithm($otp_policy_algorithm)
    {
        if (is_null($otp_policy_algorithm)) {
            throw new \InvalidArgumentException('non-nullable otp_policy_algorithm cannot be null');
        }
        $this->container['otp_policy_algorithm'] = $otp_policy_algorithm;

        return $this;
    }

    /**
     * Gets otp_policy_initial_counter
     *
     * @return int|null
     */
    public function get_otp_policy_initial_counter()
    {
        return $this->container['otp_policy_initial_counter'];
    }

    /**
     * Sets otp_policy_initial_counter
     *
     * @param int|null $otp_policy_initial_counter otp_policy_initial_counter
     *
     * @return self
     */
    public function set_otp_policy_initial_counter($otp_policy_initial_counter)
    {
        if (is_null($otp_policy_initial_counter)) {
            throw new \InvalidArgumentException('non-nullable otp_policy_initial_counter cannot be null');
        }
        $this->container['otp_policy_initial_counter'] = $otp_policy_initial_counter;

        return $this;
    }

    /**
     * Gets otp_policy_digits
     *
     * @return int|null
     */
    public function get_otp_policy_digits()
    {
        return $this->container['otp_policy_digits'];
    }

    /**
     * Sets otp_policy_digits
     *
     * @param int|null $otp_policy_digits otp_policy_digits
     *
     * @return self
     */
    public function set_otp_policy_digits($otp_policy_digits)
    {
        if (is_null($otp_policy_digits)) {
            throw new \InvalidArgumentException('non-nullable otp_policy_digits cannot be null');
        }
        $this->container['otp_policy_digits'] = $otp_policy_digits;

        return $this;
    }

    /**
     * Gets otp_policy_look_ahead_window
     *
     * @return int|null
     */
    public function get_otp_policy_look_ahead_window()
    {
        return $this->container['otp_policy_look_ahead_window'];
    }

    /**
     * Sets otp_policy_look_ahead_window
     *
     * @param int|null $otp_policy_look_ahead_window otp_policy_look_ahead_window
     *
     * @return self
     */
    public function set_otp_policy_look_ahead_window($otp_policy_look_ahead_window)
    {
        if (is_null($otp_policy_look_ahead_window)) {
            throw new \InvalidArgumentException('non-nullable otp_policy_look_ahead_window cannot be null');
        }
        $this->container['otp_policy_look_ahead_window'] = $otp_policy_look_ahead_window;

        return $this;
    }

    /**
     * Gets otp_policy_period
     *
     * @return int|null
     */
    public function get_otp_policy_period()
    {
        return $this->container['otp_policy_period'];
    }

    /**
     * Sets otp_policy_period
     *
     * @param int|null $otp_policy_period otp_policy_period
     *
     * @return self
     */
    public function set_otp_policy_period($otp_policy_period)
    {
        if (is_null($otp_policy_period)) {
            throw new \InvalidArgumentException('non-nullable otp_policy_period cannot be null');
        }
        $this->container['otp_policy_period'] = $otp_policy_period;

        return $this;
    }

    /**
     * Gets otp_policy_code_reusable
     *
     * @return bool|null
     */
    public function get_otp_policy_code_reusable()
    {
        return $this->container['otp_policy_code_reusable'];
    }

    /**
     * Sets otp_policy_code_reusable
     *
     * @param bool|null $otp_policy_code_reusable otp_policy_code_reusable
     *
     * @return self
     */
    public function set_otp_policy_code_reusable($otp_policy_code_reusable)
    {
        if (is_null($otp_policy_code_reusable)) {
            throw new \InvalidArgumentException('non-nullable otp_policy_code_reusable cannot be null');
        }
        $this->container['otp_policy_code_reusable'] = $otp_policy_code_reusable;

        return $this;
    }

    /**
     * Gets otp_supported_applications
     *
     * @return string[]|null
     */
    public function get_otp_supported_applications()
    {
        return $this->container['otp_supported_applications'];
    }

    /**
     * Sets otp_supported_applications
     *
     * @param string[]|null $otp_supported_applications otp_supported_applications
     *
     * @return self
     */
    public function set_otp_supported_applications($otp_supported_applications)
    {
        if (is_null($otp_supported_applications)) {
            throw new \InvalidArgumentException('non-nullable otp_supported_applications cannot be null');
        }
        $this->container['otp_supported_applications'] = $otp_supported_applications;

        return $this;
    }

    /**
     * Gets localization_texts
     *
     * @return array<string,array<string,string>>|null
     */
    public function get_localization_texts()
    {
        return $this->container['localization_texts'];
    }

    /**
     * Sets localization_texts
     *
     * @param array<string,array<string,string>>|null $localization_texts localization_texts
     *
     * @return self
     */
    public function set_localization_texts($localization_texts)
    {
        if (is_null($localization_texts)) {
            throw new \InvalidArgumentException('non-nullable localization_texts cannot be null');
        }
        $this->container['localization_texts'] = $localization_texts;

        return $this;
    }

    /**
     * Gets web_authn_policy_rp_entity_name
     *
     * @return string|null
     */
    public function get_web_authn_policy_rp_entity_name()
    {
        return $this->container['web_authn_policy_rp_entity_name'];
    }

    /**
     * Sets web_authn_policy_rp_entity_name
     *
     * @param string|null $web_authn_policy_rp_entity_name web_authn_policy_rp_entity_name
     *
     * @return self
     */
    public function set_web_authn_policy_rp_entity_name($web_authn_policy_rp_entity_name)
    {
        if (is_null($web_authn_policy_rp_entity_name)) {
            throw new \InvalidArgumentException('non-nullable web_authn_policy_rp_entity_name cannot be null');
        }
        $this->container['web_authn_policy_rp_entity_name'] = $web_authn_policy_rp_entity_name;

        return $this;
    }

    /**
     * Gets web_authn_policy_signature_algorithms
     *
     * @return string[]|null
     */
    public function get_web_authn_policy_signature_algorithms()
    {
        return $this->container['web_authn_policy_signature_algorithms'];
    }

    /**
     * Sets web_authn_policy_signature_algorithms
     *
     * @param string[]|null $web_authn_policy_signature_algorithms web_authn_policy_signature_algorithms
     *
     * @return self
     */
    public function set_web_authn_policy_signature_algorithms($web_authn_policy_signature_algorithms)
    {
        if (is_null($web_authn_policy_signature_algorithms)) {
            throw new \InvalidArgumentException('non-nullable web_authn_policy_signature_algorithms cannot be null');
        }
        $this->container['web_authn_policy_signature_algorithms'] = $web_authn_policy_signature_algorithms;

        return $this;
    }

    /**
     * Gets web_authn_policy_rp_id
     *
     * @return string|null
     */
    public function get_web_authn_policy_rp_id()
    {
        return $this->container['web_authn_policy_rp_id'];
    }

    /**
     * Sets web_authn_policy_rp_id
     *
     * @param string|null $web_authn_policy_rp_id web_authn_policy_rp_id
     *
     * @return self
     */
    public function set_web_authn_policy_rp_id($web_authn_policy_rp_id)
    {
        if (is_null($web_authn_policy_rp_id)) {
            throw new \InvalidArgumentException('non-nullable web_authn_policy_rp_id cannot be null');
        }
        $this->container['web_authn_policy_rp_id'] = $web_authn_policy_rp_id;

        return $this;
    }

    /**
     * Gets web_authn_policy_attestation_conveyance_preference
     *
     * @return string|null
     */
    public function get_web_authn_policy_attestation_conveyance_preference()
    {
        return $this->container['web_authn_policy_attestation_conveyance_preference'];
    }

    /**
     * Sets web_authn_policy_attestation_conveyance_preference
     *
     * @param string|null $web_authn_policy_attestation_conveyance_preference web_authn_policy_attestation_conveyance_preference
     *
     * @return self
     */
    public function set_web_authn_policy_attestation_conveyance_preference($web_authn_policy_attestation_conveyance_preference)
    {
        if (is_null($web_authn_policy_attestation_conveyance_preference)) {
            throw new \InvalidArgumentException('non-nullable web_authn_policy_attestation_conveyance_preference cannot be null');
        }
        $this->container['web_authn_policy_attestation_conveyance_preference'] = $web_authn_policy_attestation_conveyance_preference;

        return $this;
    }

    /**
     * Gets web_authn_policy_authenticator_attachment
     *
     * @return string|null
     */
    public function get_web_authn_policy_authenticator_attachment()
    {
        return $this->container['web_authn_policy_authenticator_attachment'];
    }

    /**
     * Sets web_authn_policy_authenticator_attachment
     *
     * @param string|null $web_authn_policy_authenticator_attachment web_authn_policy_authenticator_attachment
     *
     * @return self
     */
    public function set_web_authn_policy_authenticator_attachment($web_authn_policy_authenticator_attachment)
    {
        if (is_null($web_authn_policy_authenticator_attachment)) {
            throw new \InvalidArgumentException('non-nullable web_authn_policy_authenticator_attachment cannot be null');
        }
        $this->container['web_authn_policy_authenticator_attachment'] = $web_authn_policy_authenticator_attachment;

        return $this;
    }

    /**
     * Gets web_authn_policy_require_resident_key
     *
     * @return string|null
     */
    public function get_web_authn_policy_require_resident_key()
    {
        return $this->container['web_authn_policy_require_resident_key'];
    }

    /**
     * Sets web_authn_policy_require_resident_key
     *
     * @param string|null $web_authn_policy_require_resident_key web_authn_policy_require_resident_key
     *
     * @return self
     */
    public function set_web_authn_policy_require_resident_key($web_authn_policy_require_resident_key)
    {
        if (is_null($web_authn_policy_require_resident_key)) {
            throw new \InvalidArgumentException('non-nullable web_authn_policy_require_resident_key cannot be null');
        }
        $this->container['web_authn_policy_require_resident_key'] = $web_authn_policy_require_resident_key;

        return $this;
    }

    /**
     * Gets web_authn_policy_user_verification_requirement
     *
     * @return string|null
     */
    public function get_web_authn_policy_user_verification_requirement()
    {
        return $this->container['web_authn_policy_user_verification_requirement'];
    }

    /**
     * Sets web_authn_policy_user_verification_requirement
     *
     * @param string|null $web_authn_policy_user_verification_requirement web_authn_policy_user_verification_requirement
     *
     * @return self
     */
    public function set_web_authn_policy_user_verification_requirement($web_authn_policy_user_verification_requirement)
    {
        if (is_null($web_authn_policy_user_verification_requirement)) {
            throw new \InvalidArgumentException('non-nullable web_authn_policy_user_verification_requirement cannot be null');
        }
        $this->container['web_authn_policy_user_verification_requirement'] = $web_authn_policy_user_verification_requirement;

        return $this;
    }

    /**
     * Gets web_authn_policy_create_timeout
     *
     * @return int|null
     */
    public function get_web_authn_policy_create_timeout()
    {
        return $this->container['web_authn_policy_create_timeout'];
    }

    /**
     * Sets web_authn_policy_create_timeout
     *
     * @param int|null $web_authn_policy_create_timeout web_authn_policy_create_timeout
     *
     * @return self
     */
    public function set_web_authn_policy_create_timeout($web_authn_policy_create_timeout)
    {
        if (is_null($web_authn_policy_create_timeout)) {
            throw new \InvalidArgumentException('non-nullable web_authn_policy_create_timeout cannot be null');
        }
        $this->container['web_authn_policy_create_timeout'] = $web_authn_policy_create_timeout;

        return $this;
    }

    /**
     * Gets web_authn_policy_avoid_same_authenticator_register
     *
     * @return bool|null
     */
    public function get_web_authn_policy_avoid_same_authenticator_register()
    {
        return $this->container['web_authn_policy_avoid_same_authenticator_register'];
    }

    /**
     * Sets web_authn_policy_avoid_same_authenticator_register
     *
     * @param bool|null $web_authn_policy_avoid_same_authenticator_register web_authn_policy_avoid_same_authenticator_register
     *
     * @return self
     */
    public function set_web_authn_policy_avoid_same_authenticator_register($web_authn_policy_avoid_same_authenticator_register)
    {
        if (is_null($web_authn_policy_avoid_same_authenticator_register)) {
            throw new \InvalidArgumentException('non-nullable web_authn_policy_avoid_same_authenticator_register cannot be null');
        }
        $this->container['web_authn_policy_avoid_same_authenticator_register'] = $web_authn_policy_avoid_same_authenticator_register;

        return $this;
    }

    /**
     * Gets web_authn_policy_acceptable_aaguids
     *
     * @return string[]|null
     */
    public function get_web_authn_policy_acceptable_aaguids()
    {
        return $this->container['web_authn_policy_acceptable_aaguids'];
    }

    /**
     * Sets web_authn_policy_acceptable_aaguids
     *
     * @param string[]|null $web_authn_policy_acceptable_aaguids web_authn_policy_acceptable_aaguids
     *
     * @return self
     */
    public function set_web_authn_policy_acceptable_aaguids($web_authn_policy_acceptable_aaguids)
    {
        if (is_null($web_authn_policy_acceptable_aaguids)) {
            throw new \InvalidArgumentException('non-nullable web_authn_policy_acceptable_aaguids cannot be null');
        }
        $this->container['web_authn_policy_acceptable_aaguids'] = $web_authn_policy_acceptable_aaguids;

        return $this;
    }

    /**
     * Gets web_authn_policy_extra_origins
     *
     * @return string[]|null
     */
    public function get_web_authn_policy_extra_origins()
    {
        return $this->container['web_authn_policy_extra_origins'];
    }

    /**
     * Sets web_authn_policy_extra_origins
     *
     * @param string[]|null $web_authn_policy_extra_origins web_authn_policy_extra_origins
     *
     * @return self
     */
    public function set_web_authn_policy_extra_origins($web_authn_policy_extra_origins)
    {
        if (is_null($web_authn_policy_extra_origins)) {
            throw new \InvalidArgumentException('non-nullable web_authn_policy_extra_origins cannot be null');
        }
        $this->container['web_authn_policy_extra_origins'] = $web_authn_policy_extra_origins;

        return $this;
    }

    /**
     * Gets web_authn_policy_passwordless_rp_entity_name
     *
     * @return string|null
     */
    public function get_web_authn_policy_passwordless_rp_entity_name()
    {
        return $this->container['web_authn_policy_passwordless_rp_entity_name'];
    }

    /**
     * Sets web_authn_policy_passwordless_rp_entity_name
     *
     * @param string|null $web_authn_policy_passwordless_rp_entity_name web_authn_policy_passwordless_rp_entity_name
     *
     * @return self
     */
    public function set_web_authn_policy_passwordless_rp_entity_name($web_authn_policy_passwordless_rp_entity_name)
    {
        if (is_null($web_authn_policy_passwordless_rp_entity_name)) {
            throw new \InvalidArgumentException('non-nullable web_authn_policy_passwordless_rp_entity_name cannot be null');
        }
        $this->container['web_authn_policy_passwordless_rp_entity_name'] = $web_authn_policy_passwordless_rp_entity_name;

        return $this;
    }

    /**
     * Gets web_authn_policy_passwordless_signature_algorithms
     *
     * @return string[]|null
     */
    public function get_web_authn_policy_passwordless_signature_algorithms()
    {
        return $this->container['web_authn_policy_passwordless_signature_algorithms'];
    }

    /**
     * Sets web_authn_policy_passwordless_signature_algorithms
     *
     * @param string[]|null $web_authn_policy_passwordless_signature_algorithms web_authn_policy_passwordless_signature_algorithms
     *
     * @return self
     */
    public function set_web_authn_policy_passwordless_signature_algorithms($web_authn_policy_passwordless_signature_algorithms)
    {
        if (is_null($web_authn_policy_passwordless_signature_algorithms)) {
            throw new \InvalidArgumentException('non-nullable web_authn_policy_passwordless_signature_algorithms cannot be null');
        }
        $this->container['web_authn_policy_passwordless_signature_algorithms'] = $web_authn_policy_passwordless_signature_algorithms;

        return $this;
    }

    /**
     * Gets web_authn_policy_passwordless_rp_id
     *
     * @return string|null
     */
    public function get_web_authn_policy_passwordless_rp_id()
    {
        return $this->container['web_authn_policy_passwordless_rp_id'];
    }

    /**
     * Sets web_authn_policy_passwordless_rp_id
     *
     * @param string|null $web_authn_policy_passwordless_rp_id web_authn_policy_passwordless_rp_id
     *
     * @return self
     */
    public function set_web_authn_policy_passwordless_rp_id($web_authn_policy_passwordless_rp_id)
    {
        if (is_null($web_authn_policy_passwordless_rp_id)) {
            throw new \InvalidArgumentException('non-nullable web_authn_policy_passwordless_rp_id cannot be null');
        }
        $this->container['web_authn_policy_passwordless_rp_id'] = $web_authn_policy_passwordless_rp_id;

        return $this;
    }

    /**
     * Gets web_authn_policy_passwordless_attestation_conveyance_preference
     *
     * @return string|null
     */
    public function get_web_authn_policy_passwordless_attestation_conveyance_preference()
    {
        return $this->container['web_authn_policy_passwordless_attestation_conveyance_preference'];
    }

    /**
     * Sets web_authn_policy_passwordless_attestation_conveyance_preference
     *
     * @param string|null $web_authn_policy_passwordless_attestation_conveyance_preference web_authn_policy_passwordless_attestation_conveyance_preference
     *
     * @return self
     */
    public function set_web_authn_policy_passwordless_attestation_conveyance_preference($web_authn_policy_passwordless_attestation_conveyance_preference)
    {
        if (is_null($web_authn_policy_passwordless_attestation_conveyance_preference)) {
            throw new \InvalidArgumentException('non-nullable web_authn_policy_passwordless_attestation_conveyance_preference cannot be null');
        }
        $this->container['web_authn_policy_passwordless_attestation_conveyance_preference'] = $web_authn_policy_passwordless_attestation_conveyance_preference;

        return $this;
    }

    /**
     * Gets web_authn_policy_passwordless_authenticator_attachment
     *
     * @return string|null
     */
    public function get_web_authn_policy_passwordless_authenticator_attachment()
    {
        return $this->container['web_authn_policy_passwordless_authenticator_attachment'];
    }

    /**
     * Sets web_authn_policy_passwordless_authenticator_attachment
     *
     * @param string|null $web_authn_policy_passwordless_authenticator_attachment web_authn_policy_passwordless_authenticator_attachment
     *
     * @return self
     */
    public function set_web_authn_policy_passwordless_authenticator_attachment($web_authn_policy_passwordless_authenticator_attachment)
    {
        if (is_null($web_authn_policy_passwordless_authenticator_attachment)) {
            throw new \InvalidArgumentException('non-nullable web_authn_policy_passwordless_authenticator_attachment cannot be null');
        }
        $this->container['web_authn_policy_passwordless_authenticator_attachment'] = $web_authn_policy_passwordless_authenticator_attachment;

        return $this;
    }

    /**
     * Gets web_authn_policy_passwordless_require_resident_key
     *
     * @return string|null
     */
    public function get_web_authn_policy_passwordless_require_resident_key()
    {
        return $this->container['web_authn_policy_passwordless_require_resident_key'];
    }

    /**
     * Sets web_authn_policy_passwordless_require_resident_key
     *
     * @param string|null $web_authn_policy_passwordless_require_resident_key web_authn_policy_passwordless_require_resident_key
     *
     * @return self
     */
    public function set_web_authn_policy_passwordless_require_resident_key($web_authn_policy_passwordless_require_resident_key)
    {
        if (is_null($web_authn_policy_passwordless_require_resident_key)) {
            throw new \InvalidArgumentException('non-nullable web_authn_policy_passwordless_require_resident_key cannot be null');
        }
        $this->container['web_authn_policy_passwordless_require_resident_key'] = $web_authn_policy_passwordless_require_resident_key;

        return $this;
    }

    /**
     * Gets web_authn_policy_passwordless_user_verification_requirement
     *
     * @return string|null
     */
    public function get_web_authn_policy_passwordless_user_verification_requirement()
    {
        return $this->container['web_authn_policy_passwordless_user_verification_requirement'];
    }

    /**
     * Sets web_authn_policy_passwordless_user_verification_requirement
     *
     * @param string|null $web_authn_policy_passwordless_user_verification_requirement web_authn_policy_passwordless_user_verification_requirement
     *
     * @return self
     */
    public function set_web_authn_policy_passwordless_user_verification_requirement($web_authn_policy_passwordless_user_verification_requirement)
    {
        if (is_null($web_authn_policy_passwordless_user_verification_requirement)) {
            throw new \InvalidArgumentException('non-nullable web_authn_policy_passwordless_user_verification_requirement cannot be null');
        }
        $this->container['web_authn_policy_passwordless_user_verification_requirement'] = $web_authn_policy_passwordless_user_verification_requirement;

        return $this;
    }

    /**
     * Gets web_authn_policy_passwordless_create_timeout
     *
     * @return int|null
     */
    public function get_web_authn_policy_passwordless_create_timeout()
    {
        return $this->container['web_authn_policy_passwordless_create_timeout'];
    }

    /**
     * Sets web_authn_policy_passwordless_create_timeout
     *
     * @param int|null $web_authn_policy_passwordless_create_timeout web_authn_policy_passwordless_create_timeout
     *
     * @return self
     */
    public function set_web_authn_policy_passwordless_create_timeout($web_authn_policy_passwordless_create_timeout)
    {
        if (is_null($web_authn_policy_passwordless_create_timeout)) {
            throw new \InvalidArgumentException('non-nullable web_authn_policy_passwordless_create_timeout cannot be null');
        }
        $this->container['web_authn_policy_passwordless_create_timeout'] = $web_authn_policy_passwordless_create_timeout;

        return $this;
    }

    /**
     * Gets web_authn_policy_passwordless_avoid_same_authenticator_register
     *
     * @return bool|null
     */
    public function get_web_authn_policy_passwordless_avoid_same_authenticator_register()
    {
        return $this->container['web_authn_policy_passwordless_avoid_same_authenticator_register'];
    }

    /**
     * Sets web_authn_policy_passwordless_avoid_same_authenticator_register
     *
     * @param bool|null $web_authn_policy_passwordless_avoid_same_authenticator_register web_authn_policy_passwordless_avoid_same_authenticator_register
     *
     * @return self
     */
    public function set_web_authn_policy_passwordless_avoid_same_authenticator_register($web_authn_policy_passwordless_avoid_same_authenticator_register)
    {
        if (is_null($web_authn_policy_passwordless_avoid_same_authenticator_register)) {
            throw new \InvalidArgumentException('non-nullable web_authn_policy_passwordless_avoid_same_authenticator_register cannot be null');
        }
        $this->container['web_authn_policy_passwordless_avoid_same_authenticator_register'] = $web_authn_policy_passwordless_avoid_same_authenticator_register;

        return $this;
    }

    /**
     * Gets web_authn_policy_passwordless_acceptable_aaguids
     *
     * @return string[]|null
     */
    public function get_web_authn_policy_passwordless_acceptable_aaguids()
    {
        return $this->container['web_authn_policy_passwordless_acceptable_aaguids'];
    }

    /**
     * Sets web_authn_policy_passwordless_acceptable_aaguids
     *
     * @param string[]|null $web_authn_policy_passwordless_acceptable_aaguids web_authn_policy_passwordless_acceptable_aaguids
     *
     * @return self
     */
    public function set_web_authn_policy_passwordless_acceptable_aaguids($web_authn_policy_passwordless_acceptable_aaguids)
    {
        if (is_null($web_authn_policy_passwordless_acceptable_aaguids)) {
            throw new \InvalidArgumentException('non-nullable web_authn_policy_passwordless_acceptable_aaguids cannot be null');
        }
        $this->container['web_authn_policy_passwordless_acceptable_aaguids'] = $web_authn_policy_passwordless_acceptable_aaguids;

        return $this;
    }

    /**
     * Gets web_authn_policy_passwordless_extra_origins
     *
     * @return string[]|null
     */
    public function get_web_authn_policy_passwordless_extra_origins()
    {
        return $this->container['web_authn_policy_passwordless_extra_origins'];
    }

    /**
     * Sets web_authn_policy_passwordless_extra_origins
     *
     * @param string[]|null $web_authn_policy_passwordless_extra_origins web_authn_policy_passwordless_extra_origins
     *
     * @return self
     */
    public function set_web_authn_policy_passwordless_extra_origins($web_authn_policy_passwordless_extra_origins)
    {
        if (is_null($web_authn_policy_passwordless_extra_origins)) {
            throw new \InvalidArgumentException('non-nullable web_authn_policy_passwordless_extra_origins cannot be null');
        }
        $this->container['web_authn_policy_passwordless_extra_origins'] = $web_authn_policy_passwordless_extra_origins;

        return $this;
    }

    /**
     * Gets client_profiles
     *
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\ClientProfilesRepresentation|null
     */
    public function get_client_profiles()
    {
        return $this->container['client_profiles'];
    }

    /**
     * Sets client_profiles
     *
     * @param \WebMI\KeycloakApiClient\KeycloakApi\Model\ClientProfilesRepresentation|null $client_profiles client_profiles
     *
     * @return self
     */
    public function set_client_profiles($client_profiles)
    {
        if (is_null($client_profiles)) {
            throw new \InvalidArgumentException('non-nullable client_profiles cannot be null');
        }
        $this->container['client_profiles'] = $client_profiles;

        return $this;
    }

    /**
     * Gets client_policies
     *
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\ClientPoliciesRepresentation|null
     */
    public function get_client_policies()
    {
        return $this->container['client_policies'];
    }

    /**
     * Sets client_policies
     *
     * @param \WebMI\KeycloakApiClient\KeycloakApi\Model\ClientPoliciesRepresentation|null $client_policies client_policies
     *
     * @return self
     */
    public function set_client_policies($client_policies)
    {
        if (is_null($client_policies)) {
            throw new \InvalidArgumentException('non-nullable client_policies cannot be null');
        }
        $this->container['client_policies'] = $client_policies;

        return $this;
    }

    /**
     * Gets users
     *
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\UserRepresentation[]|null
     */
    public function get_users()
    {
        return $this->container['users'];
    }

    /**
     * Sets users
     *
     * @param \WebMI\KeycloakApiClient\KeycloakApi\Model\UserRepresentation[]|null $users users
     *
     * @return self
     */
    public function set_users($users)
    {
        if (is_null($users)) {
            throw new \InvalidArgumentException('non-nullable users cannot be null');
        }
        $this->container['users'] = $users;

        return $this;
    }

    /**
     * Gets federated_users
     *
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\UserRepresentation[]|null
     */
    public function get_federated_users()
    {
        return $this->container['federated_users'];
    }

    /**
     * Sets federated_users
     *
     * @param \WebMI\KeycloakApiClient\KeycloakApi\Model\UserRepresentation[]|null $federated_users federated_users
     *
     * @return self
     */
    public function set_federated_users($federated_users)
    {
        if (is_null($federated_users)) {
            throw new \InvalidArgumentException('non-nullable federated_users cannot be null');
        }
        $this->container['federated_users'] = $federated_users;

        return $this;
    }

    /**
     * Gets scope_mappings
     *
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\ScopeMappingRepresentation[]|null
     */
    public function get_scope_mappings()
    {
        return $this->container['scope_mappings'];
    }

    /**
     * Sets scope_mappings
     *
     * @param \WebMI\KeycloakApiClient\KeycloakApi\Model\ScopeMappingRepresentation[]|null $scope_mappings scope_mappings
     *
     * @return self
     */
    public function set_scope_mappings($scope_mappings)
    {
        if (is_null($scope_mappings)) {
            throw new \InvalidArgumentException('non-nullable scope_mappings cannot be null');
        }
        $this->container['scope_mappings'] = $scope_mappings;

        return $this;
    }

    /**
     * Gets client_scope_mappings
     *
     * @return array<string,\WebMI\KeycloakApiClient\KeycloakApi\Model\ScopeMappingRepresentation[]>|null
     */
    public function get_client_scope_mappings()
    {
        return $this->container['client_scope_mappings'];
    }

    /**
     * Sets client_scope_mappings
     *
     * @param array<string,\WebMI\KeycloakApiClient\KeycloakApi\Model\ScopeMappingRepresentation[]>|null $client_scope_mappings client_scope_mappings
     *
     * @return self
     */
    public function set_client_scope_mappings($client_scope_mappings)
    {
        if (is_null($client_scope_mappings)) {
            throw new \InvalidArgumentException('non-nullable client_scope_mappings cannot be null');
        }
        $this->container['client_scope_mappings'] = $client_scope_mappings;

        return $this;
    }

    /**
     * Gets clients
     *
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\ClientRepresentation[]|null
     */
    public function get_clients()
    {
        return $this->container['clients'];
    }

    /**
     * Sets clients
     *
     * @param \WebMI\KeycloakApiClient\KeycloakApi\Model\ClientRepresentation[]|null $clients clients
     *
     * @return self
     */
    public function set_clients($clients)
    {
        if (is_null($clients)) {
            throw new \InvalidArgumentException('non-nullable clients cannot be null');
        }
        $this->container['clients'] = $clients;

        return $this;
    }

    /**
     * Gets client_scopes
     *
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\ClientScopeRepresentation[]|null
     */
    public function get_client_scopes()
    {
        return $this->container['client_scopes'];
    }

    /**
     * Sets client_scopes
     *
     * @param \WebMI\KeycloakApiClient\KeycloakApi\Model\ClientScopeRepresentation[]|null $client_scopes client_scopes
     *
     * @return self
     */
    public function set_client_scopes($client_scopes)
    {
        if (is_null($client_scopes)) {
            throw new \InvalidArgumentException('non-nullable client_scopes cannot be null');
        }
        $this->container['client_scopes'] = $client_scopes;

        return $this;
    }

    /**
     * Gets default_default_client_scopes
     *
     * @return string[]|null
     */
    public function get_default_default_client_scopes()
    {
        return $this->container['default_default_client_scopes'];
    }

    /**
     * Sets default_default_client_scopes
     *
     * @param string[]|null $default_default_client_scopes default_default_client_scopes
     *
     * @return self
     */
    public function set_default_default_client_scopes($default_default_client_scopes)
    {
        if (is_null($default_default_client_scopes)) {
            throw new \InvalidArgumentException('non-nullable default_default_client_scopes cannot be null');
        }
        $this->container['default_default_client_scopes'] = $default_default_client_scopes;

        return $this;
    }

    /**
     * Gets default_optional_client_scopes
     *
     * @return string[]|null
     */
    public function get_default_optional_client_scopes()
    {
        return $this->container['default_optional_client_scopes'];
    }

    /**
     * Sets default_optional_client_scopes
     *
     * @param string[]|null $default_optional_client_scopes default_optional_client_scopes
     *
     * @return self
     */
    public function set_default_optional_client_scopes($default_optional_client_scopes)
    {
        if (is_null($default_optional_client_scopes)) {
            throw new \InvalidArgumentException('non-nullable default_optional_client_scopes cannot be null');
        }
        $this->container['default_optional_client_scopes'] = $default_optional_client_scopes;

        return $this;
    }

    /**
     * Gets browser_security_headers
     *
     * @return array<string,string>|null
     */
    public function get_browser_security_headers()
    {
        return $this->container['browser_security_headers'];
    }

    /**
     * Sets browser_security_headers
     *
     * @param array<string,string>|null $browser_security_headers browser_security_headers
     *
     * @return self
     */
    public function set_browser_security_headers($browser_security_headers)
    {
        if (is_null($browser_security_headers)) {
            throw new \InvalidArgumentException('non-nullable browser_security_headers cannot be null');
        }
        $this->container['browser_security_headers'] = $browser_security_headers;

        return $this;
    }

    /**
     * Gets smtp_server
     *
     * @return array<string,string>|null
     */
    public function get_smtp_server()
    {
        return $this->container['smtp_server'];
    }

    /**
     * Sets smtp_server
     *
     * @param array<string,string>|null $smtp_server smtp_server
     *
     * @return self
     */
    public function set_smtp_server($smtp_server)
    {
        if (is_null($smtp_server)) {
            throw new \InvalidArgumentException('non-nullable smtp_server cannot be null');
        }
        $this->container['smtp_server'] = $smtp_server;

        return $this;
    }

    /**
     * Gets user_federation_providers
     *
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\UserFederationProviderRepresentation[]|null
     */
    public function get_user_federation_providers()
    {
        return $this->container['user_federation_providers'];
    }

    /**
     * Sets user_federation_providers
     *
     * @param \WebMI\KeycloakApiClient\KeycloakApi\Model\UserFederationProviderRepresentation[]|null $user_federation_providers user_federation_providers
     *
     * @return self
     */
    public function set_user_federation_providers($user_federation_providers)
    {
        if (is_null($user_federation_providers)) {
            throw new \InvalidArgumentException('non-nullable user_federation_providers cannot be null');
        }
        $this->container['user_federation_providers'] = $user_federation_providers;

        return $this;
    }

    /**
     * Gets user_federation_mappers
     *
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\UserFederationMapperRepresentation[]|null
     */
    public function get_user_federation_mappers()
    {
        return $this->container['user_federation_mappers'];
    }

    /**
     * Sets user_federation_mappers
     *
     * @param \WebMI\KeycloakApiClient\KeycloakApi\Model\UserFederationMapperRepresentation[]|null $user_federation_mappers user_federation_mappers
     *
     * @return self
     */
    public function set_user_federation_mappers($user_federation_mappers)
    {
        if (is_null($user_federation_mappers)) {
            throw new \InvalidArgumentException('non-nullable user_federation_mappers cannot be null');
        }
        $this->container['user_federation_mappers'] = $user_federation_mappers;

        return $this;
    }

    /**
     * Gets login_theme
     *
     * @return string|null
     */
    public function get_login_theme()
    {
        return $this->container['login_theme'];
    }

    /**
     * Sets login_theme
     *
     * @param string|null $login_theme login_theme
     *
     * @return self
     */
    public function set_login_theme($login_theme)
    {
        if (is_null($login_theme)) {
            throw new \InvalidArgumentException('non-nullable login_theme cannot be null');
        }
        $this->container['login_theme'] = $login_theme;

        return $this;
    }

    /**
     * Gets account_theme
     *
     * @return string|null
     */
    public function get_account_theme()
    {
        return $this->container['account_theme'];
    }

    /**
     * Sets account_theme
     *
     * @param string|null $account_theme account_theme
     *
     * @return self
     */
    public function set_account_theme($account_theme)
    {
        if (is_null($account_theme)) {
            throw new \InvalidArgumentException('non-nullable account_theme cannot be null');
        }
        $this->container['account_theme'] = $account_theme;

        return $this;
    }

    /**
     * Gets admin_theme
     *
     * @return string|null
     */
    public function get_admin_theme()
    {
        return $this->container['admin_theme'];
    }

    /**
     * Sets admin_theme
     *
     * @param string|null $admin_theme admin_theme
     *
     * @return self
     */
    public function set_admin_theme($admin_theme)
    {
        if (is_null($admin_theme)) {
            throw new \InvalidArgumentException('non-nullable admin_theme cannot be null');
        }
        $this->container['admin_theme'] = $admin_theme;

        return $this;
    }

    /**
     * Gets email_theme
     *
     * @return string|null
     */
    public function get_email_theme()
    {
        return $this->container['email_theme'];
    }

    /**
     * Sets email_theme
     *
     * @param string|null $email_theme email_theme
     *
     * @return self
     */
    public function set_email_theme($email_theme)
    {
        if (is_null($email_theme)) {
            throw new \InvalidArgumentException('non-nullable email_theme cannot be null');
        }
        $this->container['email_theme'] = $email_theme;

        return $this;
    }

    /**
     * Gets events_enabled
     *
     * @return bool|null
     */
    public function get_events_enabled()
    {
        return $this->container['events_enabled'];
    }

    /**
     * Sets events_enabled
     *
     * @param bool|null $events_enabled events_enabled
     *
     * @return self
     */
    public function set_events_enabled($events_enabled)
    {
        if (is_null($events_enabled)) {
            throw new \InvalidArgumentException('non-nullable events_enabled cannot be null');
        }
        $this->container['events_enabled'] = $events_enabled;

        return $this;
    }

    /**
     * Gets events_expiration
     *
     * @return int|null
     */
    public function get_events_expiration()
    {
        return $this->container['events_expiration'];
    }

    /**
     * Sets events_expiration
     *
     * @param int|null $events_expiration events_expiration
     *
     * @return self
     */
    public function set_events_expiration($events_expiration)
    {
        if (is_null($events_expiration)) {
            throw new \InvalidArgumentException('non-nullable events_expiration cannot be null');
        }
        $this->container['events_expiration'] = $events_expiration;

        return $this;
    }

    /**
     * Gets events_listeners
     *
     * @return string[]|null
     */
    public function get_events_listeners()
    {
        return $this->container['events_listeners'];
    }

    /**
     * Sets events_listeners
     *
     * @param string[]|null $events_listeners events_listeners
     *
     * @return self
     */
    public function set_events_listeners($events_listeners)
    {
        if (is_null($events_listeners)) {
            throw new \InvalidArgumentException('non-nullable events_listeners cannot be null');
        }
        $this->container['events_listeners'] = $events_listeners;

        return $this;
    }

    /**
     * Gets enabled_event_types
     *
     * @return string[]|null
     */
    public function get_enabled_event_types()
    {
        return $this->container['enabled_event_types'];
    }

    /**
     * Sets enabled_event_types
     *
     * @param string[]|null $enabled_event_types enabled_event_types
     *
     * @return self
     */
    public function set_enabled_event_types($enabled_event_types)
    {
        if (is_null($enabled_event_types)) {
            throw new \InvalidArgumentException('non-nullable enabled_event_types cannot be null');
        }
        $this->container['enabled_event_types'] = $enabled_event_types;

        return $this;
    }

    /**
     * Gets admin_events_enabled
     *
     * @return bool|null
     */
    public function get_admin_events_enabled()
    {
        return $this->container['admin_events_enabled'];
    }

    /**
     * Sets admin_events_enabled
     *
     * @param bool|null $admin_events_enabled admin_events_enabled
     *
     * @return self
     */
    public function set_admin_events_enabled($admin_events_enabled)
    {
        if (is_null($admin_events_enabled)) {
            throw new \InvalidArgumentException('non-nullable admin_events_enabled cannot be null');
        }
        $this->container['admin_events_enabled'] = $admin_events_enabled;

        return $this;
    }

    /**
     * Gets admin_events_details_enabled
     *
     * @return bool|null
     */
    public function get_admin_events_details_enabled()
    {
        return $this->container['admin_events_details_enabled'];
    }

    /**
     * Sets admin_events_details_enabled
     *
     * @param bool|null $admin_events_details_enabled admin_events_details_enabled
     *
     * @return self
     */
    public function set_admin_events_details_enabled($admin_events_details_enabled)
    {
        if (is_null($admin_events_details_enabled)) {
            throw new \InvalidArgumentException('non-nullable admin_events_details_enabled cannot be null');
        }
        $this->container['admin_events_details_enabled'] = $admin_events_details_enabled;

        return $this;
    }

    /**
     * Gets identity_providers
     *
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderRepresentation[]|null
     */
    public function get_identity_providers()
    {
        return $this->container['identity_providers'];
    }

    /**
     * Sets identity_providers
     *
     * @param \WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderRepresentation[]|null $identity_providers identity_providers
     *
     * @return self
     */
    public function set_identity_providers($identity_providers)
    {
        if (is_null($identity_providers)) {
            throw new \InvalidArgumentException('non-nullable identity_providers cannot be null');
        }
        $this->container['identity_providers'] = $identity_providers;

        return $this;
    }

    /**
     * Gets identity_provider_mappers
     *
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderMapperRepresentation[]|null
     */
    public function get_identity_provider_mappers()
    {
        return $this->container['identity_provider_mappers'];
    }

    /**
     * Sets identity_provider_mappers
     *
     * @param \WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderMapperRepresentation[]|null $identity_provider_mappers identity_provider_mappers
     *
     * @return self
     */
    public function set_identity_provider_mappers($identity_provider_mappers)
    {
        if (is_null($identity_provider_mappers)) {
            throw new \InvalidArgumentException('non-nullable identity_provider_mappers cannot be null');
        }
        $this->container['identity_provider_mappers'] = $identity_provider_mappers;

        return $this;
    }

    /**
     * Gets protocol_mappers
     *
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[]|null
     */
    public function get_protocol_mappers()
    {
        return $this->container['protocol_mappers'];
    }

    /**
     * Sets protocol_mappers
     *
     * @param \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[]|null $protocol_mappers protocol_mappers
     *
     * @return self
     */
    public function set_protocol_mappers($protocol_mappers)
    {
        if (is_null($protocol_mappers)) {
            throw new \InvalidArgumentException('non-nullable protocol_mappers cannot be null');
        }
        $this->container['protocol_mappers'] = $protocol_mappers;

        return $this;
    }

    /**
     * Gets components
     *
     * @return array<string,\WebMI\KeycloakApiClient\KeycloakApi\Model\ComponentExportRepresentation[]>|null
     */
    public function get_components()
    {
        return $this->container['components'];
    }

    /**
     * Sets components
     *
     * @param array<string,\WebMI\KeycloakApiClient\KeycloakApi\Model\ComponentExportRepresentation[]>|null $components components
     *
     * @return self
     */
    public function set_components($components)
    {
        if (is_null($components)) {
            throw new \InvalidArgumentException('non-nullable components cannot be null');
        }
        $this->container['components'] = $components;

        return $this;
    }

    /**
     * Gets internationalization_enabled
     *
     * @return bool|null
     */
    public function get_internationalization_enabled()
    {
        return $this->container['internationalization_enabled'];
    }

    /**
     * Sets internationalization_enabled
     *
     * @param bool|null $internationalization_enabled internationalization_enabled
     *
     * @return self
     */
    public function set_internationalization_enabled($internationalization_enabled)
    {
        if (is_null($internationalization_enabled)) {
            throw new \InvalidArgumentException('non-nullable internationalization_enabled cannot be null');
        }
        $this->container['internationalization_enabled'] = $internationalization_enabled;

        return $this;
    }

    /**
     * Gets supported_locales
     *
     * @return string[]|null
     */
    public function get_supported_locales()
    {
        return $this->container['supported_locales'];
    }

    /**
     * Sets supported_locales
     *
     * @param string[]|null $supported_locales supported_locales
     *
     * @return self
     */
    public function set_supported_locales($supported_locales)
    {
        if (is_null($supported_locales)) {
            throw new \InvalidArgumentException('non-nullable supported_locales cannot be null');
        }


        $this->container['supported_locales'] = $supported_locales;

        return $this;
    }

    /**
     * Gets default_locale
     *
     * @return string|null
     */
    public function get_default_locale()
    {
        return $this->container['default_locale'];
    }

    /**
     * Sets default_locale
     *
     * @param string|null $default_locale default_locale
     *
     * @return self
     */
    public function set_default_locale($default_locale)
    {
        if (is_null($default_locale)) {
            throw new \InvalidArgumentException('non-nullable default_locale cannot be null');
        }
        $this->container['default_locale'] = $default_locale;

        return $this;
    }

    /**
     * Gets authentication_flows
     *
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\AuthenticationFlowRepresentation[]|null
     */
    public function get_authentication_flows()
    {
        return $this->container['authentication_flows'];
    }

    /**
     * Sets authentication_flows
     *
     * @param \WebMI\KeycloakApiClient\KeycloakApi\Model\AuthenticationFlowRepresentation[]|null $authentication_flows authentication_flows
     *
     * @return self
     */
    public function set_authentication_flows($authentication_flows)
    {
        if (is_null($authentication_flows)) {
            throw new \InvalidArgumentException('non-nullable authentication_flows cannot be null');
        }
        $this->container['authentication_flows'] = $authentication_flows;

        return $this;
    }

    /**
     * Gets authenticator_config
     *
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\AuthenticatorConfigRepresentation[]|null
     */
    public function get_authenticator_config()
    {
        return $this->container['authenticator_config'];
    }

    /**
     * Sets authenticator_config
     *
     * @param \WebMI\KeycloakApiClient\KeycloakApi\Model\AuthenticatorConfigRepresentation[]|null $authenticator_config authenticator_config
     *
     * @return self
     */
    public function set_authenticator_config($authenticator_config)
    {
        if (is_null($authenticator_config)) {
            throw new \InvalidArgumentException('non-nullable authenticator_config cannot be null');
        }
        $this->container['authenticator_config'] = $authenticator_config;

        return $this;
    }

    /**
     * Gets required_actions
     *
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\RequiredActionProviderRepresentation[]|null
     */
    public function get_required_actions()
    {
        return $this->container['required_actions'];
    }

    /**
     * Sets required_actions
     *
     * @param \WebMI\KeycloakApiClient\KeycloakApi\Model\RequiredActionProviderRepresentation[]|null $required_actions required_actions
     *
     * @return self
     */
    public function set_required_actions($required_actions)
    {
        if (is_null($required_actions)) {
            throw new \InvalidArgumentException('non-nullable required_actions cannot be null');
        }
        $this->container['required_actions'] = $required_actions;

        return $this;
    }

    /**
     * Gets browser_flow
     *
     * @return string|null
     */
    public function get_browser_flow()
    {
        return $this->container['browser_flow'];
    }

    /**
     * Sets browser_flow
     *
     * @param string|null $browser_flow browser_flow
     *
     * @return self
     */
    public function set_browser_flow($browser_flow)
    {
        if (is_null($browser_flow)) {
            throw new \InvalidArgumentException('non-nullable browser_flow cannot be null');
        }
        $this->container['browser_flow'] = $browser_flow;

        return $this;
    }

    /**
     * Gets registration_flow
     *
     * @return string|null
     */
    public function get_registration_flow()
    {
        return $this->container['registration_flow'];
    }

    /**
     * Sets registration_flow
     *
     * @param string|null $registration_flow registration_flow
     *
     * @return self
     */
    public function set_registration_flow($registration_flow)
    {
        if (is_null($registration_flow)) {
            throw new \InvalidArgumentException('non-nullable registration_flow cannot be null');
        }
        $this->container['registration_flow'] = $registration_flow;

        return $this;
    }

    /**
     * Gets direct_grant_flow
     *
     * @return string|null
     */
    public function get_direct_grant_flow()
    {
        return $this->container['direct_grant_flow'];
    }

    /**
     * Sets direct_grant_flow
     *
     * @param string|null $direct_grant_flow direct_grant_flow
     *
     * @return self
     */
    public function set_direct_grant_flow($direct_grant_flow)
    {
        if (is_null($direct_grant_flow)) {
            throw new \InvalidArgumentException('non-nullable direct_grant_flow cannot be null');
        }
        $this->container['direct_grant_flow'] = $direct_grant_flow;

        return $this;
    }

    /**
     * Gets reset_credentials_flow
     *
     * @return string|null
     */
    public function get_reset_credentials_flow()
    {
        return $this->container['reset_credentials_flow'];
    }

    /**
     * Sets reset_credentials_flow
     *
     * @param string|null $reset_credentials_flow reset_credentials_flow
     *
     * @return self
     */
    public function set_reset_credentials_flow($reset_credentials_flow)
    {
        if (is_null($reset_credentials_flow)) {
            throw new \InvalidArgumentException('non-nullable reset_credentials_flow cannot be null');
        }
        $this->container['reset_credentials_flow'] = $reset_credentials_flow;

        return $this;
    }

    /**
     * Gets client_authentication_flow
     *
     * @return string|null
     */
    public function get_client_authentication_flow()
    {
        return $this->container['client_authentication_flow'];
    }

    /**
     * Sets client_authentication_flow
     *
     * @param string|null $client_authentication_flow client_authentication_flow
     *
     * @return self
     */
    public function set_client_authentication_flow($client_authentication_flow)
    {
        if (is_null($client_authentication_flow)) {
            throw new \InvalidArgumentException('non-nullable client_authentication_flow cannot be null');
        }
        $this->container['client_authentication_flow'] = $client_authentication_flow;

        return $this;
    }

    /**
     * Gets docker_authentication_flow
     *
     * @return string|null
     */
    public function get_docker_authentication_flow()
    {
        return $this->container['docker_authentication_flow'];
    }

    /**
     * Sets docker_authentication_flow
     *
     * @param string|null $docker_authentication_flow docker_authentication_flow
     *
     * @return self
     */
    public function set_docker_authentication_flow($docker_authentication_flow)
    {
        if (is_null($docker_authentication_flow)) {
            throw new \InvalidArgumentException('non-nullable docker_authentication_flow cannot be null');
        }
        $this->container['docker_authentication_flow'] = $docker_authentication_flow;

        return $this;
    }

    /**
     * Gets first_broker_login_flow
     *
     * @return string|null
     */
    public function get_first_broker_login_flow()
    {
        return $this->container['first_broker_login_flow'];
    }

    /**
     * Sets first_broker_login_flow
     *
     * @param string|null $first_broker_login_flow first_broker_login_flow
     *
     * @return self
     */
    public function set_first_broker_login_flow($first_broker_login_flow)
    {
        if (is_null($first_broker_login_flow)) {
            throw new \InvalidArgumentException('non-nullable first_broker_login_flow cannot be null');
        }
        $this->container['first_broker_login_flow'] = $first_broker_login_flow;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return array<string,string>|null
     */
    public function get_attributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param array<string,string>|null $attributes attributes
     *
     * @return self
     */
    public function set_attributes($attributes)
    {
        if (is_null($attributes)) {
            throw new \InvalidArgumentException('non-nullable attributes cannot be null');
        }
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets keycloak_version
     *
     * @return string|null
     */
    public function get_keycloak_version()
    {
        return $this->container['keycloak_version'];
    }

    /**
     * Sets keycloak_version
     *
     * @param string|null $keycloak_version keycloak_version
     *
     * @return self
     */
    public function set_keycloak_version($keycloak_version)
    {
        if (is_null($keycloak_version)) {
            throw new \InvalidArgumentException('non-nullable keycloak_version cannot be null');
        }
        $this->container['keycloak_version'] = $keycloak_version;

        return $this;
    }

    /**
     * Gets user_managed_access_allowed
     *
     * @return bool|null
     */
    public function get_user_managed_access_allowed()
    {
        return $this->container['user_managed_access_allowed'];
    }

    /**
     * Sets user_managed_access_allowed
     *
     * @param bool|null $user_managed_access_allowed user_managed_access_allowed
     *
     * @return self
     */
    public function set_user_managed_access_allowed($user_managed_access_allowed)
    {
        if (is_null($user_managed_access_allowed)) {
            throw new \InvalidArgumentException('non-nullable user_managed_access_allowed cannot be null');
        }
        $this->container['user_managed_access_allowed'] = $user_managed_access_allowed;

        return $this;
    }

    /**
     * Gets organizations_enabled
     *
     * @return bool|null
     */
    public function get_organizations_enabled()
    {
        return $this->container['organizations_enabled'];
    }

    /**
     * Sets organizations_enabled
     *
     * @param bool|null $organizations_enabled organizations_enabled
     *
     * @return self
     */
    public function set_organizations_enabled($organizations_enabled)
    {
        if (is_null($organizations_enabled)) {
            throw new \InvalidArgumentException('non-nullable organizations_enabled cannot be null');
        }
        $this->container['organizations_enabled'] = $organizations_enabled;

        return $this;
    }

    /**
     * Gets organizations
     *
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\OrganizationRepresentation[]|null
     */
    public function get_organizations()
    {
        return $this->container['organizations'];
    }

    /**
     * Sets organizations
     *
     * @param \WebMI\KeycloakApiClient\KeycloakApi\Model\OrganizationRepresentation[]|null $organizations organizations
     *
     * @return self
     */
    public function set_organizations($organizations)
    {
        if (is_null($organizations)) {
            throw new \InvalidArgumentException('non-nullable organizations cannot be null');
        }
        $this->container['organizations'] = $organizations;

        return $this;
    }

    /**
     * Gets social
     *
     * @return bool|null
     * @deprecated
     */
    public function get_social()
    {
        return $this->container['social'];
    }

    /**
     * Sets social
     *
     * @param bool|null $social social
     *
     * @return self
     * @deprecated
     */
    public function set_social($social)
    {
        if (is_null($social)) {
            throw new \InvalidArgumentException('non-nullable social cannot be null');
        }
        $this->container['social'] = $social;

        return $this;
    }

    /**
     * Gets update_profile_on_initial_social_login
     *
     * @return bool|null
     * @deprecated
     */
    public function get_update_profile_on_initial_social_login()
    {
        return $this->container['update_profile_on_initial_social_login'];
    }

    /**
     * Sets update_profile_on_initial_social_login
     *
     * @param bool|null $update_profile_on_initial_social_login update_profile_on_initial_social_login
     *
     * @return self
     * @deprecated
     */
    public function set_update_profile_on_initial_social_login($update_profile_on_initial_social_login)
    {
        if (is_null($update_profile_on_initial_social_login)) {
            throw new \InvalidArgumentException('non-nullable update_profile_on_initial_social_login cannot be null');
        }
        $this->container['update_profile_on_initial_social_login'] = $update_profile_on_initial_social_login;

        return $this;
    }

    /**
     * Gets social_providers
     *
     * @return array<string,string>|null
     * @deprecated
     */
    public function get_social_providers()
    {
        return $this->container['social_providers'];
    }

    /**
     * Sets social_providers
     *
     * @param array<string,string>|null $social_providers social_providers
     *
     * @return self
     * @deprecated
     */
    public function set_social_providers($social_providers)
    {
        if (is_null($social_providers)) {
            throw new \InvalidArgumentException('non-nullable social_providers cannot be null');
        }
        $this->container['social_providers'] = $social_providers;

        return $this;
    }

    /**
     * Gets application_scope_mappings
     *
     * @return array<string,\WebMI\KeycloakApiClient\KeycloakApi\Model\ScopeMappingRepresentation[]>|null
     * @deprecated
     */
    public function get_application_scope_mappings()
    {
        return $this->container['application_scope_mappings'];
    }

    /**
     * Sets application_scope_mappings
     *
     * @param array<string,\WebMI\KeycloakApiClient\KeycloakApi\Model\ScopeMappingRepresentation[]>|null $application_scope_mappings application_scope_mappings
     *
     * @return self
     * @deprecated
     */
    public function set_application_scope_mappings($application_scope_mappings)
    {
        if (is_null($application_scope_mappings)) {
            throw new \InvalidArgumentException('non-nullable application_scope_mappings cannot be null');
        }
        $this->container['application_scope_mappings'] = $application_scope_mappings;

        return $this;
    }

    /**
     * Gets applications
     *
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\ApplicationRepresentation[]|null
     * @deprecated
     */
    public function get_applications()
    {
        return $this->container['applications'];
    }

    /**
     * Sets applications
     *
     * @param \WebMI\KeycloakApiClient\KeycloakApi\Model\ApplicationRepresentation[]|null $applications applications
     *
     * @return self
     * @deprecated
     */
    public function set_applications($applications)
    {
        if (is_null($applications)) {
            throw new \InvalidArgumentException('non-nullable applications cannot be null');
        }
        $this->container['applications'] = $applications;

        return $this;
    }

    /**
     * Gets oauth_clients
     *
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\OAuthClientRepresentation[]|null
     * @deprecated
     */
    public function get_oauth_clients()
    {
        return $this->container['oauth_clients'];
    }

    /**
     * Sets oauth_clients
     *
     * @param \WebMI\KeycloakApiClient\KeycloakApi\Model\OAuthClientRepresentation[]|null $oauth_clients oauth_clients
     *
     * @return self
     * @deprecated
     */
    public function set_oauth_clients($oauth_clients)
    {
        if (is_null($oauth_clients)) {
            throw new \InvalidArgumentException('non-nullable oauth_clients cannot be null');
        }
        $this->container['oauth_clients'] = $oauth_clients;

        return $this;
    }

    /**
     * Gets client_templates
     *
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\ClientTemplateRepresentation[]|null
     * @deprecated
     */
    public function get_client_templates()
    {
        return $this->container['client_templates'];
    }

    /**
     * Sets client_templates
     *
     * @param \WebMI\KeycloakApiClient\KeycloakApi\Model\ClientTemplateRepresentation[]|null $client_templates client_templates
     *
     * @return self
     * @deprecated
     */
    public function set_client_templates($client_templates)
    {
        if (is_null($client_templates)) {
            throw new \InvalidArgumentException('non-nullable client_templates cannot be null');
        }
        $this->container['client_templates'] = $client_templates;

        return $this;
    }

    /**
     * Gets o_auth2_device_code_lifespan
     *
     * @return int|null
     */
    public function get_o_auth2_device_code_lifespan()
    {
        return $this->container['o_auth2_device_code_lifespan'];
    }

    /**
     * Sets o_auth2_device_code_lifespan
     *
     * @param int|null $o_auth2_device_code_lifespan o_auth2_device_code_lifespan
     *
     * @return self
     */
    public function set_o_auth2_device_code_lifespan($o_auth2_device_code_lifespan)
    {
        if (is_null($o_auth2_device_code_lifespan)) {
            throw new \InvalidArgumentException('non-nullable o_auth2_device_code_lifespan cannot be null');
        }
        $this->container['o_auth2_device_code_lifespan'] = $o_auth2_device_code_lifespan;

        return $this;
    }

    /**
     * Gets o_auth2_device_polling_interval
     *
     * @return int|null
     */
    public function get_o_auth2_device_polling_interval()
    {
        return $this->container['o_auth2_device_polling_interval'];
    }

    /**
     * Sets o_auth2_device_polling_interval
     *
     * @param int|null $o_auth2_device_polling_interval o_auth2_device_polling_interval
     *
     * @return self
     */
    public function set_o_auth2_device_polling_interval($o_auth2_device_polling_interval)
    {
        if (is_null($o_auth2_device_polling_interval)) {
            throw new \InvalidArgumentException('non-nullable o_auth2_device_polling_interval cannot be null');
        }
        $this->container['o_auth2_device_polling_interval'] = $o_auth2_device_polling_interval;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


