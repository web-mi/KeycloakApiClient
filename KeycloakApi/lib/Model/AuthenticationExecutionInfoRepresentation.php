<?php
/**
 * AuthenticationExecutionInfoRepresentation
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace WebMI\KeycloakApiClient\KeycloakApi\Model;

use \ArrayAccess;
use \WebMI\KeycloakApiClient\KeycloakApi\ObjectSerializer;

/**
 * AuthenticationExecutionInfoRepresentation Class Doc Comment
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AuthenticationExecutionInfoRepresentation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AuthenticationExecutionInfoRepresentation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'requirement' => 'string',
        'display_name' => 'string',
        'alias' => 'string',
        'description' => 'string',
        'requirement_choices' => 'string[]',
        'configurable' => 'bool',
        'authentication_flow' => 'bool',
        'provider_id' => 'string',
        'authentication_config' => 'string',
        'flow_id' => 'string',
        'level' => 'int',
        'index' => 'int',
        'priority' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'requirement' => null,
        'display_name' => null,
        'alias' => null,
        'description' => null,
        'requirement_choices' => null,
        'configurable' => null,
        'authentication_flow' => null,
        'provider_id' => null,
        'authentication_config' => null,
        'flow_id' => null,
        'level' => 'int32',
        'index' => 'int32',
        'priority' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'requirement' => false,
        'display_name' => false,
        'alias' => false,
        'description' => false,
        'requirement_choices' => false,
        'configurable' => false,
        'authentication_flow' => false,
        'provider_id' => false,
        'authentication_config' => false,
        'flow_id' => false,
        'level' => false,
        'index' => false,
        'priority' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'requirement' => 'requirement',
        'display_name' => 'displayName',
        'alias' => 'alias',
        'description' => 'description',
        'requirement_choices' => 'requirementChoices',
        'configurable' => 'configurable',
        'authentication_flow' => 'authenticationFlow',
        'provider_id' => 'providerId',
        'authentication_config' => 'authenticationConfig',
        'flow_id' => 'flowId',
        'level' => 'level',
        'index' => 'index',
        'priority' => 'priority'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'requirement' => 'setRequirement',
        'display_name' => 'setDisplayName',
        'alias' => 'setAlias',
        'description' => 'setDescription',
        'requirement_choices' => 'setRequirementChoices',
        'configurable' => 'setConfigurable',
        'authentication_flow' => 'setAuthenticationFlow',
        'provider_id' => 'setProviderId',
        'authentication_config' => 'setAuthenticationConfig',
        'flow_id' => 'setFlowId',
        'level' => 'setLevel',
        'index' => 'setIndex',
        'priority' => 'setPriority'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'requirement' => 'getRequirement',
        'display_name' => 'getDisplayName',
        'alias' => 'getAlias',
        'description' => 'getDescription',
        'requirement_choices' => 'getRequirementChoices',
        'configurable' => 'getConfigurable',
        'authentication_flow' => 'getAuthenticationFlow',
        'provider_id' => 'getProviderId',
        'authentication_config' => 'getAuthenticationConfig',
        'flow_id' => 'getFlowId',
        'level' => 'getLevel',
        'index' => 'getIndex',
        'priority' => 'getPriority'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('requirement', $data ?? [], null);
        $this->setIfExists('display_name', $data ?? [], null);
        $this->setIfExists('alias', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('requirement_choices', $data ?? [], null);
        $this->setIfExists('configurable', $data ?? [], null);
        $this->setIfExists('authentication_flow', $data ?? [], null);
        $this->setIfExists('provider_id', $data ?? [], null);
        $this->setIfExists('authentication_config', $data ?? [], null);
        $this->setIfExists('flow_id', $data ?? [], null);
        $this->setIfExists('level', $data ?? [], null);
        $this->setIfExists('index', $data ?? [], null);
        $this->setIfExists('priority', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets requirement
     *
     * @return string|null
     */
    public function getRequirement()
    {
        return $this->container['requirement'];
    }

    /**
     * Sets requirement
     *
     * @param string|null $requirement requirement
     *
     * @return self
     */
    public function setRequirement($requirement)
    {
        if (is_null($requirement)) {
            throw new \InvalidArgumentException('non-nullable requirement cannot be null');
        }
        $this->container['requirement'] = $requirement;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string|null $display_name display_name
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {
        if (is_null($display_name)) {
            throw new \InvalidArgumentException('non-nullable display_name cannot be null');
        }
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets alias
     *
     * @return string|null
     */
    public function getAlias()
    {
        return $this->container['alias'];
    }

    /**
     * Sets alias
     *
     * @param string|null $alias alias
     *
     * @return self
     */
    public function setAlias($alias)
    {
        if (is_null($alias)) {
            throw new \InvalidArgumentException('non-nullable alias cannot be null');
        }
        $this->container['alias'] = $alias;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets requirement_choices
     *
     * @return string[]|null
     */
    public function getRequirementChoices()
    {
        return $this->container['requirement_choices'];
    }

    /**
     * Sets requirement_choices
     *
     * @param string[]|null $requirement_choices requirement_choices
     *
     * @return self
     */
    public function setRequirementChoices($requirement_choices)
    {
        if (is_null($requirement_choices)) {
            throw new \InvalidArgumentException('non-nullable requirement_choices cannot be null');
        }
        $this->container['requirement_choices'] = $requirement_choices;

        return $this;
    }

    /**
     * Gets configurable
     *
     * @return bool|null
     */
    public function getConfigurable()
    {
        return $this->container['configurable'];
    }

    /**
     * Sets configurable
     *
     * @param bool|null $configurable configurable
     *
     * @return self
     */
    public function setConfigurable($configurable)
    {
        if (is_null($configurable)) {
            throw new \InvalidArgumentException('non-nullable configurable cannot be null');
        }
        $this->container['configurable'] = $configurable;

        return $this;
    }

    /**
     * Gets authentication_flow
     *
     * @return bool|null
     */
    public function getAuthenticationFlow()
    {
        return $this->container['authentication_flow'];
    }

    /**
     * Sets authentication_flow
     *
     * @param bool|null $authentication_flow authentication_flow
     *
     * @return self
     */
    public function setAuthenticationFlow($authentication_flow)
    {
        if (is_null($authentication_flow)) {
            throw new \InvalidArgumentException('non-nullable authentication_flow cannot be null');
        }
        $this->container['authentication_flow'] = $authentication_flow;

        return $this;
    }

    /**
     * Gets provider_id
     *
     * @return string|null
     */
    public function getProviderId()
    {
        return $this->container['provider_id'];
    }

    /**
     * Sets provider_id
     *
     * @param string|null $provider_id provider_id
     *
     * @return self
     */
    public function setProviderId($provider_id)
    {
        if (is_null($provider_id)) {
            throw new \InvalidArgumentException('non-nullable provider_id cannot be null');
        }
        $this->container['provider_id'] = $provider_id;

        return $this;
    }

    /**
     * Gets authentication_config
     *
     * @return string|null
     */
    public function getAuthenticationConfig()
    {
        return $this->container['authentication_config'];
    }

    /**
     * Sets authentication_config
     *
     * @param string|null $authentication_config authentication_config
     *
     * @return self
     */
    public function setAuthenticationConfig($authentication_config)
    {
        if (is_null($authentication_config)) {
            throw new \InvalidArgumentException('non-nullable authentication_config cannot be null');
        }
        $this->container['authentication_config'] = $authentication_config;

        return $this;
    }

    /**
     * Gets flow_id
     *
     * @return string|null
     */
    public function getFlowId()
    {
        return $this->container['flow_id'];
    }

    /**
     * Sets flow_id
     *
     * @param string|null $flow_id flow_id
     *
     * @return self
     */
    public function setFlowId($flow_id)
    {
        if (is_null($flow_id)) {
            throw new \InvalidArgumentException('non-nullable flow_id cannot be null');
        }
        $this->container['flow_id'] = $flow_id;

        return $this;
    }

    /**
     * Gets level
     *
     * @return int|null
     */
    public function getLevel()
    {
        return $this->container['level'];
    }

    /**
     * Sets level
     *
     * @param int|null $level level
     *
     * @return self
     */
    public function setLevel($level)
    {
        if (is_null($level)) {
            throw new \InvalidArgumentException('non-nullable level cannot be null');
        }
        $this->container['level'] = $level;

        return $this;
    }

    /**
     * Gets index
     *
     * @return int|null
     */
    public function getIndex()
    {
        return $this->container['index'];
    }

    /**
     * Sets index
     *
     * @param int|null $index index
     *
     * @return self
     */
    public function setIndex($index)
    {
        if (is_null($index)) {
            throw new \InvalidArgumentException('non-nullable index cannot be null');
        }
        $this->container['index'] = $index;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int|null
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int|null $priority priority
     *
     * @return self
     */
    public function setPriority($priority)
    {
        if (is_null($priority)) {
            throw new \InvalidArgumentException('non-nullable priority cannot be null');
        }
        $this->container['priority'] = $priority;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


