<?php
/**
 * IdentityProviderRepresentation
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace WebMI\KeycloakApiClient\KeycloakApi\Model;

use \ArrayAccess;
use \WebMI\KeycloakApiClient\KeycloakApi\ObjectSerializer;

/**
 * IdentityProviderRepresentation Class Doc Comment
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class IdentityProviderRepresentation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'IdentityProviderRepresentation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'alias' => 'string',
        'display_name' => 'string',
        'internal_id' => 'string',
        'provider_id' => 'string',
        'enabled' => 'bool',
        'update_profile_first_login_mode' => 'string',
        'trust_email' => 'bool',
        'store_token' => 'bool',
        'add_read_token_role_on_create' => 'bool',
        'authenticate_by_default' => 'bool',
        'link_only' => 'bool',
        'hide_on_login' => 'bool',
        'first_broker_login_flow_alias' => 'string',
        'post_broker_login_flow_alias' => 'string',
        'organization_id' => 'string',
        'config' => 'array<string,string>',
        'update_profile_first_login' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'alias' => null,
        'display_name' => null,
        'internal_id' => null,
        'provider_id' => null,
        'enabled' => null,
        'update_profile_first_login_mode' => null,
        'trust_email' => null,
        'store_token' => null,
        'add_read_token_role_on_create' => null,
        'authenticate_by_default' => null,
        'link_only' => null,
        'hide_on_login' => null,
        'first_broker_login_flow_alias' => null,
        'post_broker_login_flow_alias' => null,
        'organization_id' => null,
        'config' => null,
        'update_profile_first_login' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'alias' => false,
        'display_name' => false,
        'internal_id' => false,
        'provider_id' => false,
        'enabled' => false,
        'update_profile_first_login_mode' => false,
        'trust_email' => false,
        'store_token' => false,
        'add_read_token_role_on_create' => false,
        'authenticate_by_default' => false,
        'link_only' => false,
        'hide_on_login' => false,
        'first_broker_login_flow_alias' => false,
        'post_broker_login_flow_alias' => false,
        'organization_id' => false,
        'config' => false,
        'update_profile_first_login' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'alias' => 'alias',
        'display_name' => 'displayName',
        'internal_id' => 'internalId',
        'provider_id' => 'providerId',
        'enabled' => 'enabled',
        'update_profile_first_login_mode' => 'updateProfileFirstLoginMode',
        'trust_email' => 'trustEmail',
        'store_token' => 'storeToken',
        'add_read_token_role_on_create' => 'addReadTokenRoleOnCreate',
        'authenticate_by_default' => 'authenticateByDefault',
        'link_only' => 'linkOnly',
        'hide_on_login' => 'hideOnLogin',
        'first_broker_login_flow_alias' => 'firstBrokerLoginFlowAlias',
        'post_broker_login_flow_alias' => 'postBrokerLoginFlowAlias',
        'organization_id' => 'organizationId',
        'config' => 'config',
        'update_profile_first_login' => 'updateProfileFirstLogin'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'alias' => 'setAlias',
        'display_name' => 'setDisplayName',
        'internal_id' => 'setInternalId',
        'provider_id' => 'setProviderId',
        'enabled' => 'setEnabled',
        'update_profile_first_login_mode' => 'setUpdateProfileFirstLoginMode',
        'trust_email' => 'setTrustEmail',
        'store_token' => 'setStoreToken',
        'add_read_token_role_on_create' => 'setAddReadTokenRoleOnCreate',
        'authenticate_by_default' => 'setAuthenticateByDefault',
        'link_only' => 'setLinkOnly',
        'hide_on_login' => 'setHideOnLogin',
        'first_broker_login_flow_alias' => 'setFirstBrokerLoginFlowAlias',
        'post_broker_login_flow_alias' => 'setPostBrokerLoginFlowAlias',
        'organization_id' => 'setOrganizationId',
        'config' => 'setConfig',
        'update_profile_first_login' => 'setUpdateProfileFirstLogin'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'alias' => 'getAlias',
        'display_name' => 'getDisplayName',
        'internal_id' => 'getInternalId',
        'provider_id' => 'getProviderId',
        'enabled' => 'getEnabled',
        'update_profile_first_login_mode' => 'getUpdateProfileFirstLoginMode',
        'trust_email' => 'getTrustEmail',
        'store_token' => 'getStoreToken',
        'add_read_token_role_on_create' => 'getAddReadTokenRoleOnCreate',
        'authenticate_by_default' => 'getAuthenticateByDefault',
        'link_only' => 'getLinkOnly',
        'hide_on_login' => 'getHideOnLogin',
        'first_broker_login_flow_alias' => 'getFirstBrokerLoginFlowAlias',
        'post_broker_login_flow_alias' => 'getPostBrokerLoginFlowAlias',
        'organization_id' => 'getOrganizationId',
        'config' => 'getConfig',
        'update_profile_first_login' => 'getUpdateProfileFirstLogin'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('alias', $data ?? [], null);
        $this->setIfExists('display_name', $data ?? [], null);
        $this->setIfExists('internal_id', $data ?? [], null);
        $this->setIfExists('provider_id', $data ?? [], null);
        $this->setIfExists('enabled', $data ?? [], null);
        $this->setIfExists('update_profile_first_login_mode', $data ?? [], null);
        $this->setIfExists('trust_email', $data ?? [], null);
        $this->setIfExists('store_token', $data ?? [], null);
        $this->setIfExists('add_read_token_role_on_create', $data ?? [], null);
        $this->setIfExists('authenticate_by_default', $data ?? [], null);
        $this->setIfExists('link_only', $data ?? [], null);
        $this->setIfExists('hide_on_login', $data ?? [], null);
        $this->setIfExists('first_broker_login_flow_alias', $data ?? [], null);
        $this->setIfExists('post_broker_login_flow_alias', $data ?? [], null);
        $this->setIfExists('organization_id', $data ?? [], null);
        $this->setIfExists('config', $data ?? [], null);
        $this->setIfExists('update_profile_first_login', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets alias
     *
     * @return string|null
     */
    public function getAlias()
    {
        return $this->container['alias'];
    }

    /**
     * Sets alias
     *
     * @param string|null $alias alias
     *
     * @return self
     */
    public function setAlias($alias)
    {
        if (is_null($alias)) {
            throw new \InvalidArgumentException('non-nullable alias cannot be null');
        }
        $this->container['alias'] = $alias;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string|null $display_name display_name
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {
        if (is_null($display_name)) {
            throw new \InvalidArgumentException('non-nullable display_name cannot be null');
        }
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets internal_id
     *
     * @return string|null
     */
    public function getInternalId()
    {
        return $this->container['internal_id'];
    }

    /**
     * Sets internal_id
     *
     * @param string|null $internal_id internal_id
     *
     * @return self
     */
    public function setInternalId($internal_id)
    {
        if (is_null($internal_id)) {
            throw new \InvalidArgumentException('non-nullable internal_id cannot be null');
        }
        $this->container['internal_id'] = $internal_id;

        return $this;
    }

    /**
     * Gets provider_id
     *
     * @return string|null
     */
    public function getProviderId()
    {
        return $this->container['provider_id'];
    }

    /**
     * Sets provider_id
     *
     * @param string|null $provider_id provider_id
     *
     * @return self
     */
    public function setProviderId($provider_id)
    {
        if (is_null($provider_id)) {
            throw new \InvalidArgumentException('non-nullable provider_id cannot be null');
        }
        $this->container['provider_id'] = $provider_id;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled enabled
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        if (is_null($enabled)) {
            throw new \InvalidArgumentException('non-nullable enabled cannot be null');
        }
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets update_profile_first_login_mode
     *
     * @return string|null
     * @deprecated
     */
    public function getUpdateProfileFirstLoginMode()
    {
        return $this->container['update_profile_first_login_mode'];
    }

    /**
     * Sets update_profile_first_login_mode
     *
     * @param string|null $update_profile_first_login_mode update_profile_first_login_mode
     *
     * @return self
     * @deprecated
     */
    public function setUpdateProfileFirstLoginMode($update_profile_first_login_mode)
    {
        if (is_null($update_profile_first_login_mode)) {
            throw new \InvalidArgumentException('non-nullable update_profile_first_login_mode cannot be null');
        }
        $this->container['update_profile_first_login_mode'] = $update_profile_first_login_mode;

        return $this;
    }

    /**
     * Gets trust_email
     *
     * @return bool|null
     */
    public function getTrustEmail()
    {
        return $this->container['trust_email'];
    }

    /**
     * Sets trust_email
     *
     * @param bool|null $trust_email trust_email
     *
     * @return self
     */
    public function setTrustEmail($trust_email)
    {
        if (is_null($trust_email)) {
            throw new \InvalidArgumentException('non-nullable trust_email cannot be null');
        }
        $this->container['trust_email'] = $trust_email;

        return $this;
    }

    /**
     * Gets store_token
     *
     * @return bool|null
     */
    public function getStoreToken()
    {
        return $this->container['store_token'];
    }

    /**
     * Sets store_token
     *
     * @param bool|null $store_token store_token
     *
     * @return self
     */
    public function setStoreToken($store_token)
    {
        if (is_null($store_token)) {
            throw new \InvalidArgumentException('non-nullable store_token cannot be null');
        }
        $this->container['store_token'] = $store_token;

        return $this;
    }

    /**
     * Gets add_read_token_role_on_create
     *
     * @return bool|null
     */
    public function getAddReadTokenRoleOnCreate()
    {
        return $this->container['add_read_token_role_on_create'];
    }

    /**
     * Sets add_read_token_role_on_create
     *
     * @param bool|null $add_read_token_role_on_create add_read_token_role_on_create
     *
     * @return self
     */
    public function setAddReadTokenRoleOnCreate($add_read_token_role_on_create)
    {
        if (is_null($add_read_token_role_on_create)) {
            throw new \InvalidArgumentException('non-nullable add_read_token_role_on_create cannot be null');
        }
        $this->container['add_read_token_role_on_create'] = $add_read_token_role_on_create;

        return $this;
    }

    /**
     * Gets authenticate_by_default
     *
     * @return bool|null
     */
    public function getAuthenticateByDefault()
    {
        return $this->container['authenticate_by_default'];
    }

    /**
     * Sets authenticate_by_default
     *
     * @param bool|null $authenticate_by_default authenticate_by_default
     *
     * @return self
     */
    public function setAuthenticateByDefault($authenticate_by_default)
    {
        if (is_null($authenticate_by_default)) {
            throw new \InvalidArgumentException('non-nullable authenticate_by_default cannot be null');
        }
        $this->container['authenticate_by_default'] = $authenticate_by_default;

        return $this;
    }

    /**
     * Gets link_only
     *
     * @return bool|null
     */
    public function getLinkOnly()
    {
        return $this->container['link_only'];
    }

    /**
     * Sets link_only
     *
     * @param bool|null $link_only link_only
     *
     * @return self
     */
    public function setLinkOnly($link_only)
    {
        if (is_null($link_only)) {
            throw new \InvalidArgumentException('non-nullable link_only cannot be null');
        }
        $this->container['link_only'] = $link_only;

        return $this;
    }

    /**
     * Gets hide_on_login
     *
     * @return bool|null
     */
    public function getHideOnLogin()
    {
        return $this->container['hide_on_login'];
    }

    /**
     * Sets hide_on_login
     *
     * @param bool|null $hide_on_login hide_on_login
     *
     * @return self
     */
    public function setHideOnLogin($hide_on_login)
    {
        if (is_null($hide_on_login)) {
            throw new \InvalidArgumentException('non-nullable hide_on_login cannot be null');
        }
        $this->container['hide_on_login'] = $hide_on_login;

        return $this;
    }

    /**
     * Gets first_broker_login_flow_alias
     *
     * @return string|null
     */
    public function getFirstBrokerLoginFlowAlias()
    {
        return $this->container['first_broker_login_flow_alias'];
    }

    /**
     * Sets first_broker_login_flow_alias
     *
     * @param string|null $first_broker_login_flow_alias first_broker_login_flow_alias
     *
     * @return self
     */
    public function setFirstBrokerLoginFlowAlias($first_broker_login_flow_alias)
    {
        if (is_null($first_broker_login_flow_alias)) {
            throw new \InvalidArgumentException('non-nullable first_broker_login_flow_alias cannot be null');
        }
        $this->container['first_broker_login_flow_alias'] = $first_broker_login_flow_alias;

        return $this;
    }

    /**
     * Gets post_broker_login_flow_alias
     *
     * @return string|null
     */
    public function getPostBrokerLoginFlowAlias()
    {
        return $this->container['post_broker_login_flow_alias'];
    }

    /**
     * Sets post_broker_login_flow_alias
     *
     * @param string|null $post_broker_login_flow_alias post_broker_login_flow_alias
     *
     * @return self
     */
    public function setPostBrokerLoginFlowAlias($post_broker_login_flow_alias)
    {
        if (is_null($post_broker_login_flow_alias)) {
            throw new \InvalidArgumentException('non-nullable post_broker_login_flow_alias cannot be null');
        }
        $this->container['post_broker_login_flow_alias'] = $post_broker_login_flow_alias;

        return $this;
    }

    /**
     * Gets organization_id
     *
     * @return string|null
     */
    public function getOrganizationId()
    {
        return $this->container['organization_id'];
    }

    /**
     * Sets organization_id
     *
     * @param string|null $organization_id organization_id
     *
     * @return self
     */
    public function setOrganizationId($organization_id)
    {
        if (is_null($organization_id)) {
            throw new \InvalidArgumentException('non-nullable organization_id cannot be null');
        }
        $this->container['organization_id'] = $organization_id;

        return $this;
    }

    /**
     * Gets config
     *
     * @return array<string,string>|null
     */
    public function getConfig()
    {
        return $this->container['config'];
    }

    /**
     * Sets config
     *
     * @param array<string,string>|null $config config
     *
     * @return self
     */
    public function setConfig($config)
    {
        if (is_null($config)) {
            throw new \InvalidArgumentException('non-nullable config cannot be null');
        }
        $this->container['config'] = $config;

        return $this;
    }

    /**
     * Gets update_profile_first_login
     *
     * @return bool|null
     * @deprecated
     */
    public function getUpdateProfileFirstLogin()
    {
        return $this->container['update_profile_first_login'];
    }

    /**
     * Sets update_profile_first_login
     *
     * @param bool|null $update_profile_first_login update_profile_first_login
     *
     * @return self
     * @deprecated
     */
    public function setUpdateProfileFirstLogin($update_profile_first_login)
    {
        if (is_null($update_profile_first_login)) {
            throw new \InvalidArgumentException('non-nullable update_profile_first_login cannot be null');
        }
        $this->container['update_profile_first_login'] = $update_profile_first_login;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


