<?php
/**
 * PolicyEnforcerConfig
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace WebMI\KeycloakApiClient\KeycloakApi\Model;

use \ArrayAccess;
use \WebMI\KeycloakApiClient\KeycloakApi\ObjectSerializer;

/**
 * PolicyEnforcerConfig Class Doc Comment
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PolicyEnforcerConfig implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PolicyEnforcerConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'enforcement_mode' => '\WebMI\KeycloakApiClient\KeycloakApi\Model\EnforcementMode',
        'paths' => '\WebMI\KeycloakApiClient\KeycloakApi\Model\PathConfig[]',
        'path_cache' => '\WebMI\KeycloakApiClient\KeycloakApi\Model\PathCacheConfig',
        'lazy_load_paths' => 'bool',
        'on_deny_redirect_to' => 'string',
        'user_managed_access' => 'object',
        'claim_information_point' => 'array<string,array<string,mixed>>',
        'http_method_as_scope' => 'bool',
        'realm' => 'string',
        'auth_server_url' => 'string',
        'credentials' => 'array<string,mixed>',
        'resource' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'enforcement_mode' => null,
        'paths' => null,
        'path_cache' => null,
        'lazy_load_paths' => null,
        'on_deny_redirect_to' => null,
        'user_managed_access' => null,
        'claim_information_point' => null,
        'http_method_as_scope' => null,
        'realm' => null,
        'auth_server_url' => null,
        'credentials' => null,
        'resource' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'enforcement_mode' => false,
        'paths' => false,
        'path_cache' => false,
        'lazy_load_paths' => false,
        'on_deny_redirect_to' => false,
        'user_managed_access' => false,
        'claim_information_point' => false,
        'http_method_as_scope' => false,
        'realm' => false,
        'auth_server_url' => false,
        'credentials' => false,
        'resource' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'enforcement_mode' => 'enforcement-mode',
        'paths' => 'paths',
        'path_cache' => 'path-cache',
        'lazy_load_paths' => 'lazy-load-paths',
        'on_deny_redirect_to' => 'on-deny-redirect-to',
        'user_managed_access' => 'user-managed-access',
        'claim_information_point' => 'claim-information-point',
        'http_method_as_scope' => 'http-method-as-scope',
        'realm' => 'realm',
        'auth_server_url' => 'auth-server-url',
        'credentials' => 'credentials',
        'resource' => 'resource'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'enforcement_mode' => 'set_enforcement_mode',
        'paths' => 'set_paths',
        'path_cache' => 'set_path_cache',
        'lazy_load_paths' => 'set_lazy_load_paths',
        'on_deny_redirect_to' => 'set_on_deny_redirect_to',
        'user_managed_access' => 'set_user_managed_access',
        'claim_information_point' => 'set_claim_information_point',
        'http_method_as_scope' => 'set_http_method_as_scope',
        'realm' => 'set_realm',
        'auth_server_url' => 'set_auth_server_url',
        'credentials' => 'set_credentials',
        'resource' => 'set_resource'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'enforcement_mode' => 'get_enforcement_mode',
        'paths' => 'get_paths',
        'path_cache' => 'get_path_cache',
        'lazy_load_paths' => 'get_lazy_load_paths',
        'on_deny_redirect_to' => 'get_on_deny_redirect_to',
        'user_managed_access' => 'get_user_managed_access',
        'claim_information_point' => 'get_claim_information_point',
        'http_method_as_scope' => 'get_http_method_as_scope',
        'realm' => 'get_realm',
        'auth_server_url' => 'get_auth_server_url',
        'credentials' => 'get_credentials',
        'resource' => 'get_resource'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('enforcement_mode', $data ?? [], null);
        $this->setIfExists('paths', $data ?? [], null);
        $this->setIfExists('path_cache', $data ?? [], null);
        $this->setIfExists('lazy_load_paths', $data ?? [], null);
        $this->setIfExists('on_deny_redirect_to', $data ?? [], null);
        $this->setIfExists('user_managed_access', $data ?? [], null);
        $this->setIfExists('claim_information_point', $data ?? [], null);
        $this->setIfExists('http_method_as_scope', $data ?? [], null);
        $this->setIfExists('realm', $data ?? [], null);
        $this->setIfExists('auth_server_url', $data ?? [], null);
        $this->setIfExists('credentials', $data ?? [], null);
        $this->setIfExists('resource', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets enforcement_mode
     *
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\EnforcementMode|null
     */
    public function get_enforcement_mode()
    {
        return $this->container['enforcement_mode'];
    }

    /**
     * Sets enforcement_mode
     *
     * @param \WebMI\KeycloakApiClient\KeycloakApi\Model\EnforcementMode|null $enforcement_mode enforcement_mode
     *
     * @return self
     */
    public function set_enforcement_mode($enforcement_mode)
    {
        if (is_null($enforcement_mode)) {
            throw new \InvalidArgumentException('non-nullable enforcement_mode cannot be null');
        }
        $this->container['enforcement_mode'] = $enforcement_mode;

        return $this;
    }

    /**
     * Gets paths
     *
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\PathConfig[]|null
     */
    public function get_paths()
    {
        return $this->container['paths'];
    }

    /**
     * Sets paths
     *
     * @param \WebMI\KeycloakApiClient\KeycloakApi\Model\PathConfig[]|null $paths paths
     *
     * @return self
     */
    public function set_paths($paths)
    {
        if (is_null($paths)) {
            throw new \InvalidArgumentException('non-nullable paths cannot be null');
        }
        $this->container['paths'] = $paths;

        return $this;
    }

    /**
     * Gets path_cache
     *
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\PathCacheConfig|null
     */
    public function get_path_cache()
    {
        return $this->container['path_cache'];
    }

    /**
     * Sets path_cache
     *
     * @param \WebMI\KeycloakApiClient\KeycloakApi\Model\PathCacheConfig|null $path_cache path_cache
     *
     * @return self
     */
    public function set_path_cache($path_cache)
    {
        if (is_null($path_cache)) {
            throw new \InvalidArgumentException('non-nullable path_cache cannot be null');
        }
        $this->container['path_cache'] = $path_cache;

        return $this;
    }

    /**
     * Gets lazy_load_paths
     *
     * @return bool|null
     */
    public function get_lazy_load_paths()
    {
        return $this->container['lazy_load_paths'];
    }

    /**
     * Sets lazy_load_paths
     *
     * @param bool|null $lazy_load_paths lazy_load_paths
     *
     * @return self
     */
    public function set_lazy_load_paths($lazy_load_paths)
    {
        if (is_null($lazy_load_paths)) {
            throw new \InvalidArgumentException('non-nullable lazy_load_paths cannot be null');
        }
        $this->container['lazy_load_paths'] = $lazy_load_paths;

        return $this;
    }

    /**
     * Gets on_deny_redirect_to
     *
     * @return string|null
     */
    public function get_on_deny_redirect_to()
    {
        return $this->container['on_deny_redirect_to'];
    }

    /**
     * Sets on_deny_redirect_to
     *
     * @param string|null $on_deny_redirect_to on_deny_redirect_to
     *
     * @return self
     */
    public function set_on_deny_redirect_to($on_deny_redirect_to)
    {
        if (is_null($on_deny_redirect_to)) {
            throw new \InvalidArgumentException('non-nullable on_deny_redirect_to cannot be null');
        }
        $this->container['on_deny_redirect_to'] = $on_deny_redirect_to;

        return $this;
    }

    /**
     * Gets user_managed_access
     *
     * @return object|null
     */
    public function get_user_managed_access()
    {
        return $this->container['user_managed_access'];
    }

    /**
     * Sets user_managed_access
     *
     * @param object|null $user_managed_access user_managed_access
     *
     * @return self
     */
    public function set_user_managed_access($user_managed_access)
    {
        if (is_null($user_managed_access)) {
            throw new \InvalidArgumentException('non-nullable user_managed_access cannot be null');
        }
        $this->container['user_managed_access'] = $user_managed_access;

        return $this;
    }

    /**
     * Gets claim_information_point
     *
     * @return array<string,array<string,mixed>>|null
     */
    public function get_claim_information_point()
    {
        return $this->container['claim_information_point'];
    }

    /**
     * Sets claim_information_point
     *
     * @param array<string,array<string,mixed>>|null $claim_information_point claim_information_point
     *
     * @return self
     */
    public function set_claim_information_point($claim_information_point)
    {
        if (is_null($claim_information_point)) {
            throw new \InvalidArgumentException('non-nullable claim_information_point cannot be null');
        }
        $this->container['claim_information_point'] = $claim_information_point;

        return $this;
    }

    /**
     * Gets http_method_as_scope
     *
     * @return bool|null
     */
    public function get_http_method_as_scope()
    {
        return $this->container['http_method_as_scope'];
    }

    /**
     * Sets http_method_as_scope
     *
     * @param bool|null $http_method_as_scope http_method_as_scope
     *
     * @return self
     */
    public function set_http_method_as_scope($http_method_as_scope)
    {
        if (is_null($http_method_as_scope)) {
            throw new \InvalidArgumentException('non-nullable http_method_as_scope cannot be null');
        }
        $this->container['http_method_as_scope'] = $http_method_as_scope;

        return $this;
    }

    /**
     * Gets realm
     *
     * @return string|null
     */
    public function get_realm()
    {
        return $this->container['realm'];
    }

    /**
     * Sets realm
     *
     * @param string|null $realm realm
     *
     * @return self
     */
    public function set_realm($realm)
    {
        if (is_null($realm)) {
            throw new \InvalidArgumentException('non-nullable realm cannot be null');
        }
        $this->container['realm'] = $realm;

        return $this;
    }

    /**
     * Gets auth_server_url
     *
     * @return string|null
     */
    public function get_auth_server_url()
    {
        return $this->container['auth_server_url'];
    }

    /**
     * Sets auth_server_url
     *
     * @param string|null $auth_server_url auth_server_url
     *
     * @return self
     */
    public function set_auth_server_url($auth_server_url)
    {
        if (is_null($auth_server_url)) {
            throw new \InvalidArgumentException('non-nullable auth_server_url cannot be null');
        }
        $this->container['auth_server_url'] = $auth_server_url;

        return $this;
    }

    /**
     * Gets credentials
     *
     * @return array<string,mixed>|null
     */
    public function get_credentials()
    {
        return $this->container['credentials'];
    }

    /**
     * Sets credentials
     *
     * @param array<string,mixed>|null $credentials credentials
     *
     * @return self
     */
    public function set_credentials($credentials)
    {
        if (is_null($credentials)) {
            throw new \InvalidArgumentException('non-nullable credentials cannot be null');
        }
        $this->container['credentials'] = $credentials;

        return $this;
    }

    /**
     * Gets resource
     *
     * @return string|null
     */
    public function get_resource()
    {
        return $this->container['resource'];
    }

    /**
     * Sets resource
     *
     * @param string|null $resource resource
     *
     * @return self
     */
    public function set_resource($resource)
    {
        if (is_null($resource)) {
            throw new \InvalidArgumentException('non-nullable resource cannot be null');
        }
        $this->container['resource'] = $resource;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


