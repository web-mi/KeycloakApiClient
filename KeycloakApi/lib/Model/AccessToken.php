<?php
/**
 * AccessToken
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace WebMI\KeycloakApiClient\KeycloakApi\Model;

use \ArrayAccess;
use \WebMI\KeycloakApiClient\KeycloakApi\ObjectSerializer;

/**
 * AccessToken Class Doc Comment
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AccessToken implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AccessToken';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'jti' => 'string',
        'exp' => 'int',
        'nbf' => 'int',
        'iat' => 'int',
        'iss' => 'string',
        'sub' => 'string',
        'typ' => 'string',
        'azp' => 'string',
        'other_claims' => 'array<string,mixed>',
        'nonce' => 'string',
        'auth_time' => 'int',
        'sid' => 'string',
        'at_hash' => 'string',
        'c_hash' => 'string',
        'name' => 'string',
        'given_name' => 'string',
        'family_name' => 'string',
        'middle_name' => 'string',
        'nickname' => 'string',
        'preferred_username' => 'string',
        'profile' => 'string',
        'picture' => 'string',
        'website' => 'string',
        'email' => 'string',
        'email_verified' => 'bool',
        'gender' => 'string',
        'birthdate' => 'string',
        'zoneinfo' => 'string',
        'locale' => 'string',
        'phone_number' => 'string',
        'phone_number_verified' => 'bool',
        'address' => '\WebMI\KeycloakApiClient\KeycloakApi\Model\AddressClaimSet',
        'updated_at' => 'int',
        'claims_locales' => 'string',
        'acr' => 'string',
        's_hash' => 'string',
        'trusted_certs' => 'string[]',
        'allowed_origins' => 'string[]',
        'realm_access' => '\WebMI\KeycloakApiClient\KeycloakApi\Model\Access',
        'resource_access' => 'array<string,\WebMI\KeycloakApiClient\KeycloakApi\Model\Access>',
        'authorization' => '\WebMI\KeycloakApiClient\KeycloakApi\Model\Authorization',
        'cnf' => '\WebMI\KeycloakApiClient\KeycloakApi\Model\Confirmation',
        'scope' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'jti' => null,
        'exp' => 'int64',
        'nbf' => 'int64',
        'iat' => 'int64',
        'iss' => null,
        'sub' => null,
        'typ' => null,
        'azp' => null,
        'other_claims' => null,
        'nonce' => null,
        'auth_time' => 'int64',
        'sid' => null,
        'at_hash' => null,
        'c_hash' => null,
        'name' => null,
        'given_name' => null,
        'family_name' => null,
        'middle_name' => null,
        'nickname' => null,
        'preferred_username' => null,
        'profile' => null,
        'picture' => null,
        'website' => null,
        'email' => null,
        'email_verified' => null,
        'gender' => null,
        'birthdate' => null,
        'zoneinfo' => null,
        'locale' => null,
        'phone_number' => null,
        'phone_number_verified' => null,
        'address' => null,
        'updated_at' => 'int64',
        'claims_locales' => null,
        'acr' => null,
        's_hash' => null,
        'trusted_certs' => null,
        'allowed_origins' => null,
        'realm_access' => null,
        'resource_access' => null,
        'authorization' => null,
        'cnf' => null,
        'scope' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'jti' => false,
        'exp' => false,
        'nbf' => false,
        'iat' => false,
        'iss' => false,
        'sub' => false,
        'typ' => false,
        'azp' => false,
        'other_claims' => false,
        'nonce' => false,
        'auth_time' => false,
        'sid' => false,
        'at_hash' => false,
        'c_hash' => false,
        'name' => false,
        'given_name' => false,
        'family_name' => false,
        'middle_name' => false,
        'nickname' => false,
        'preferred_username' => false,
        'profile' => false,
        'picture' => false,
        'website' => false,
        'email' => false,
        'email_verified' => false,
        'gender' => false,
        'birthdate' => false,
        'zoneinfo' => false,
        'locale' => false,
        'phone_number' => false,
        'phone_number_verified' => false,
        'address' => false,
        'updated_at' => false,
        'claims_locales' => false,
        'acr' => false,
        's_hash' => false,
        'trusted_certs' => false,
        'allowed_origins' => false,
        'realm_access' => false,
        'resource_access' => false,
        'authorization' => false,
        'cnf' => false,
        'scope' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'jti' => 'jti',
        'exp' => 'exp',
        'nbf' => 'nbf',
        'iat' => 'iat',
        'iss' => 'iss',
        'sub' => 'sub',
        'typ' => 'typ',
        'azp' => 'azp',
        'other_claims' => 'otherClaims',
        'nonce' => 'nonce',
        'auth_time' => 'auth_time',
        'sid' => 'sid',
        'at_hash' => 'at_hash',
        'c_hash' => 'c_hash',
        'name' => 'name',
        'given_name' => 'given_name',
        'family_name' => 'family_name',
        'middle_name' => 'middle_name',
        'nickname' => 'nickname',
        'preferred_username' => 'preferred_username',
        'profile' => 'profile',
        'picture' => 'picture',
        'website' => 'website',
        'email' => 'email',
        'email_verified' => 'email_verified',
        'gender' => 'gender',
        'birthdate' => 'birthdate',
        'zoneinfo' => 'zoneinfo',
        'locale' => 'locale',
        'phone_number' => 'phone_number',
        'phone_number_verified' => 'phone_number_verified',
        'address' => 'address',
        'updated_at' => 'updated_at',
        'claims_locales' => 'claims_locales',
        'acr' => 'acr',
        's_hash' => 's_hash',
        'trusted_certs' => 'trusted-certs',
        'allowed_origins' => 'allowed-origins',
        'realm_access' => 'realm_access',
        'resource_access' => 'resource_access',
        'authorization' => 'authorization',
        'cnf' => 'cnf',
        'scope' => 'scope'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'jti' => 'set_jti',
        'exp' => 'set_exp',
        'nbf' => 'set_nbf',
        'iat' => 'set_iat',
        'iss' => 'set_iss',
        'sub' => 'set_sub',
        'typ' => 'set_typ',
        'azp' => 'set_azp',
        'other_claims' => 'set_other_claims',
        'nonce' => 'set_nonce',
        'auth_time' => 'set_auth_time',
        'sid' => 'set_sid',
        'at_hash' => 'set_at_hash',
        'c_hash' => 'set_c_hash',
        'name' => 'set_name',
        'given_name' => 'set_given_name',
        'family_name' => 'set_family_name',
        'middle_name' => 'set_middle_name',
        'nickname' => 'set_nickname',
        'preferred_username' => 'set_preferred_username',
        'profile' => 'set_profile',
        'picture' => 'set_picture',
        'website' => 'set_website',
        'email' => 'set_email',
        'email_verified' => 'set_email_verified',
        'gender' => 'set_gender',
        'birthdate' => 'set_birthdate',
        'zoneinfo' => 'set_zoneinfo',
        'locale' => 'set_locale',
        'phone_number' => 'set_phone_number',
        'phone_number_verified' => 'set_phone_number_verified',
        'address' => 'set_address',
        'updated_at' => 'set_updated_at',
        'claims_locales' => 'set_claims_locales',
        'acr' => 'set_acr',
        's_hash' => 'set_s_hash',
        'trusted_certs' => 'set_trusted_certs',
        'allowed_origins' => 'set_allowed_origins',
        'realm_access' => 'set_realm_access',
        'resource_access' => 'set_resource_access',
        'authorization' => 'set_authorization',
        'cnf' => 'set_cnf',
        'scope' => 'set_scope'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'jti' => 'get_jti',
        'exp' => 'get_exp',
        'nbf' => 'get_nbf',
        'iat' => 'get_iat',
        'iss' => 'get_iss',
        'sub' => 'get_sub',
        'typ' => 'get_typ',
        'azp' => 'get_azp',
        'other_claims' => 'get_other_claims',
        'nonce' => 'get_nonce',
        'auth_time' => 'get_auth_time',
        'sid' => 'get_sid',
        'at_hash' => 'get_at_hash',
        'c_hash' => 'get_c_hash',
        'name' => 'get_name',
        'given_name' => 'get_given_name',
        'family_name' => 'get_family_name',
        'middle_name' => 'get_middle_name',
        'nickname' => 'get_nickname',
        'preferred_username' => 'get_preferred_username',
        'profile' => 'get_profile',
        'picture' => 'get_picture',
        'website' => 'get_website',
        'email' => 'get_email',
        'email_verified' => 'get_email_verified',
        'gender' => 'get_gender',
        'birthdate' => 'get_birthdate',
        'zoneinfo' => 'get_zoneinfo',
        'locale' => 'get_locale',
        'phone_number' => 'get_phone_number',
        'phone_number_verified' => 'get_phone_number_verified',
        'address' => 'get_address',
        'updated_at' => 'get_updated_at',
        'claims_locales' => 'get_claims_locales',
        'acr' => 'get_acr',
        's_hash' => 'get_s_hash',
        'trusted_certs' => 'get_trusted_certs',
        'allowed_origins' => 'get_allowed_origins',
        'realm_access' => 'get_realm_access',
        'resource_access' => 'get_resource_access',
        'authorization' => 'get_authorization',
        'cnf' => 'get_cnf',
        'scope' => 'get_scope'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('jti', $data ?? [], null);
        $this->setIfExists('exp', $data ?? [], null);
        $this->setIfExists('nbf', $data ?? [], null);
        $this->setIfExists('iat', $data ?? [], null);
        $this->setIfExists('iss', $data ?? [], null);
        $this->setIfExists('sub', $data ?? [], null);
        $this->setIfExists('typ', $data ?? [], null);
        $this->setIfExists('azp', $data ?? [], null);
        $this->setIfExists('other_claims', $data ?? [], null);
        $this->setIfExists('nonce', $data ?? [], null);
        $this->setIfExists('auth_time', $data ?? [], null);
        $this->setIfExists('sid', $data ?? [], null);
        $this->setIfExists('at_hash', $data ?? [], null);
        $this->setIfExists('c_hash', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('given_name', $data ?? [], null);
        $this->setIfExists('family_name', $data ?? [], null);
        $this->setIfExists('middle_name', $data ?? [], null);
        $this->setIfExists('nickname', $data ?? [], null);
        $this->setIfExists('preferred_username', $data ?? [], null);
        $this->setIfExists('profile', $data ?? [], null);
        $this->setIfExists('picture', $data ?? [], null);
        $this->setIfExists('website', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('email_verified', $data ?? [], null);
        $this->setIfExists('gender', $data ?? [], null);
        $this->setIfExists('birthdate', $data ?? [], null);
        $this->setIfExists('zoneinfo', $data ?? [], null);
        $this->setIfExists('locale', $data ?? [], null);
        $this->setIfExists('phone_number', $data ?? [], null);
        $this->setIfExists('phone_number_verified', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('claims_locales', $data ?? [], null);
        $this->setIfExists('acr', $data ?? [], null);
        $this->setIfExists('s_hash', $data ?? [], null);
        $this->setIfExists('trusted_certs', $data ?? [], null);
        $this->setIfExists('allowed_origins', $data ?? [], null);
        $this->setIfExists('realm_access', $data ?? [], null);
        $this->setIfExists('resource_access', $data ?? [], null);
        $this->setIfExists('authorization', $data ?? [], null);
        $this->setIfExists('cnf', $data ?? [], null);
        $this->setIfExists('scope', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets jti
     *
     * @return string|null
     */
    public function get_jti()
    {
        return $this->container['jti'];
    }

    /**
     * Sets jti
     *
     * @param string|null $jti jti
     *
     * @return self
     */
    public function set_jti($jti)
    {
        if (is_null($jti)) {
            throw new \InvalidArgumentException('non-nullable jti cannot be null');
        }
        $this->container['jti'] = $jti;

        return $this;
    }

    /**
     * Gets exp
     *
     * @return int|null
     */
    public function get_exp()
    {
        return $this->container['exp'];
    }

    /**
     * Sets exp
     *
     * @param int|null $exp exp
     *
     * @return self
     */
    public function set_exp($exp)
    {
        if (is_null($exp)) {
            throw new \InvalidArgumentException('non-nullable exp cannot be null');
        }
        $this->container['exp'] = $exp;

        return $this;
    }

    /**
     * Gets nbf
     *
     * @return int|null
     */
    public function get_nbf()
    {
        return $this->container['nbf'];
    }

    /**
     * Sets nbf
     *
     * @param int|null $nbf nbf
     *
     * @return self
     */
    public function set_nbf($nbf)
    {
        if (is_null($nbf)) {
            throw new \InvalidArgumentException('non-nullable nbf cannot be null');
        }
        $this->container['nbf'] = $nbf;

        return $this;
    }

    /**
     * Gets iat
     *
     * @return int|null
     */
    public function get_iat()
    {
        return $this->container['iat'];
    }

    /**
     * Sets iat
     *
     * @param int|null $iat iat
     *
     * @return self
     */
    public function set_iat($iat)
    {
        if (is_null($iat)) {
            throw new \InvalidArgumentException('non-nullable iat cannot be null');
        }
        $this->container['iat'] = $iat;

        return $this;
    }

    /**
     * Gets iss
     *
     * @return string|null
     */
    public function get_iss()
    {
        return $this->container['iss'];
    }

    /**
     * Sets iss
     *
     * @param string|null $iss iss
     *
     * @return self
     */
    public function set_iss($iss)
    {
        if (is_null($iss)) {
            throw new \InvalidArgumentException('non-nullable iss cannot be null');
        }
        $this->container['iss'] = $iss;

        return $this;
    }

    /**
     * Gets sub
     *
     * @return string|null
     */
    public function get_sub()
    {
        return $this->container['sub'];
    }

    /**
     * Sets sub
     *
     * @param string|null $sub sub
     *
     * @return self
     */
    public function set_sub($sub)
    {
        if (is_null($sub)) {
            throw new \InvalidArgumentException('non-nullable sub cannot be null');
        }
        $this->container['sub'] = $sub;

        return $this;
    }

    /**
     * Gets typ
     *
     * @return string|null
     */
    public function get_typ()
    {
        return $this->container['typ'];
    }

    /**
     * Sets typ
     *
     * @param string|null $typ typ
     *
     * @return self
     */
    public function set_typ($typ)
    {
        if (is_null($typ)) {
            throw new \InvalidArgumentException('non-nullable typ cannot be null');
        }
        $this->container['typ'] = $typ;

        return $this;
    }

    /**
     * Gets azp
     *
     * @return string|null
     */
    public function get_azp()
    {
        return $this->container['azp'];
    }

    /**
     * Sets azp
     *
     * @param string|null $azp azp
     *
     * @return self
     */
    public function set_azp($azp)
    {
        if (is_null($azp)) {
            throw new \InvalidArgumentException('non-nullable azp cannot be null');
        }
        $this->container['azp'] = $azp;

        return $this;
    }

    /**
     * Gets other_claims
     *
     * @return array<string,mixed>|null
     */
    public function get_other_claims()
    {
        return $this->container['other_claims'];
    }

    /**
     * Sets other_claims
     *
     * @param array<string,mixed>|null $other_claims other_claims
     *
     * @return self
     */
    public function set_other_claims($other_claims)
    {
        if (is_null($other_claims)) {
            throw new \InvalidArgumentException('non-nullable other_claims cannot be null');
        }
        $this->container['other_claims'] = $other_claims;

        return $this;
    }

    /**
     * Gets nonce
     *
     * @return string|null
     */
    public function get_nonce()
    {
        return $this->container['nonce'];
    }

    /**
     * Sets nonce
     *
     * @param string|null $nonce nonce
     *
     * @return self
     */
    public function set_nonce($nonce)
    {
        if (is_null($nonce)) {
            throw new \InvalidArgumentException('non-nullable nonce cannot be null');
        }
        $this->container['nonce'] = $nonce;

        return $this;
    }

    /**
     * Gets auth_time
     *
     * @return int|null
     */
    public function get_auth_time()
    {
        return $this->container['auth_time'];
    }

    /**
     * Sets auth_time
     *
     * @param int|null $auth_time auth_time
     *
     * @return self
     */
    public function set_auth_time($auth_time)
    {
        if (is_null($auth_time)) {
            throw new \InvalidArgumentException('non-nullable auth_time cannot be null');
        }
        $this->container['auth_time'] = $auth_time;

        return $this;
    }

    /**
     * Gets sid
     *
     * @return string|null
     */
    public function get_sid()
    {
        return $this->container['sid'];
    }

    /**
     * Sets sid
     *
     * @param string|null $sid sid
     *
     * @return self
     */
    public function set_sid($sid)
    {
        if (is_null($sid)) {
            throw new \InvalidArgumentException('non-nullable sid cannot be null');
        }
        $this->container['sid'] = $sid;

        return $this;
    }

    /**
     * Gets at_hash
     *
     * @return string|null
     */
    public function get_at_hash()
    {
        return $this->container['at_hash'];
    }

    /**
     * Sets at_hash
     *
     * @param string|null $at_hash at_hash
     *
     * @return self
     */
    public function set_at_hash($at_hash)
    {
        if (is_null($at_hash)) {
            throw new \InvalidArgumentException('non-nullable at_hash cannot be null');
        }
        $this->container['at_hash'] = $at_hash;

        return $this;
    }

    /**
     * Gets c_hash
     *
     * @return string|null
     */
    public function get_c_hash()
    {
        return $this->container['c_hash'];
    }

    /**
     * Sets c_hash
     *
     * @param string|null $c_hash c_hash
     *
     * @return self
     */
    public function set_c_hash($c_hash)
    {
        if (is_null($c_hash)) {
            throw new \InvalidArgumentException('non-nullable c_hash cannot be null');
        }
        $this->container['c_hash'] = $c_hash;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function get_name()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function set_name($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets given_name
     *
     * @return string|null
     */
    public function get_given_name()
    {
        return $this->container['given_name'];
    }

    /**
     * Sets given_name
     *
     * @param string|null $given_name given_name
     *
     * @return self
     */
    public function set_given_name($given_name)
    {
        if (is_null($given_name)) {
            throw new \InvalidArgumentException('non-nullable given_name cannot be null');
        }
        $this->container['given_name'] = $given_name;

        return $this;
    }

    /**
     * Gets family_name
     *
     * @return string|null
     */
    public function get_family_name()
    {
        return $this->container['family_name'];
    }

    /**
     * Sets family_name
     *
     * @param string|null $family_name family_name
     *
     * @return self
     */
    public function set_family_name($family_name)
    {
        if (is_null($family_name)) {
            throw new \InvalidArgumentException('non-nullable family_name cannot be null');
        }
        $this->container['family_name'] = $family_name;

        return $this;
    }

    /**
     * Gets middle_name
     *
     * @return string|null
     */
    public function get_middle_name()
    {
        return $this->container['middle_name'];
    }

    /**
     * Sets middle_name
     *
     * @param string|null $middle_name middle_name
     *
     * @return self
     */
    public function set_middle_name($middle_name)
    {
        if (is_null($middle_name)) {
            throw new \InvalidArgumentException('non-nullable middle_name cannot be null');
        }
        $this->container['middle_name'] = $middle_name;

        return $this;
    }

    /**
     * Gets nickname
     *
     * @return string|null
     */
    public function get_nickname()
    {
        return $this->container['nickname'];
    }

    /**
     * Sets nickname
     *
     * @param string|null $nickname nickname
     *
     * @return self
     */
    public function set_nickname($nickname)
    {
        if (is_null($nickname)) {
            throw new \InvalidArgumentException('non-nullable nickname cannot be null');
        }
        $this->container['nickname'] = $nickname;

        return $this;
    }

    /**
     * Gets preferred_username
     *
     * @return string|null
     */
    public function get_preferred_username()
    {
        return $this->container['preferred_username'];
    }

    /**
     * Sets preferred_username
     *
     * @param string|null $preferred_username preferred_username
     *
     * @return self
     */
    public function set_preferred_username($preferred_username)
    {
        if (is_null($preferred_username)) {
            throw new \InvalidArgumentException('non-nullable preferred_username cannot be null');
        }
        $this->container['preferred_username'] = $preferred_username;

        return $this;
    }

    /**
     * Gets profile
     *
     * @return string|null
     */
    public function get_profile()
    {
        return $this->container['profile'];
    }

    /**
     * Sets profile
     *
     * @param string|null $profile profile
     *
     * @return self
     */
    public function set_profile($profile)
    {
        if (is_null($profile)) {
            throw new \InvalidArgumentException('non-nullable profile cannot be null');
        }
        $this->container['profile'] = $profile;

        return $this;
    }

    /**
     * Gets picture
     *
     * @return string|null
     */
    public function get_picture()
    {
        return $this->container['picture'];
    }

    /**
     * Sets picture
     *
     * @param string|null $picture picture
     *
     * @return self
     */
    public function set_picture($picture)
    {
        if (is_null($picture)) {
            throw new \InvalidArgumentException('non-nullable picture cannot be null');
        }
        $this->container['picture'] = $picture;

        return $this;
    }

    /**
     * Gets website
     *
     * @return string|null
     */
    public function get_website()
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     *
     * @param string|null $website website
     *
     * @return self
     */
    public function set_website($website)
    {
        if (is_null($website)) {
            throw new \InvalidArgumentException('non-nullable website cannot be null');
        }
        $this->container['website'] = $website;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function get_email()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function set_email($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets email_verified
     *
     * @return bool|null
     */
    public function get_email_verified()
    {
        return $this->container['email_verified'];
    }

    /**
     * Sets email_verified
     *
     * @param bool|null $email_verified email_verified
     *
     * @return self
     */
    public function set_email_verified($email_verified)
    {
        if (is_null($email_verified)) {
            throw new \InvalidArgumentException('non-nullable email_verified cannot be null');
        }
        $this->container['email_verified'] = $email_verified;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string|null
     */
    public function get_gender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string|null $gender gender
     *
     * @return self
     */
    public function set_gender($gender)
    {
        if (is_null($gender)) {
            throw new \InvalidArgumentException('non-nullable gender cannot be null');
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets birthdate
     *
     * @return string|null
     */
    public function get_birthdate()
    {
        return $this->container['birthdate'];
    }

    /**
     * Sets birthdate
     *
     * @param string|null $birthdate birthdate
     *
     * @return self
     */
    public function set_birthdate($birthdate)
    {
        if (is_null($birthdate)) {
            throw new \InvalidArgumentException('non-nullable birthdate cannot be null');
        }
        $this->container['birthdate'] = $birthdate;

        return $this;
    }

    /**
     * Gets zoneinfo
     *
     * @return string|null
     */
    public function get_zoneinfo()
    {
        return $this->container['zoneinfo'];
    }

    /**
     * Sets zoneinfo
     *
     * @param string|null $zoneinfo zoneinfo
     *
     * @return self
     */
    public function set_zoneinfo($zoneinfo)
    {
        if (is_null($zoneinfo)) {
            throw new \InvalidArgumentException('non-nullable zoneinfo cannot be null');
        }
        $this->container['zoneinfo'] = $zoneinfo;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string|null
     */
    public function get_locale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string|null $locale locale
     *
     * @return self
     */
    public function set_locale($locale)
    {
        if (is_null($locale)) {
            throw new \InvalidArgumentException('non-nullable locale cannot be null');
        }
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string|null
     */
    public function get_phone_number()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string|null $phone_number phone_number
     *
     * @return self
     */
    public function set_phone_number($phone_number)
    {
        if (is_null($phone_number)) {
            throw new \InvalidArgumentException('non-nullable phone_number cannot be null');
        }
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets phone_number_verified
     *
     * @return bool|null
     */
    public function get_phone_number_verified()
    {
        return $this->container['phone_number_verified'];
    }

    /**
     * Sets phone_number_verified
     *
     * @param bool|null $phone_number_verified phone_number_verified
     *
     * @return self
     */
    public function set_phone_number_verified($phone_number_verified)
    {
        if (is_null($phone_number_verified)) {
            throw new \InvalidArgumentException('non-nullable phone_number_verified cannot be null');
        }
        $this->container['phone_number_verified'] = $phone_number_verified;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\AddressClaimSet|null
     */
    public function get_address()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \WebMI\KeycloakApiClient\KeycloakApi\Model\AddressClaimSet|null $address address
     *
     * @return self
     */
    public function set_address($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return int|null
     */
    public function get_updated_at()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param int|null $updated_at updated_at
     *
     * @return self
     */
    public function set_updated_at($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets claims_locales
     *
     * @return string|null
     */
    public function get_claims_locales()
    {
        return $this->container['claims_locales'];
    }

    /**
     * Sets claims_locales
     *
     * @param string|null $claims_locales claims_locales
     *
     * @return self
     */
    public function set_claims_locales($claims_locales)
    {
        if (is_null($claims_locales)) {
            throw new \InvalidArgumentException('non-nullable claims_locales cannot be null');
        }
        $this->container['claims_locales'] = $claims_locales;

        return $this;
    }

    /**
     * Gets acr
     *
     * @return string|null
     */
    public function get_acr()
    {
        return $this->container['acr'];
    }

    /**
     * Sets acr
     *
     * @param string|null $acr acr
     *
     * @return self
     */
    public function set_acr($acr)
    {
        if (is_null($acr)) {
            throw new \InvalidArgumentException('non-nullable acr cannot be null');
        }
        $this->container['acr'] = $acr;

        return $this;
    }

    /**
     * Gets s_hash
     *
     * @return string|null
     */
    public function get_s_hash()
    {
        return $this->container['s_hash'];
    }

    /**
     * Sets s_hash
     *
     * @param string|null $s_hash s_hash
     *
     * @return self
     */
    public function set_s_hash($s_hash)
    {
        if (is_null($s_hash)) {
            throw new \InvalidArgumentException('non-nullable s_hash cannot be null');
        }
        $this->container['s_hash'] = $s_hash;

        return $this;
    }

    /**
     * Gets trusted_certs
     *
     * @return string[]|null
     */
    public function get_trusted_certs()
    {
        return $this->container['trusted_certs'];
    }

    /**
     * Sets trusted_certs
     *
     * @param string[]|null $trusted_certs trusted_certs
     *
     * @return self
     */
    public function set_trusted_certs($trusted_certs)
    {
        if (is_null($trusted_certs)) {
            throw new \InvalidArgumentException('non-nullable trusted_certs cannot be null');
        }


        $this->container['trusted_certs'] = $trusted_certs;

        return $this;
    }

    /**
     * Gets allowed_origins
     *
     * @return string[]|null
     */
    public function get_allowed_origins()
    {
        return $this->container['allowed_origins'];
    }

    /**
     * Sets allowed_origins
     *
     * @param string[]|null $allowed_origins allowed_origins
     *
     * @return self
     */
    public function set_allowed_origins($allowed_origins)
    {
        if (is_null($allowed_origins)) {
            throw new \InvalidArgumentException('non-nullable allowed_origins cannot be null');
        }


        $this->container['allowed_origins'] = $allowed_origins;

        return $this;
    }

    /**
     * Gets realm_access
     *
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\Access|null
     */
    public function get_realm_access()
    {
        return $this->container['realm_access'];
    }

    /**
     * Sets realm_access
     *
     * @param \WebMI\KeycloakApiClient\KeycloakApi\Model\Access|null $realm_access realm_access
     *
     * @return self
     */
    public function set_realm_access($realm_access)
    {
        if (is_null($realm_access)) {
            throw new \InvalidArgumentException('non-nullable realm_access cannot be null');
        }
        $this->container['realm_access'] = $realm_access;

        return $this;
    }

    /**
     * Gets resource_access
     *
     * @return array<string,\WebMI\KeycloakApiClient\KeycloakApi\Model\Access>|null
     */
    public function get_resource_access()
    {
        return $this->container['resource_access'];
    }

    /**
     * Sets resource_access
     *
     * @param array<string,\WebMI\KeycloakApiClient\KeycloakApi\Model\Access>|null $resource_access resource_access
     *
     * @return self
     */
    public function set_resource_access($resource_access)
    {
        if (is_null($resource_access)) {
            throw new \InvalidArgumentException('non-nullable resource_access cannot be null');
        }
        $this->container['resource_access'] = $resource_access;

        return $this;
    }

    /**
     * Gets authorization
     *
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\Authorization|null
     */
    public function get_authorization()
    {
        return $this->container['authorization'];
    }

    /**
     * Sets authorization
     *
     * @param \WebMI\KeycloakApiClient\KeycloakApi\Model\Authorization|null $authorization authorization
     *
     * @return self
     */
    public function set_authorization($authorization)
    {
        if (is_null($authorization)) {
            throw new \InvalidArgumentException('non-nullable authorization cannot be null');
        }
        $this->container['authorization'] = $authorization;

        return $this;
    }

    /**
     * Gets cnf
     *
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\Confirmation|null
     */
    public function get_cnf()
    {
        return $this->container['cnf'];
    }

    /**
     * Sets cnf
     *
     * @param \WebMI\KeycloakApiClient\KeycloakApi\Model\Confirmation|null $cnf cnf
     *
     * @return self
     */
    public function set_cnf($cnf)
    {
        if (is_null($cnf)) {
            throw new \InvalidArgumentException('non-nullable cnf cannot be null');
        }
        $this->container['cnf'] = $cnf;

        return $this;
    }

    /**
     * Gets scope
     *
     * @return string|null
     */
    public function get_scope()
    {
        return $this->container['scope'];
    }

    /**
     * Sets scope
     *
     * @param string|null $scope scope
     *
     * @return self
     */
    public function set_scope($scope)
    {
        if (is_null($scope)) {
            throw new \InvalidArgumentException('non-nullable scope cannot be null');
        }
        $this->container['scope'] = $scope;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


