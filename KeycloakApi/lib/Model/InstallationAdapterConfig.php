<?php
/**
 * InstallationAdapterConfig
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace WebMI\KeycloakApiClient\KeycloakApi\Model;

use \ArrayAccess;
use \WebMI\KeycloakApiClient\KeycloakApi\ObjectSerializer;

/**
 * InstallationAdapterConfig Class Doc Comment
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class InstallationAdapterConfig implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'InstallationAdapterConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'realm' => 'string',
        'realm_public_key' => 'string',
        'auth_server_url' => 'string',
        'ssl_required' => 'string',
        'bearer_only' => 'bool',
        'resource' => 'string',
        'public_client' => 'bool',
        'verify_token_audience' => 'bool',
        'credentials' => 'array<string,mixed>',
        'use_resource_role_mappings' => 'bool',
        'confidential_port' => 'int',
        'policy_enforcer' => '\WebMI\KeycloakApiClient\KeycloakApi\Model\PolicyEnforcerConfig'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'realm' => null,
        'realm_public_key' => null,
        'auth_server_url' => null,
        'ssl_required' => null,
        'bearer_only' => null,
        'resource' => null,
        'public_client' => null,
        'verify_token_audience' => null,
        'credentials' => null,
        'use_resource_role_mappings' => null,
        'confidential_port' => 'int32',
        'policy_enforcer' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'realm' => false,
        'realm_public_key' => false,
        'auth_server_url' => false,
        'ssl_required' => false,
        'bearer_only' => false,
        'resource' => false,
        'public_client' => false,
        'verify_token_audience' => false,
        'credentials' => false,
        'use_resource_role_mappings' => false,
        'confidential_port' => false,
        'policy_enforcer' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'realm' => 'realm',
        'realm_public_key' => 'realm-public-key',
        'auth_server_url' => 'auth-server-url',
        'ssl_required' => 'ssl-required',
        'bearer_only' => 'bearer-only',
        'resource' => 'resource',
        'public_client' => 'public-client',
        'verify_token_audience' => 'verify-token-audience',
        'credentials' => 'credentials',
        'use_resource_role_mappings' => 'use-resource-role-mappings',
        'confidential_port' => 'confidential-port',
        'policy_enforcer' => 'policy-enforcer'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'realm' => 'set_realm',
        'realm_public_key' => 'set_realm_public_key',
        'auth_server_url' => 'set_auth_server_url',
        'ssl_required' => 'set_ssl_required',
        'bearer_only' => 'set_bearer_only',
        'resource' => 'set_resource',
        'public_client' => 'set_public_client',
        'verify_token_audience' => 'set_verify_token_audience',
        'credentials' => 'set_credentials',
        'use_resource_role_mappings' => 'set_use_resource_role_mappings',
        'confidential_port' => 'set_confidential_port',
        'policy_enforcer' => 'set_policy_enforcer'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'realm' => 'get_realm',
        'realm_public_key' => 'get_realm_public_key',
        'auth_server_url' => 'get_auth_server_url',
        'ssl_required' => 'get_ssl_required',
        'bearer_only' => 'get_bearer_only',
        'resource' => 'get_resource',
        'public_client' => 'get_public_client',
        'verify_token_audience' => 'get_verify_token_audience',
        'credentials' => 'get_credentials',
        'use_resource_role_mappings' => 'get_use_resource_role_mappings',
        'confidential_port' => 'get_confidential_port',
        'policy_enforcer' => 'get_policy_enforcer'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('realm', $data ?? [], null);
        $this->setIfExists('realm_public_key', $data ?? [], null);
        $this->setIfExists('auth_server_url', $data ?? [], null);
        $this->setIfExists('ssl_required', $data ?? [], null);
        $this->setIfExists('bearer_only', $data ?? [], null);
        $this->setIfExists('resource', $data ?? [], null);
        $this->setIfExists('public_client', $data ?? [], null);
        $this->setIfExists('verify_token_audience', $data ?? [], null);
        $this->setIfExists('credentials', $data ?? [], null);
        $this->setIfExists('use_resource_role_mappings', $data ?? [], null);
        $this->setIfExists('confidential_port', $data ?? [], null);
        $this->setIfExists('policy_enforcer', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets realm
     *
     * @return string|null
     */
    public function get_realm()
    {
        return $this->container['realm'];
    }

    /**
     * Sets realm
     *
     * @param string|null $realm realm
     *
     * @return self
     */
    public function set_realm($realm)
    {
        if (is_null($realm)) {
            throw new \InvalidArgumentException('non-nullable realm cannot be null');
        }
        $this->container['realm'] = $realm;

        return $this;
    }

    /**
     * Gets realm_public_key
     *
     * @return string|null
     */
    public function get_realm_public_key()
    {
        return $this->container['realm_public_key'];
    }

    /**
     * Sets realm_public_key
     *
     * @param string|null $realm_public_key realm_public_key
     *
     * @return self
     */
    public function set_realm_public_key($realm_public_key)
    {
        if (is_null($realm_public_key)) {
            throw new \InvalidArgumentException('non-nullable realm_public_key cannot be null');
        }
        $this->container['realm_public_key'] = $realm_public_key;

        return $this;
    }

    /**
     * Gets auth_server_url
     *
     * @return string|null
     */
    public function get_auth_server_url()
    {
        return $this->container['auth_server_url'];
    }

    /**
     * Sets auth_server_url
     *
     * @param string|null $auth_server_url auth_server_url
     *
     * @return self
     */
    public function set_auth_server_url($auth_server_url)
    {
        if (is_null($auth_server_url)) {
            throw new \InvalidArgumentException('non-nullable auth_server_url cannot be null');
        }
        $this->container['auth_server_url'] = $auth_server_url;

        return $this;
    }

    /**
     * Gets ssl_required
     *
     * @return string|null
     */
    public function get_ssl_required()
    {
        return $this->container['ssl_required'];
    }

    /**
     * Sets ssl_required
     *
     * @param string|null $ssl_required ssl_required
     *
     * @return self
     */
    public function set_ssl_required($ssl_required)
    {
        if (is_null($ssl_required)) {
            throw new \InvalidArgumentException('non-nullable ssl_required cannot be null');
        }
        $this->container['ssl_required'] = $ssl_required;

        return $this;
    }

    /**
     * Gets bearer_only
     *
     * @return bool|null
     */
    public function get_bearer_only()
    {
        return $this->container['bearer_only'];
    }

    /**
     * Sets bearer_only
     *
     * @param bool|null $bearer_only bearer_only
     *
     * @return self
     */
    public function set_bearer_only($bearer_only)
    {
        if (is_null($bearer_only)) {
            throw new \InvalidArgumentException('non-nullable bearer_only cannot be null');
        }
        $this->container['bearer_only'] = $bearer_only;

        return $this;
    }

    /**
     * Gets resource
     *
     * @return string|null
     */
    public function get_resource()
    {
        return $this->container['resource'];
    }

    /**
     * Sets resource
     *
     * @param string|null $resource resource
     *
     * @return self
     */
    public function set_resource($resource)
    {
        if (is_null($resource)) {
            throw new \InvalidArgumentException('non-nullable resource cannot be null');
        }
        $this->container['resource'] = $resource;

        return $this;
    }

    /**
     * Gets public_client
     *
     * @return bool|null
     */
    public function get_public_client()
    {
        return $this->container['public_client'];
    }

    /**
     * Sets public_client
     *
     * @param bool|null $public_client public_client
     *
     * @return self
     */
    public function set_public_client($public_client)
    {
        if (is_null($public_client)) {
            throw new \InvalidArgumentException('non-nullable public_client cannot be null');
        }
        $this->container['public_client'] = $public_client;

        return $this;
    }

    /**
     * Gets verify_token_audience
     *
     * @return bool|null
     */
    public function get_verify_token_audience()
    {
        return $this->container['verify_token_audience'];
    }

    /**
     * Sets verify_token_audience
     *
     * @param bool|null $verify_token_audience verify_token_audience
     *
     * @return self
     */
    public function set_verify_token_audience($verify_token_audience)
    {
        if (is_null($verify_token_audience)) {
            throw new \InvalidArgumentException('non-nullable verify_token_audience cannot be null');
        }
        $this->container['verify_token_audience'] = $verify_token_audience;

        return $this;
    }

    /**
     * Gets credentials
     *
     * @return array<string,mixed>|null
     */
    public function get_credentials()
    {
        return $this->container['credentials'];
    }

    /**
     * Sets credentials
     *
     * @param array<string,mixed>|null $credentials credentials
     *
     * @return self
     */
    public function set_credentials($credentials)
    {
        if (is_null($credentials)) {
            throw new \InvalidArgumentException('non-nullable credentials cannot be null');
        }
        $this->container['credentials'] = $credentials;

        return $this;
    }

    /**
     * Gets use_resource_role_mappings
     *
     * @return bool|null
     */
    public function get_use_resource_role_mappings()
    {
        return $this->container['use_resource_role_mappings'];
    }

    /**
     * Sets use_resource_role_mappings
     *
     * @param bool|null $use_resource_role_mappings use_resource_role_mappings
     *
     * @return self
     */
    public function set_use_resource_role_mappings($use_resource_role_mappings)
    {
        if (is_null($use_resource_role_mappings)) {
            throw new \InvalidArgumentException('non-nullable use_resource_role_mappings cannot be null');
        }
        $this->container['use_resource_role_mappings'] = $use_resource_role_mappings;

        return $this;
    }

    /**
     * Gets confidential_port
     *
     * @return int|null
     */
    public function get_confidential_port()
    {
        return $this->container['confidential_port'];
    }

    /**
     * Sets confidential_port
     *
     * @param int|null $confidential_port confidential_port
     *
     * @return self
     */
    public function set_confidential_port($confidential_port)
    {
        if (is_null($confidential_port)) {
            throw new \InvalidArgumentException('non-nullable confidential_port cannot be null');
        }
        $this->container['confidential_port'] = $confidential_port;

        return $this;
    }

    /**
     * Gets policy_enforcer
     *
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\PolicyEnforcerConfig|null
     */
    public function get_policy_enforcer()
    {
        return $this->container['policy_enforcer'];
    }

    /**
     * Sets policy_enforcer
     *
     * @param \WebMI\KeycloakApiClient\KeycloakApi\Model\PolicyEnforcerConfig|null $policy_enforcer policy_enforcer
     *
     * @return self
     */
    public function set_policy_enforcer($policy_enforcer)
    {
        if (is_null($policy_enforcer)) {
            throw new \InvalidArgumentException('non-nullable policy_enforcer cannot be null');
        }
        $this->container['policy_enforcer'] = $policy_enforcer;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


