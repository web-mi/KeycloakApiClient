<?php
/**
 * RealmEventsConfigRepresentation
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace WebMI\KeycloakApiClient\KeycloakApi\Model;

use \ArrayAccess;
use \WebMI\KeycloakApiClient\KeycloakApi\ObjectSerializer;

/**
 * RealmEventsConfigRepresentation Class Doc Comment
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RealmEventsConfigRepresentation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RealmEventsConfigRepresentation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'events_enabled' => 'bool',
        'events_expiration' => 'int',
        'events_listeners' => 'string[]',
        'enabled_event_types' => 'string[]',
        'admin_events_enabled' => 'bool',
        'admin_events_details_enabled' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'events_enabled' => null,
        'events_expiration' => 'int64',
        'events_listeners' => null,
        'enabled_event_types' => null,
        'admin_events_enabled' => null,
        'admin_events_details_enabled' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'events_enabled' => false,
        'events_expiration' => false,
        'events_listeners' => false,
        'enabled_event_types' => false,
        'admin_events_enabled' => false,
        'admin_events_details_enabled' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'events_enabled' => 'eventsEnabled',
        'events_expiration' => 'eventsExpiration',
        'events_listeners' => 'eventsListeners',
        'enabled_event_types' => 'enabledEventTypes',
        'admin_events_enabled' => 'adminEventsEnabled',
        'admin_events_details_enabled' => 'adminEventsDetailsEnabled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'events_enabled' => 'set_events_enabled',
        'events_expiration' => 'set_events_expiration',
        'events_listeners' => 'set_events_listeners',
        'enabled_event_types' => 'set_enabled_event_types',
        'admin_events_enabled' => 'set_admin_events_enabled',
        'admin_events_details_enabled' => 'set_admin_events_details_enabled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'events_enabled' => 'get_events_enabled',
        'events_expiration' => 'get_events_expiration',
        'events_listeners' => 'get_events_listeners',
        'enabled_event_types' => 'get_enabled_event_types',
        'admin_events_enabled' => 'get_admin_events_enabled',
        'admin_events_details_enabled' => 'get_admin_events_details_enabled'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('events_enabled', $data ?? [], null);
        $this->setIfExists('events_expiration', $data ?? [], null);
        $this->setIfExists('events_listeners', $data ?? [], null);
        $this->setIfExists('enabled_event_types', $data ?? [], null);
        $this->setIfExists('admin_events_enabled', $data ?? [], null);
        $this->setIfExists('admin_events_details_enabled', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets events_enabled
     *
     * @return bool|null
     */
    public function get_events_enabled()
    {
        return $this->container['events_enabled'];
    }

    /**
     * Sets events_enabled
     *
     * @param bool|null $events_enabled events_enabled
     *
     * @return self
     */
    public function set_events_enabled($events_enabled)
    {
        if (is_null($events_enabled)) {
            throw new \InvalidArgumentException('non-nullable events_enabled cannot be null');
        }
        $this->container['events_enabled'] = $events_enabled;

        return $this;
    }

    /**
     * Gets events_expiration
     *
     * @return int|null
     */
    public function get_events_expiration()
    {
        return $this->container['events_expiration'];
    }

    /**
     * Sets events_expiration
     *
     * @param int|null $events_expiration events_expiration
     *
     * @return self
     */
    public function set_events_expiration($events_expiration)
    {
        if (is_null($events_expiration)) {
            throw new \InvalidArgumentException('non-nullable events_expiration cannot be null');
        }
        $this->container['events_expiration'] = $events_expiration;

        return $this;
    }

    /**
     * Gets events_listeners
     *
     * @return string[]|null
     */
    public function get_events_listeners()
    {
        return $this->container['events_listeners'];
    }

    /**
     * Sets events_listeners
     *
     * @param string[]|null $events_listeners events_listeners
     *
     * @return self
     */
    public function set_events_listeners($events_listeners)
    {
        if (is_null($events_listeners)) {
            throw new \InvalidArgumentException('non-nullable events_listeners cannot be null');
        }
        $this->container['events_listeners'] = $events_listeners;

        return $this;
    }

    /**
     * Gets enabled_event_types
     *
     * @return string[]|null
     */
    public function get_enabled_event_types()
    {
        return $this->container['enabled_event_types'];
    }

    /**
     * Sets enabled_event_types
     *
     * @param string[]|null $enabled_event_types enabled_event_types
     *
     * @return self
     */
    public function set_enabled_event_types($enabled_event_types)
    {
        if (is_null($enabled_event_types)) {
            throw new \InvalidArgumentException('non-nullable enabled_event_types cannot be null');
        }
        $this->container['enabled_event_types'] = $enabled_event_types;

        return $this;
    }

    /**
     * Gets admin_events_enabled
     *
     * @return bool|null
     */
    public function get_admin_events_enabled()
    {
        return $this->container['admin_events_enabled'];
    }

    /**
     * Sets admin_events_enabled
     *
     * @param bool|null $admin_events_enabled admin_events_enabled
     *
     * @return self
     */
    public function set_admin_events_enabled($admin_events_enabled)
    {
        if (is_null($admin_events_enabled)) {
            throw new \InvalidArgumentException('non-nullable admin_events_enabled cannot be null');
        }
        $this->container['admin_events_enabled'] = $admin_events_enabled;

        return $this;
    }

    /**
     * Gets admin_events_details_enabled
     *
     * @return bool|null
     */
    public function get_admin_events_details_enabled()
    {
        return $this->container['admin_events_details_enabled'];
    }

    /**
     * Sets admin_events_details_enabled
     *
     * @param bool|null $admin_events_details_enabled admin_events_details_enabled
     *
     * @return self
     */
    public function set_admin_events_details_enabled($admin_events_details_enabled)
    {
        if (is_null($admin_events_details_enabled)) {
            throw new \InvalidArgumentException('non-nullable admin_events_details_enabled cannot be null');
        }
        $this->container['admin_events_details_enabled'] = $admin_events_details_enabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


