<?php
/**
 * ResourceRepresentation
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace WebMI\KeycloakApiClient\KeycloakApi\Model;

use \ArrayAccess;
use \WebMI\KeycloakApiClient\KeycloakApi\ObjectSerializer;

/**
 * ResourceRepresentation Class Doc Comment
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ResourceRepresentation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ResourceRepresentation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        '_id' => 'string',
        'name' => 'string',
        'uris' => 'string[]',
        'type' => 'string',
        'scopes' => '\WebMI\KeycloakApiClient\KeycloakApi\Model\ScopeRepresentation[]',
        'icon_uri' => 'string',
        'owner' => '\WebMI\KeycloakApiClient\KeycloakApi\Model\ResourceOwnerRepresentation',
        'owner_managed_access' => 'bool',
        'display_name' => 'string',
        'attributes' => 'array<string,string[]>',
        'uri' => 'string',
        'scopes_uma' => '\WebMI\KeycloakApiClient\KeycloakApi\Model\ScopeRepresentation[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        '_id' => null,
        'name' => null,
        'uris' => null,
        'type' => null,
        'scopes' => null,
        'icon_uri' => null,
        'owner' => null,
        'owner_managed_access' => null,
        'display_name' => null,
        'attributes' => null,
        'uri' => null,
        'scopes_uma' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        '_id' => false,
        'name' => false,
        'uris' => false,
        'type' => false,
        'scopes' => false,
        'icon_uri' => false,
        'owner' => false,
        'owner_managed_access' => false,
        'display_name' => false,
        'attributes' => false,
        'uri' => false,
        'scopes_uma' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        '_id' => '_id',
        'name' => 'name',
        'uris' => 'uris',
        'type' => 'type',
        'scopes' => 'scopes',
        'icon_uri' => 'icon_uri',
        'owner' => 'owner',
        'owner_managed_access' => 'ownerManagedAccess',
        'display_name' => 'displayName',
        'attributes' => 'attributes',
        'uri' => 'uri',
        'scopes_uma' => 'scopesUma'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        '_id' => 'set__id',
        'name' => 'set_name',
        'uris' => 'set_uris',
        'type' => 'set_type',
        'scopes' => 'set_scopes',
        'icon_uri' => 'set_icon_uri',
        'owner' => 'set_owner',
        'owner_managed_access' => 'set_owner_managed_access',
        'display_name' => 'set_display_name',
        'attributes' => 'set_attributes',
        'uri' => 'set_uri',
        'scopes_uma' => 'set_scopes_uma'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        '_id' => 'get__id',
        'name' => 'get_name',
        'uris' => 'get_uris',
        'type' => 'get_type',
        'scopes' => 'get_scopes',
        'icon_uri' => 'get_icon_uri',
        'owner' => 'get_owner',
        'owner_managed_access' => 'get_owner_managed_access',
        'display_name' => 'get_display_name',
        'attributes' => 'get_attributes',
        'uri' => 'get_uri',
        'scopes_uma' => 'get_scopes_uma'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('_id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('uris', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('scopes', $data ?? [], null);
        $this->setIfExists('icon_uri', $data ?? [], null);
        $this->setIfExists('owner', $data ?? [], null);
        $this->setIfExists('owner_managed_access', $data ?? [], null);
        $this->setIfExists('display_name', $data ?? [], null);
        $this->setIfExists('attributes', $data ?? [], null);
        $this->setIfExists('uri', $data ?? [], null);
        $this->setIfExists('scopes_uma', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets _id
     *
     * @return string|null
     */
    public function get__id()
    {
        return $this->container['_id'];
    }

    /**
     * Sets _id
     *
     * @param string|null $_id _id
     *
     * @return self
     */
    public function set__id($_id)
    {
        if (is_null($_id)) {
            throw new \InvalidArgumentException('non-nullable _id cannot be null');
        }
        $this->container['_id'] = $_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function get_name()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function set_name($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets uris
     *
     * @return string[]|null
     */
    public function get_uris()
    {
        return $this->container['uris'];
    }

    /**
     * Sets uris
     *
     * @param string[]|null $uris uris
     *
     * @return self
     */
    public function set_uris($uris)
    {
        if (is_null($uris)) {
            throw new \InvalidArgumentException('non-nullable uris cannot be null');
        }


        $this->container['uris'] = $uris;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function get_type()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function set_type($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets scopes
     *
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\ScopeRepresentation[]|null
     */
    public function get_scopes()
    {
        return $this->container['scopes'];
    }

    /**
     * Sets scopes
     *
     * @param \WebMI\KeycloakApiClient\KeycloakApi\Model\ScopeRepresentation[]|null $scopes scopes
     *
     * @return self
     */
    public function set_scopes($scopes)
    {
        if (is_null($scopes)) {
            throw new \InvalidArgumentException('non-nullable scopes cannot be null');
        }


        $this->container['scopes'] = $scopes;

        return $this;
    }

    /**
     * Gets icon_uri
     *
     * @return string|null
     */
    public function get_icon_uri()
    {
        return $this->container['icon_uri'];
    }

    /**
     * Sets icon_uri
     *
     * @param string|null $icon_uri icon_uri
     *
     * @return self
     */
    public function set_icon_uri($icon_uri)
    {
        if (is_null($icon_uri)) {
            throw new \InvalidArgumentException('non-nullable icon_uri cannot be null');
        }
        $this->container['icon_uri'] = $icon_uri;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\ResourceOwnerRepresentation|null
     */
    public function get_owner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \WebMI\KeycloakApiClient\KeycloakApi\Model\ResourceOwnerRepresentation|null $owner owner
     *
     * @return self
     */
    public function set_owner($owner)
    {
        if (is_null($owner)) {
            throw new \InvalidArgumentException('non-nullable owner cannot be null');
        }
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets owner_managed_access
     *
     * @return bool|null
     */
    public function get_owner_managed_access()
    {
        return $this->container['owner_managed_access'];
    }

    /**
     * Sets owner_managed_access
     *
     * @param bool|null $owner_managed_access owner_managed_access
     *
     * @return self
     */
    public function set_owner_managed_access($owner_managed_access)
    {
        if (is_null($owner_managed_access)) {
            throw new \InvalidArgumentException('non-nullable owner_managed_access cannot be null');
        }
        $this->container['owner_managed_access'] = $owner_managed_access;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string|null
     */
    public function get_display_name()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string|null $display_name display_name
     *
     * @return self
     */
    public function set_display_name($display_name)
    {
        if (is_null($display_name)) {
            throw new \InvalidArgumentException('non-nullable display_name cannot be null');
        }
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return array<string,string[]>|null
     */
    public function get_attributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param array<string,string[]>|null $attributes attributes
     *
     * @return self
     */
    public function set_attributes($attributes)
    {
        if (is_null($attributes)) {
            throw new \InvalidArgumentException('non-nullable attributes cannot be null');
        }
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets uri
     *
     * @return string|null
     * @deprecated
     */
    public function get_uri()
    {
        return $this->container['uri'];
    }

    /**
     * Sets uri
     *
     * @param string|null $uri uri
     *
     * @return self
     * @deprecated
     */
    public function set_uri($uri)
    {
        if (is_null($uri)) {
            throw new \InvalidArgumentException('non-nullable uri cannot be null');
        }
        $this->container['uri'] = $uri;

        return $this;
    }

    /**
     * Gets scopes_uma
     *
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\ScopeRepresentation[]|null
     */
    public function get_scopes_uma()
    {
        return $this->container['scopes_uma'];
    }

    /**
     * Sets scopes_uma
     *
     * @param \WebMI\KeycloakApiClient\KeycloakApi\Model\ScopeRepresentation[]|null $scopes_uma scopes_uma
     *
     * @return self
     */
    public function set_scopes_uma($scopes_uma)
    {
        if (is_null($scopes_uma)) {
            throw new \InvalidArgumentException('non-nullable scopes_uma cannot be null');
        }


        $this->container['scopes_uma'] = $scopes_uma;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


