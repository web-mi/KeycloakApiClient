<?php
/**
 * OAuthClientRepresentation
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace WebMI\KeycloakApiClient\KeycloakApi\Model;

use \ArrayAccess;
use \WebMI\KeycloakApiClient\KeycloakApi\ObjectSerializer;

/**
 * OAuthClientRepresentation Class Doc Comment
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OAuthClientRepresentation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OAuthClientRepresentation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'client_id' => 'string',
        'description' => 'string',
        'type' => 'string',
        'root_url' => 'string',
        'admin_url' => 'string',
        'base_url' => 'string',
        'surrogate_auth_required' => 'bool',
        'enabled' => 'bool',
        'always_display_in_console' => 'bool',
        'client_authenticator_type' => 'string',
        'secret' => 'string',
        'registration_access_token' => 'string',
        'default_roles' => 'string[]',
        'redirect_uris' => 'string[]',
        'web_origins' => 'string[]',
        'not_before' => 'int',
        'bearer_only' => 'bool',
        'consent_required' => 'bool',
        'standard_flow_enabled' => 'bool',
        'implicit_flow_enabled' => 'bool',
        'direct_access_grants_enabled' => 'bool',
        'service_accounts_enabled' => 'bool',
        'authorization_services_enabled' => 'bool',
        'direct_grants_only' => 'bool',
        'public_client' => 'bool',
        'frontchannel_logout' => 'bool',
        'protocol' => 'string',
        'attributes' => 'array<string,string>',
        'authentication_flow_binding_overrides' => 'array<string,string>',
        'full_scope_allowed' => 'bool',
        'node_re_registration_timeout' => 'int',
        'registered_nodes' => 'array<string,int>',
        'protocol_mappers' => '\WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[]',
        'client_template' => 'string',
        'use_template_config' => 'bool',
        'use_template_scope' => 'bool',
        'use_template_mappers' => 'bool',
        'default_client_scopes' => 'string[]',
        'optional_client_scopes' => 'string[]',
        'authorization_settings' => '\WebMI\KeycloakApiClient\KeycloakApi\Model\ResourceServerRepresentation',
        'access' => 'array<string,bool>',
        'origin' => 'string',
        'name' => 'string',
        'claims' => '\WebMI\KeycloakApiClient\KeycloakApi\Model\ClaimRepresentation'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'client_id' => null,
        'description' => null,
        'type' => null,
        'root_url' => null,
        'admin_url' => null,
        'base_url' => null,
        'surrogate_auth_required' => null,
        'enabled' => null,
        'always_display_in_console' => null,
        'client_authenticator_type' => null,
        'secret' => null,
        'registration_access_token' => null,
        'default_roles' => null,
        'redirect_uris' => null,
        'web_origins' => null,
        'not_before' => 'int32',
        'bearer_only' => null,
        'consent_required' => null,
        'standard_flow_enabled' => null,
        'implicit_flow_enabled' => null,
        'direct_access_grants_enabled' => null,
        'service_accounts_enabled' => null,
        'authorization_services_enabled' => null,
        'direct_grants_only' => null,
        'public_client' => null,
        'frontchannel_logout' => null,
        'protocol' => null,
        'attributes' => null,
        'authentication_flow_binding_overrides' => null,
        'full_scope_allowed' => null,
        'node_re_registration_timeout' => 'int32',
        'registered_nodes' => 'int32',
        'protocol_mappers' => null,
        'client_template' => null,
        'use_template_config' => null,
        'use_template_scope' => null,
        'use_template_mappers' => null,
        'default_client_scopes' => null,
        'optional_client_scopes' => null,
        'authorization_settings' => null,
        'access' => null,
        'origin' => null,
        'name' => null,
        'claims' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'client_id' => false,
        'description' => false,
        'type' => false,
        'root_url' => false,
        'admin_url' => false,
        'base_url' => false,
        'surrogate_auth_required' => false,
        'enabled' => false,
        'always_display_in_console' => false,
        'client_authenticator_type' => false,
        'secret' => false,
        'registration_access_token' => false,
        'default_roles' => false,
        'redirect_uris' => false,
        'web_origins' => false,
        'not_before' => false,
        'bearer_only' => false,
        'consent_required' => false,
        'standard_flow_enabled' => false,
        'implicit_flow_enabled' => false,
        'direct_access_grants_enabled' => false,
        'service_accounts_enabled' => false,
        'authorization_services_enabled' => false,
        'direct_grants_only' => false,
        'public_client' => false,
        'frontchannel_logout' => false,
        'protocol' => false,
        'attributes' => false,
        'authentication_flow_binding_overrides' => false,
        'full_scope_allowed' => false,
        'node_re_registration_timeout' => false,
        'registered_nodes' => false,
        'protocol_mappers' => false,
        'client_template' => false,
        'use_template_config' => false,
        'use_template_scope' => false,
        'use_template_mappers' => false,
        'default_client_scopes' => false,
        'optional_client_scopes' => false,
        'authorization_settings' => false,
        'access' => false,
        'origin' => false,
        'name' => false,
        'claims' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'client_id' => 'clientId',
        'description' => 'description',
        'type' => 'type',
        'root_url' => 'rootUrl',
        'admin_url' => 'adminUrl',
        'base_url' => 'baseUrl',
        'surrogate_auth_required' => 'surrogateAuthRequired',
        'enabled' => 'enabled',
        'always_display_in_console' => 'alwaysDisplayInConsole',
        'client_authenticator_type' => 'clientAuthenticatorType',
        'secret' => 'secret',
        'registration_access_token' => 'registrationAccessToken',
        'default_roles' => 'defaultRoles',
        'redirect_uris' => 'redirectUris',
        'web_origins' => 'webOrigins',
        'not_before' => 'notBefore',
        'bearer_only' => 'bearerOnly',
        'consent_required' => 'consentRequired',
        'standard_flow_enabled' => 'standardFlowEnabled',
        'implicit_flow_enabled' => 'implicitFlowEnabled',
        'direct_access_grants_enabled' => 'directAccessGrantsEnabled',
        'service_accounts_enabled' => 'serviceAccountsEnabled',
        'authorization_services_enabled' => 'authorizationServicesEnabled',
        'direct_grants_only' => 'directGrantsOnly',
        'public_client' => 'publicClient',
        'frontchannel_logout' => 'frontchannelLogout',
        'protocol' => 'protocol',
        'attributes' => 'attributes',
        'authentication_flow_binding_overrides' => 'authenticationFlowBindingOverrides',
        'full_scope_allowed' => 'fullScopeAllowed',
        'node_re_registration_timeout' => 'nodeReRegistrationTimeout',
        'registered_nodes' => 'registeredNodes',
        'protocol_mappers' => 'protocolMappers',
        'client_template' => 'clientTemplate',
        'use_template_config' => 'useTemplateConfig',
        'use_template_scope' => 'useTemplateScope',
        'use_template_mappers' => 'useTemplateMappers',
        'default_client_scopes' => 'defaultClientScopes',
        'optional_client_scopes' => 'optionalClientScopes',
        'authorization_settings' => 'authorizationSettings',
        'access' => 'access',
        'origin' => 'origin',
        'name' => 'name',
        'claims' => 'claims'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'set_id',
        'client_id' => 'set_client_id',
        'description' => 'set_description',
        'type' => 'set_type',
        'root_url' => 'set_root_url',
        'admin_url' => 'set_admin_url',
        'base_url' => 'set_base_url',
        'surrogate_auth_required' => 'set_surrogate_auth_required',
        'enabled' => 'set_enabled',
        'always_display_in_console' => 'set_always_display_in_console',
        'client_authenticator_type' => 'set_client_authenticator_type',
        'secret' => 'set_secret',
        'registration_access_token' => 'set_registration_access_token',
        'default_roles' => 'set_default_roles',
        'redirect_uris' => 'set_redirect_uris',
        'web_origins' => 'set_web_origins',
        'not_before' => 'set_not_before',
        'bearer_only' => 'set_bearer_only',
        'consent_required' => 'set_consent_required',
        'standard_flow_enabled' => 'set_standard_flow_enabled',
        'implicit_flow_enabled' => 'set_implicit_flow_enabled',
        'direct_access_grants_enabled' => 'set_direct_access_grants_enabled',
        'service_accounts_enabled' => 'set_service_accounts_enabled',
        'authorization_services_enabled' => 'set_authorization_services_enabled',
        'direct_grants_only' => 'set_direct_grants_only',
        'public_client' => 'set_public_client',
        'frontchannel_logout' => 'set_frontchannel_logout',
        'protocol' => 'set_protocol',
        'attributes' => 'set_attributes',
        'authentication_flow_binding_overrides' => 'set_authentication_flow_binding_overrides',
        'full_scope_allowed' => 'set_full_scope_allowed',
        'node_re_registration_timeout' => 'set_node_re_registration_timeout',
        'registered_nodes' => 'set_registered_nodes',
        'protocol_mappers' => 'set_protocol_mappers',
        'client_template' => 'set_client_template',
        'use_template_config' => 'set_use_template_config',
        'use_template_scope' => 'set_use_template_scope',
        'use_template_mappers' => 'set_use_template_mappers',
        'default_client_scopes' => 'set_default_client_scopes',
        'optional_client_scopes' => 'set_optional_client_scopes',
        'authorization_settings' => 'set_authorization_settings',
        'access' => 'set_access',
        'origin' => 'set_origin',
        'name' => 'set_name',
        'claims' => 'set_claims'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'get_id',
        'client_id' => 'get_client_id',
        'description' => 'get_description',
        'type' => 'get_type',
        'root_url' => 'get_root_url',
        'admin_url' => 'get_admin_url',
        'base_url' => 'get_base_url',
        'surrogate_auth_required' => 'get_surrogate_auth_required',
        'enabled' => 'get_enabled',
        'always_display_in_console' => 'get_always_display_in_console',
        'client_authenticator_type' => 'get_client_authenticator_type',
        'secret' => 'get_secret',
        'registration_access_token' => 'get_registration_access_token',
        'default_roles' => 'get_default_roles',
        'redirect_uris' => 'get_redirect_uris',
        'web_origins' => 'get_web_origins',
        'not_before' => 'get_not_before',
        'bearer_only' => 'get_bearer_only',
        'consent_required' => 'get_consent_required',
        'standard_flow_enabled' => 'get_standard_flow_enabled',
        'implicit_flow_enabled' => 'get_implicit_flow_enabled',
        'direct_access_grants_enabled' => 'get_direct_access_grants_enabled',
        'service_accounts_enabled' => 'get_service_accounts_enabled',
        'authorization_services_enabled' => 'get_authorization_services_enabled',
        'direct_grants_only' => 'get_direct_grants_only',
        'public_client' => 'get_public_client',
        'frontchannel_logout' => 'get_frontchannel_logout',
        'protocol' => 'get_protocol',
        'attributes' => 'get_attributes',
        'authentication_flow_binding_overrides' => 'get_authentication_flow_binding_overrides',
        'full_scope_allowed' => 'get_full_scope_allowed',
        'node_re_registration_timeout' => 'get_node_re_registration_timeout',
        'registered_nodes' => 'get_registered_nodes',
        'protocol_mappers' => 'get_protocol_mappers',
        'client_template' => 'get_client_template',
        'use_template_config' => 'get_use_template_config',
        'use_template_scope' => 'get_use_template_scope',
        'use_template_mappers' => 'get_use_template_mappers',
        'default_client_scopes' => 'get_default_client_scopes',
        'optional_client_scopes' => 'get_optional_client_scopes',
        'authorization_settings' => 'get_authorization_settings',
        'access' => 'get_access',
        'origin' => 'get_origin',
        'name' => 'get_name',
        'claims' => 'get_claims'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('client_id', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('root_url', $data ?? [], null);
        $this->setIfExists('admin_url', $data ?? [], null);
        $this->setIfExists('base_url', $data ?? [], null);
        $this->setIfExists('surrogate_auth_required', $data ?? [], null);
        $this->setIfExists('enabled', $data ?? [], null);
        $this->setIfExists('always_display_in_console', $data ?? [], null);
        $this->setIfExists('client_authenticator_type', $data ?? [], null);
        $this->setIfExists('secret', $data ?? [], null);
        $this->setIfExists('registration_access_token', $data ?? [], null);
        $this->setIfExists('default_roles', $data ?? [], null);
        $this->setIfExists('redirect_uris', $data ?? [], null);
        $this->setIfExists('web_origins', $data ?? [], null);
        $this->setIfExists('not_before', $data ?? [], null);
        $this->setIfExists('bearer_only', $data ?? [], null);
        $this->setIfExists('consent_required', $data ?? [], null);
        $this->setIfExists('standard_flow_enabled', $data ?? [], null);
        $this->setIfExists('implicit_flow_enabled', $data ?? [], null);
        $this->setIfExists('direct_access_grants_enabled', $data ?? [], null);
        $this->setIfExists('service_accounts_enabled', $data ?? [], null);
        $this->setIfExists('authorization_services_enabled', $data ?? [], null);
        $this->setIfExists('direct_grants_only', $data ?? [], null);
        $this->setIfExists('public_client', $data ?? [], null);
        $this->setIfExists('frontchannel_logout', $data ?? [], null);
        $this->setIfExists('protocol', $data ?? [], null);
        $this->setIfExists('attributes', $data ?? [], null);
        $this->setIfExists('authentication_flow_binding_overrides', $data ?? [], null);
        $this->setIfExists('full_scope_allowed', $data ?? [], null);
        $this->setIfExists('node_re_registration_timeout', $data ?? [], null);
        $this->setIfExists('registered_nodes', $data ?? [], null);
        $this->setIfExists('protocol_mappers', $data ?? [], null);
        $this->setIfExists('client_template', $data ?? [], null);
        $this->setIfExists('use_template_config', $data ?? [], null);
        $this->setIfExists('use_template_scope', $data ?? [], null);
        $this->setIfExists('use_template_mappers', $data ?? [], null);
        $this->setIfExists('default_client_scopes', $data ?? [], null);
        $this->setIfExists('optional_client_scopes', $data ?? [], null);
        $this->setIfExists('authorization_settings', $data ?? [], null);
        $this->setIfExists('access', $data ?? [], null);
        $this->setIfExists('origin', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('claims', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function get_id()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function set_id($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return string|null
     */
    public function get_client_id()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string|null $client_id client_id
     *
     * @return self
     */
    public function set_client_id($client_id)
    {
        if (is_null($client_id)) {
            throw new \InvalidArgumentException('non-nullable client_id cannot be null');
        }
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function get_description()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function set_description($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function get_type()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function set_type($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets root_url
     *
     * @return string|null
     */
    public function get_root_url()
    {
        return $this->container['root_url'];
    }

    /**
     * Sets root_url
     *
     * @param string|null $root_url root_url
     *
     * @return self
     */
    public function set_root_url($root_url)
    {
        if (is_null($root_url)) {
            throw new \InvalidArgumentException('non-nullable root_url cannot be null');
        }
        $this->container['root_url'] = $root_url;

        return $this;
    }

    /**
     * Gets admin_url
     *
     * @return string|null
     */
    public function get_admin_url()
    {
        return $this->container['admin_url'];
    }

    /**
     * Sets admin_url
     *
     * @param string|null $admin_url admin_url
     *
     * @return self
     */
    public function set_admin_url($admin_url)
    {
        if (is_null($admin_url)) {
            throw new \InvalidArgumentException('non-nullable admin_url cannot be null');
        }
        $this->container['admin_url'] = $admin_url;

        return $this;
    }

    /**
     * Gets base_url
     *
     * @return string|null
     */
    public function get_base_url()
    {
        return $this->container['base_url'];
    }

    /**
     * Sets base_url
     *
     * @param string|null $base_url base_url
     *
     * @return self
     */
    public function set_base_url($base_url)
    {
        if (is_null($base_url)) {
            throw new \InvalidArgumentException('non-nullable base_url cannot be null');
        }
        $this->container['base_url'] = $base_url;

        return $this;
    }

    /**
     * Gets surrogate_auth_required
     *
     * @return bool|null
     */
    public function get_surrogate_auth_required()
    {
        return $this->container['surrogate_auth_required'];
    }

    /**
     * Sets surrogate_auth_required
     *
     * @param bool|null $surrogate_auth_required surrogate_auth_required
     *
     * @return self
     */
    public function set_surrogate_auth_required($surrogate_auth_required)
    {
        if (is_null($surrogate_auth_required)) {
            throw new \InvalidArgumentException('non-nullable surrogate_auth_required cannot be null');
        }
        $this->container['surrogate_auth_required'] = $surrogate_auth_required;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function get_enabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled enabled
     *
     * @return self
     */
    public function set_enabled($enabled)
    {
        if (is_null($enabled)) {
            throw new \InvalidArgumentException('non-nullable enabled cannot be null');
        }
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets always_display_in_console
     *
     * @return bool|null
     */
    public function get_always_display_in_console()
    {
        return $this->container['always_display_in_console'];
    }

    /**
     * Sets always_display_in_console
     *
     * @param bool|null $always_display_in_console always_display_in_console
     *
     * @return self
     */
    public function set_always_display_in_console($always_display_in_console)
    {
        if (is_null($always_display_in_console)) {
            throw new \InvalidArgumentException('non-nullable always_display_in_console cannot be null');
        }
        $this->container['always_display_in_console'] = $always_display_in_console;

        return $this;
    }

    /**
     * Gets client_authenticator_type
     *
     * @return string|null
     */
    public function get_client_authenticator_type()
    {
        return $this->container['client_authenticator_type'];
    }

    /**
     * Sets client_authenticator_type
     *
     * @param string|null $client_authenticator_type client_authenticator_type
     *
     * @return self
     */
    public function set_client_authenticator_type($client_authenticator_type)
    {
        if (is_null($client_authenticator_type)) {
            throw new \InvalidArgumentException('non-nullable client_authenticator_type cannot be null');
        }
        $this->container['client_authenticator_type'] = $client_authenticator_type;

        return $this;
    }

    /**
     * Gets secret
     *
     * @return string|null
     */
    public function get_secret()
    {
        return $this->container['secret'];
    }

    /**
     * Sets secret
     *
     * @param string|null $secret secret
     *
     * @return self
     */
    public function set_secret($secret)
    {
        if (is_null($secret)) {
            throw new \InvalidArgumentException('non-nullable secret cannot be null');
        }
        $this->container['secret'] = $secret;

        return $this;
    }

    /**
     * Gets registration_access_token
     *
     * @return string|null
     */
    public function get_registration_access_token()
    {
        return $this->container['registration_access_token'];
    }

    /**
     * Sets registration_access_token
     *
     * @param string|null $registration_access_token registration_access_token
     *
     * @return self
     */
    public function set_registration_access_token($registration_access_token)
    {
        if (is_null($registration_access_token)) {
            throw new \InvalidArgumentException('non-nullable registration_access_token cannot be null');
        }
        $this->container['registration_access_token'] = $registration_access_token;

        return $this;
    }

    /**
     * Gets default_roles
     *
     * @return string[]|null
     * @deprecated
     */
    public function get_default_roles()
    {
        return $this->container['default_roles'];
    }

    /**
     * Sets default_roles
     *
     * @param string[]|null $default_roles default_roles
     *
     * @return self
     * @deprecated
     */
    public function set_default_roles($default_roles)
    {
        if (is_null($default_roles)) {
            throw new \InvalidArgumentException('non-nullable default_roles cannot be null');
        }
        $this->container['default_roles'] = $default_roles;

        return $this;
    }

    /**
     * Gets redirect_uris
     *
     * @return string[]|null
     */
    public function get_redirect_uris()
    {
        return $this->container['redirect_uris'];
    }

    /**
     * Sets redirect_uris
     *
     * @param string[]|null $redirect_uris redirect_uris
     *
     * @return self
     */
    public function set_redirect_uris($redirect_uris)
    {
        if (is_null($redirect_uris)) {
            throw new \InvalidArgumentException('non-nullable redirect_uris cannot be null');
        }
        $this->container['redirect_uris'] = $redirect_uris;

        return $this;
    }

    /**
     * Gets web_origins
     *
     * @return string[]|null
     */
    public function get_web_origins()
    {
        return $this->container['web_origins'];
    }

    /**
     * Sets web_origins
     *
     * @param string[]|null $web_origins web_origins
     *
     * @return self
     */
    public function set_web_origins($web_origins)
    {
        if (is_null($web_origins)) {
            throw new \InvalidArgumentException('non-nullable web_origins cannot be null');
        }
        $this->container['web_origins'] = $web_origins;

        return $this;
    }

    /**
     * Gets not_before
     *
     * @return int|null
     */
    public function get_not_before()
    {
        return $this->container['not_before'];
    }

    /**
     * Sets not_before
     *
     * @param int|null $not_before not_before
     *
     * @return self
     */
    public function set_not_before($not_before)
    {
        if (is_null($not_before)) {
            throw new \InvalidArgumentException('non-nullable not_before cannot be null');
        }
        $this->container['not_before'] = $not_before;

        return $this;
    }

    /**
     * Gets bearer_only
     *
     * @return bool|null
     */
    public function get_bearer_only()
    {
        return $this->container['bearer_only'];
    }

    /**
     * Sets bearer_only
     *
     * @param bool|null $bearer_only bearer_only
     *
     * @return self
     */
    public function set_bearer_only($bearer_only)
    {
        if (is_null($bearer_only)) {
            throw new \InvalidArgumentException('non-nullable bearer_only cannot be null');
        }
        $this->container['bearer_only'] = $bearer_only;

        return $this;
    }

    /**
     * Gets consent_required
     *
     * @return bool|null
     */
    public function get_consent_required()
    {
        return $this->container['consent_required'];
    }

    /**
     * Sets consent_required
     *
     * @param bool|null $consent_required consent_required
     *
     * @return self
     */
    public function set_consent_required($consent_required)
    {
        if (is_null($consent_required)) {
            throw new \InvalidArgumentException('non-nullable consent_required cannot be null');
        }
        $this->container['consent_required'] = $consent_required;

        return $this;
    }

    /**
     * Gets standard_flow_enabled
     *
     * @return bool|null
     */
    public function get_standard_flow_enabled()
    {
        return $this->container['standard_flow_enabled'];
    }

    /**
     * Sets standard_flow_enabled
     *
     * @param bool|null $standard_flow_enabled standard_flow_enabled
     *
     * @return self
     */
    public function set_standard_flow_enabled($standard_flow_enabled)
    {
        if (is_null($standard_flow_enabled)) {
            throw new \InvalidArgumentException('non-nullable standard_flow_enabled cannot be null');
        }
        $this->container['standard_flow_enabled'] = $standard_flow_enabled;

        return $this;
    }

    /**
     * Gets implicit_flow_enabled
     *
     * @return bool|null
     */
    public function get_implicit_flow_enabled()
    {
        return $this->container['implicit_flow_enabled'];
    }

    /**
     * Sets implicit_flow_enabled
     *
     * @param bool|null $implicit_flow_enabled implicit_flow_enabled
     *
     * @return self
     */
    public function set_implicit_flow_enabled($implicit_flow_enabled)
    {
        if (is_null($implicit_flow_enabled)) {
            throw new \InvalidArgumentException('non-nullable implicit_flow_enabled cannot be null');
        }
        $this->container['implicit_flow_enabled'] = $implicit_flow_enabled;

        return $this;
    }

    /**
     * Gets direct_access_grants_enabled
     *
     * @return bool|null
     */
    public function get_direct_access_grants_enabled()
    {
        return $this->container['direct_access_grants_enabled'];
    }

    /**
     * Sets direct_access_grants_enabled
     *
     * @param bool|null $direct_access_grants_enabled direct_access_grants_enabled
     *
     * @return self
     */
    public function set_direct_access_grants_enabled($direct_access_grants_enabled)
    {
        if (is_null($direct_access_grants_enabled)) {
            throw new \InvalidArgumentException('non-nullable direct_access_grants_enabled cannot be null');
        }
        $this->container['direct_access_grants_enabled'] = $direct_access_grants_enabled;

        return $this;
    }

    /**
     * Gets service_accounts_enabled
     *
     * @return bool|null
     */
    public function get_service_accounts_enabled()
    {
        return $this->container['service_accounts_enabled'];
    }

    /**
     * Sets service_accounts_enabled
     *
     * @param bool|null $service_accounts_enabled service_accounts_enabled
     *
     * @return self
     */
    public function set_service_accounts_enabled($service_accounts_enabled)
    {
        if (is_null($service_accounts_enabled)) {
            throw new \InvalidArgumentException('non-nullable service_accounts_enabled cannot be null');
        }
        $this->container['service_accounts_enabled'] = $service_accounts_enabled;

        return $this;
    }

    /**
     * Gets authorization_services_enabled
     *
     * @return bool|null
     */
    public function get_authorization_services_enabled()
    {
        return $this->container['authorization_services_enabled'];
    }

    /**
     * Sets authorization_services_enabled
     *
     * @param bool|null $authorization_services_enabled authorization_services_enabled
     *
     * @return self
     */
    public function set_authorization_services_enabled($authorization_services_enabled)
    {
        if (is_null($authorization_services_enabled)) {
            throw new \InvalidArgumentException('non-nullable authorization_services_enabled cannot be null');
        }
        $this->container['authorization_services_enabled'] = $authorization_services_enabled;

        return $this;
    }

    /**
     * Gets direct_grants_only
     *
     * @return bool|null
     * @deprecated
     */
    public function get_direct_grants_only()
    {
        return $this->container['direct_grants_only'];
    }

    /**
     * Sets direct_grants_only
     *
     * @param bool|null $direct_grants_only direct_grants_only
     *
     * @return self
     * @deprecated
     */
    public function set_direct_grants_only($direct_grants_only)
    {
        if (is_null($direct_grants_only)) {
            throw new \InvalidArgumentException('non-nullable direct_grants_only cannot be null');
        }
        $this->container['direct_grants_only'] = $direct_grants_only;

        return $this;
    }

    /**
     * Gets public_client
     *
     * @return bool|null
     */
    public function get_public_client()
    {
        return $this->container['public_client'];
    }

    /**
     * Sets public_client
     *
     * @param bool|null $public_client public_client
     *
     * @return self
     */
    public function set_public_client($public_client)
    {
        if (is_null($public_client)) {
            throw new \InvalidArgumentException('non-nullable public_client cannot be null');
        }
        $this->container['public_client'] = $public_client;

        return $this;
    }

    /**
     * Gets frontchannel_logout
     *
     * @return bool|null
     */
    public function get_frontchannel_logout()
    {
        return $this->container['frontchannel_logout'];
    }

    /**
     * Sets frontchannel_logout
     *
     * @param bool|null $frontchannel_logout frontchannel_logout
     *
     * @return self
     */
    public function set_frontchannel_logout($frontchannel_logout)
    {
        if (is_null($frontchannel_logout)) {
            throw new \InvalidArgumentException('non-nullable frontchannel_logout cannot be null');
        }
        $this->container['frontchannel_logout'] = $frontchannel_logout;

        return $this;
    }

    /**
     * Gets protocol
     *
     * @return string|null
     */
    public function get_protocol()
    {
        return $this->container['protocol'];
    }

    /**
     * Sets protocol
     *
     * @param string|null $protocol protocol
     *
     * @return self
     */
    public function set_protocol($protocol)
    {
        if (is_null($protocol)) {
            throw new \InvalidArgumentException('non-nullable protocol cannot be null');
        }
        $this->container['protocol'] = $protocol;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return array<string,string>|null
     */
    public function get_attributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param array<string,string>|null $attributes attributes
     *
     * @return self
     */
    public function set_attributes($attributes)
    {
        if (is_null($attributes)) {
            throw new \InvalidArgumentException('non-nullable attributes cannot be null');
        }
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets authentication_flow_binding_overrides
     *
     * @return array<string,string>|null
     */
    public function get_authentication_flow_binding_overrides()
    {
        return $this->container['authentication_flow_binding_overrides'];
    }

    /**
     * Sets authentication_flow_binding_overrides
     *
     * @param array<string,string>|null $authentication_flow_binding_overrides authentication_flow_binding_overrides
     *
     * @return self
     */
    public function set_authentication_flow_binding_overrides($authentication_flow_binding_overrides)
    {
        if (is_null($authentication_flow_binding_overrides)) {
            throw new \InvalidArgumentException('non-nullable authentication_flow_binding_overrides cannot be null');
        }
        $this->container['authentication_flow_binding_overrides'] = $authentication_flow_binding_overrides;

        return $this;
    }

    /**
     * Gets full_scope_allowed
     *
     * @return bool|null
     */
    public function get_full_scope_allowed()
    {
        return $this->container['full_scope_allowed'];
    }

    /**
     * Sets full_scope_allowed
     *
     * @param bool|null $full_scope_allowed full_scope_allowed
     *
     * @return self
     */
    public function set_full_scope_allowed($full_scope_allowed)
    {
        if (is_null($full_scope_allowed)) {
            throw new \InvalidArgumentException('non-nullable full_scope_allowed cannot be null');
        }
        $this->container['full_scope_allowed'] = $full_scope_allowed;

        return $this;
    }

    /**
     * Gets node_re_registration_timeout
     *
     * @return int|null
     */
    public function get_node_re_registration_timeout()
    {
        return $this->container['node_re_registration_timeout'];
    }

    /**
     * Sets node_re_registration_timeout
     *
     * @param int|null $node_re_registration_timeout node_re_registration_timeout
     *
     * @return self
     */
    public function set_node_re_registration_timeout($node_re_registration_timeout)
    {
        if (is_null($node_re_registration_timeout)) {
            throw new \InvalidArgumentException('non-nullable node_re_registration_timeout cannot be null');
        }
        $this->container['node_re_registration_timeout'] = $node_re_registration_timeout;

        return $this;
    }

    /**
     * Gets registered_nodes
     *
     * @return array<string,int>|null
     */
    public function get_registered_nodes()
    {
        return $this->container['registered_nodes'];
    }

    /**
     * Sets registered_nodes
     *
     * @param array<string,int>|null $registered_nodes registered_nodes
     *
     * @return self
     */
    public function set_registered_nodes($registered_nodes)
    {
        if (is_null($registered_nodes)) {
            throw new \InvalidArgumentException('non-nullable registered_nodes cannot be null');
        }
        $this->container['registered_nodes'] = $registered_nodes;

        return $this;
    }

    /**
     * Gets protocol_mappers
     *
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[]|null
     */
    public function get_protocol_mappers()
    {
        return $this->container['protocol_mappers'];
    }

    /**
     * Sets protocol_mappers
     *
     * @param \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[]|null $protocol_mappers protocol_mappers
     *
     * @return self
     */
    public function set_protocol_mappers($protocol_mappers)
    {
        if (is_null($protocol_mappers)) {
            throw new \InvalidArgumentException('non-nullable protocol_mappers cannot be null');
        }
        $this->container['protocol_mappers'] = $protocol_mappers;

        return $this;
    }

    /**
     * Gets client_template
     *
     * @return string|null
     * @deprecated
     */
    public function get_client_template()
    {
        return $this->container['client_template'];
    }

    /**
     * Sets client_template
     *
     * @param string|null $client_template client_template
     *
     * @return self
     * @deprecated
     */
    public function set_client_template($client_template)
    {
        if (is_null($client_template)) {
            throw new \InvalidArgumentException('non-nullable client_template cannot be null');
        }
        $this->container['client_template'] = $client_template;

        return $this;
    }

    /**
     * Gets use_template_config
     *
     * @return bool|null
     * @deprecated
     */
    public function get_use_template_config()
    {
        return $this->container['use_template_config'];
    }

    /**
     * Sets use_template_config
     *
     * @param bool|null $use_template_config use_template_config
     *
     * @return self
     * @deprecated
     */
    public function set_use_template_config($use_template_config)
    {
        if (is_null($use_template_config)) {
            throw new \InvalidArgumentException('non-nullable use_template_config cannot be null');
        }
        $this->container['use_template_config'] = $use_template_config;

        return $this;
    }

    /**
     * Gets use_template_scope
     *
     * @return bool|null
     * @deprecated
     */
    public function get_use_template_scope()
    {
        return $this->container['use_template_scope'];
    }

    /**
     * Sets use_template_scope
     *
     * @param bool|null $use_template_scope use_template_scope
     *
     * @return self
     * @deprecated
     */
    public function set_use_template_scope($use_template_scope)
    {
        if (is_null($use_template_scope)) {
            throw new \InvalidArgumentException('non-nullable use_template_scope cannot be null');
        }
        $this->container['use_template_scope'] = $use_template_scope;

        return $this;
    }

    /**
     * Gets use_template_mappers
     *
     * @return bool|null
     * @deprecated
     */
    public function get_use_template_mappers()
    {
        return $this->container['use_template_mappers'];
    }

    /**
     * Sets use_template_mappers
     *
     * @param bool|null $use_template_mappers use_template_mappers
     *
     * @return self
     * @deprecated
     */
    public function set_use_template_mappers($use_template_mappers)
    {
        if (is_null($use_template_mappers)) {
            throw new \InvalidArgumentException('non-nullable use_template_mappers cannot be null');
        }
        $this->container['use_template_mappers'] = $use_template_mappers;

        return $this;
    }

    /**
     * Gets default_client_scopes
     *
     * @return string[]|null
     */
    public function get_default_client_scopes()
    {
        return $this->container['default_client_scopes'];
    }

    /**
     * Sets default_client_scopes
     *
     * @param string[]|null $default_client_scopes default_client_scopes
     *
     * @return self
     */
    public function set_default_client_scopes($default_client_scopes)
    {
        if (is_null($default_client_scopes)) {
            throw new \InvalidArgumentException('non-nullable default_client_scopes cannot be null');
        }
        $this->container['default_client_scopes'] = $default_client_scopes;

        return $this;
    }

    /**
     * Gets optional_client_scopes
     *
     * @return string[]|null
     */
    public function get_optional_client_scopes()
    {
        return $this->container['optional_client_scopes'];
    }

    /**
     * Sets optional_client_scopes
     *
     * @param string[]|null $optional_client_scopes optional_client_scopes
     *
     * @return self
     */
    public function set_optional_client_scopes($optional_client_scopes)
    {
        if (is_null($optional_client_scopes)) {
            throw new \InvalidArgumentException('non-nullable optional_client_scopes cannot be null');
        }
        $this->container['optional_client_scopes'] = $optional_client_scopes;

        return $this;
    }

    /**
     * Gets authorization_settings
     *
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\ResourceServerRepresentation|null
     */
    public function get_authorization_settings()
    {
        return $this->container['authorization_settings'];
    }

    /**
     * Sets authorization_settings
     *
     * @param \WebMI\KeycloakApiClient\KeycloakApi\Model\ResourceServerRepresentation|null $authorization_settings authorization_settings
     *
     * @return self
     */
    public function set_authorization_settings($authorization_settings)
    {
        if (is_null($authorization_settings)) {
            throw new \InvalidArgumentException('non-nullable authorization_settings cannot be null');
        }
        $this->container['authorization_settings'] = $authorization_settings;

        return $this;
    }

    /**
     * Gets access
     *
     * @return array<string,bool>|null
     */
    public function get_access()
    {
        return $this->container['access'];
    }

    /**
     * Sets access
     *
     * @param array<string,bool>|null $access access
     *
     * @return self
     */
    public function set_access($access)
    {
        if (is_null($access)) {
            throw new \InvalidArgumentException('non-nullable access cannot be null');
        }
        $this->container['access'] = $access;

        return $this;
    }

    /**
     * Gets origin
     *
     * @return string|null
     */
    public function get_origin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     *
     * @param string|null $origin origin
     *
     * @return self
     */
    public function set_origin($origin)
    {
        if (is_null($origin)) {
            throw new \InvalidArgumentException('non-nullable origin cannot be null');
        }
        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function get_name()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function set_name($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets claims
     *
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\ClaimRepresentation|null
     * @deprecated
     */
    public function get_claims()
    {
        return $this->container['claims'];
    }

    /**
     * Sets claims
     *
     * @param \WebMI\KeycloakApiClient\KeycloakApi\Model\ClaimRepresentation|null $claims claims
     *
     * @return self
     * @deprecated
     */
    public function set_claims($claims)
    {
        if (is_null($claims)) {
            throw new \InvalidArgumentException('non-nullable claims cannot be null');
        }
        $this->container['claims'] = $claims;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


