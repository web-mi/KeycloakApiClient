<?php
/**
 * IdentityProvidersApi
 * PHP version 7.4
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace WebMI\KeycloakApiClient\KeycloakApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use WebMI\KeycloakApiClient\KeycloakApi\ApiException;
use WebMI\KeycloakApiClient\KeycloakApi\Configuration;
use WebMI\KeycloakApiClient\KeycloakApi\HeaderSelector;
use WebMI\KeycloakApiClient\KeycloakApi\ObjectSerializer;

/**
 * IdentityProvidersApi Class Doc Comment
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class IdentityProvidersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'adminRealmsRealmIdentityProviderImportConfigPost' => [
            'application/json',
        ],
        'adminRealmsRealmIdentityProviderInstancesAliasDelete' => [
            'application/json',
        ],
        'adminRealmsRealmIdentityProviderInstancesAliasExportGet' => [
            'application/json',
        ],
        'adminRealmsRealmIdentityProviderInstancesAliasGet' => [
            'application/json',
        ],
        'adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGet' => [
            'application/json',
        ],
        'adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPut' => [
            'application/json',
        ],
        'adminRealmsRealmIdentityProviderInstancesAliasMapperTypesGet' => [
            'application/json',
        ],
        'adminRealmsRealmIdentityProviderInstancesAliasMappersGet' => [
            'application/json',
        ],
        'adminRealmsRealmIdentityProviderInstancesAliasMappersIdDelete' => [
            'application/json',
        ],
        'adminRealmsRealmIdentityProviderInstancesAliasMappersIdGet' => [
            'application/json',
        ],
        'adminRealmsRealmIdentityProviderInstancesAliasMappersIdPut' => [
            'application/json',
        ],
        'adminRealmsRealmIdentityProviderInstancesAliasMappersPost' => [
            'application/json',
        ],
        'adminRealmsRealmIdentityProviderInstancesAliasPut' => [
            'application/json',
        ],
        'adminRealmsRealmIdentityProviderInstancesAliasReloadKeysGet' => [
            'application/json',
        ],
        'adminRealmsRealmIdentityProviderInstancesGet' => [
            'application/json',
        ],
        'adminRealmsRealmIdentityProviderInstancesPost' => [
            'application/json',
        ],
        'adminRealmsRealmIdentityProviderProvidersProviderIdGet' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation adminRealmsRealmIdentityProviderImportConfigPost
     *
     * Import identity provider from JSON body
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  array<string,mixed> $request_body request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderImportConfigPost'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array<string,string>
     */
    public function adminRealmsRealmIdentityProviderImportConfigPost($realm, $request_body = null, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderImportConfigPost'][0])
    {
        list($response) = $this->adminRealmsRealmIdentityProviderImportConfigPostWithHttpInfo($realm, $request_body, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmIdentityProviderImportConfigPostWithHttpInfo
     *
     * Import identity provider from JSON body
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  array<string,mixed> $request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderImportConfigPost'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of array<string,string>, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmIdentityProviderImportConfigPostWithHttpInfo($realm, $request_body = null, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderImportConfigPost'][0])
    {
        $request = $this->adminRealmsRealmIdentityProviderImportConfigPostRequest($realm, $request_body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('array<string,string>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,string>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,string>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'array<string,string>';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmIdentityProviderImportConfigPostAsync
     *
     * Import identity provider from JSON body
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  array<string,mixed> $request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderImportConfigPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmIdentityProviderImportConfigPostAsync($realm, $request_body = null, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderImportConfigPost'][0])
    {
        return $this->adminRealmsRealmIdentityProviderImportConfigPostAsyncWithHttpInfo($realm, $request_body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmIdentityProviderImportConfigPostAsyncWithHttpInfo
     *
     * Import identity provider from JSON body
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  array<string,mixed> $request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderImportConfigPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmIdentityProviderImportConfigPostAsyncWithHttpInfo($realm, $request_body = null, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderImportConfigPost'][0])
    {
        $returnType = 'array<string,string>';
        $request = $this->adminRealmsRealmIdentityProviderImportConfigPostRequest($realm, $request_body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmIdentityProviderImportConfigPost'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  array<string,mixed> $request_body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderImportConfigPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmIdentityProviderImportConfigPostRequest($realm, $request_body = null, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderImportConfigPost'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmIdentityProviderImportConfigPost'
            );
        }



        $resourcePath = '/admin/realms/{realm}/identity-provider/import-config';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request_body));
            } else {
                $httpBody = $request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesAliasDelete
     *
     * Delete the identity provider
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias alias (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasDelete'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasDelete($realm, $alias, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasDelete'][0])
    {
        $this->adminRealmsRealmIdentityProviderInstancesAliasDeleteWithHttpInfo($realm, $alias, $contentType);
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesAliasDeleteWithHttpInfo
     *
     * Delete the identity provider
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasDelete'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasDeleteWithHttpInfo($realm, $alias, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasDelete'][0])
    {
        $request = $this->adminRealmsRealmIdentityProviderInstancesAliasDeleteRequest($realm, $alias, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesAliasDeleteAsync
     *
     * Delete the identity provider
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasDeleteAsync($realm, $alias, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasDelete'][0])
    {
        return $this->adminRealmsRealmIdentityProviderInstancesAliasDeleteAsyncWithHttpInfo($realm, $alias, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesAliasDeleteAsyncWithHttpInfo
     *
     * Delete the identity provider
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasDeleteAsyncWithHttpInfo($realm, $alias, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasDelete'][0])
    {
        $returnType = '';
        $request = $this->adminRealmsRealmIdentityProviderInstancesAliasDeleteRequest($realm, $alias, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmIdentityProviderInstancesAliasDelete'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasDeleteRequest($realm, $alias, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasDelete'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmIdentityProviderInstancesAliasDelete'
            );
        }

        // verify the required parameter 'alias' is set
        if ($alias === null || (is_array($alias) && count($alias) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $alias when calling adminRealmsRealmIdentityProviderInstancesAliasDelete'
            );
        }


        $resourcePath = '/admin/realms/{realm}/identity-provider/instances/{alias}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($alias !== null) {
            $resourcePath = str_replace(
                '{' . 'alias' . '}',
                ObjectSerializer::toPathValue($alias),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesAliasExportGet
     *
     * Export public broker configuration for identity provider
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias alias (required)
     * @param  string $format Format to use (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasExportGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasExportGet($realm, $alias, $format = null, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasExportGet'][0])
    {
        $this->adminRealmsRealmIdentityProviderInstancesAliasExportGetWithHttpInfo($realm, $alias, $format, $contentType);
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesAliasExportGetWithHttpInfo
     *
     * Export public broker configuration for identity provider
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias (required)
     * @param  string $format Format to use (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasExportGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasExportGetWithHttpInfo($realm, $alias, $format = null, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasExportGet'][0])
    {
        $request = $this->adminRealmsRealmIdentityProviderInstancesAliasExportGetRequest($realm, $alias, $format, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesAliasExportGetAsync
     *
     * Export public broker configuration for identity provider
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias (required)
     * @param  string $format Format to use (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasExportGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasExportGetAsync($realm, $alias, $format = null, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasExportGet'][0])
    {
        return $this->adminRealmsRealmIdentityProviderInstancesAliasExportGetAsyncWithHttpInfo($realm, $alias, $format, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesAliasExportGetAsyncWithHttpInfo
     *
     * Export public broker configuration for identity provider
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias (required)
     * @param  string $format Format to use (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasExportGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasExportGetAsyncWithHttpInfo($realm, $alias, $format = null, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasExportGet'][0])
    {
        $returnType = '';
        $request = $this->adminRealmsRealmIdentityProviderInstancesAliasExportGetRequest($realm, $alias, $format, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmIdentityProviderInstancesAliasExportGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias (required)
     * @param  string $format Format to use (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasExportGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasExportGetRequest($realm, $alias, $format = null, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasExportGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmIdentityProviderInstancesAliasExportGet'
            );
        }

        // verify the required parameter 'alias' is set
        if ($alias === null || (is_array($alias) && count($alias) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $alias when calling adminRealmsRealmIdentityProviderInstancesAliasExportGet'
            );
        }



        $resourcePath = '/admin/realms/{realm}/identity-provider/instances/{alias}/export';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $format,
            'format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($alias !== null) {
            $resourcePath = str_replace(
                '{' . 'alias' . '}',
                ObjectSerializer::toPathValue($alias),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesAliasGet
     *
     * Get the identity provider
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias alias (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderRepresentation
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasGet($realm, $alias, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasGet'][0])
    {
        list($response) = $this->adminRealmsRealmIdentityProviderInstancesAliasGetWithHttpInfo($realm, $alias, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesAliasGetWithHttpInfo
     *
     * Get the identity provider
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderRepresentation, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasGetWithHttpInfo($realm, $alias, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasGet'][0])
    {
        $request = $this->adminRealmsRealmIdentityProviderInstancesAliasGetRequest($realm, $alias, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderRepresentation' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderRepresentation' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderRepresentation', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderRepresentation';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderRepresentation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesAliasGetAsync
     *
     * Get the identity provider
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasGetAsync($realm, $alias, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasGet'][0])
    {
        return $this->adminRealmsRealmIdentityProviderInstancesAliasGetAsyncWithHttpInfo($realm, $alias, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesAliasGetAsyncWithHttpInfo
     *
     * Get the identity provider
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasGetAsyncWithHttpInfo($realm, $alias, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderRepresentation';
        $request = $this->adminRealmsRealmIdentityProviderInstancesAliasGetRequest($realm, $alias, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmIdentityProviderInstancesAliasGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasGetRequest($realm, $alias, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmIdentityProviderInstancesAliasGet'
            );
        }

        // verify the required parameter 'alias' is set
        if ($alias === null || (is_array($alias) && count($alias) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $alias when calling adminRealmsRealmIdentityProviderInstancesAliasGet'
            );
        }


        $resourcePath = '/admin/realms/{realm}/identity-provider/instances/{alias}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($alias !== null) {
            $resourcePath = str_replace(
                '{' . 'alias' . '}',
                ObjectSerializer::toPathValue($alias),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGet
     *
     * Return object stating whether client Authorization permissions have been initialized or not and a reference
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias alias (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGet($realm, $alias, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGet'][0])
    {
        list($response) = $this->adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGetWithHttpInfo($realm, $alias, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGetWithHttpInfo
     *
     * Return object stating whether client Authorization permissions have been initialized or not and a reference
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGetWithHttpInfo($realm, $alias, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGet'][0])
    {
        $request = $this->adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGetRequest($realm, $alias, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGetAsync
     *
     * Return object stating whether client Authorization permissions have been initialized or not and a reference
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGetAsync($realm, $alias, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGet'][0])
    {
        return $this->adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGetAsyncWithHttpInfo($realm, $alias, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGetAsyncWithHttpInfo
     *
     * Return object stating whether client Authorization permissions have been initialized or not and a reference
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGetAsyncWithHttpInfo($realm, $alias, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference';
        $request = $this->adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGetRequest($realm, $alias, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGetRequest($realm, $alias, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGet'
            );
        }

        // verify the required parameter 'alias' is set
        if ($alias === null || (is_array($alias) && count($alias) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $alias when calling adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsGet'
            );
        }


        $resourcePath = '/admin/realms/{realm}/identity-provider/instances/{alias}/management/permissions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($alias !== null) {
            $resourcePath = str_replace(
                '{' . 'alias' . '}',
                ObjectSerializer::toPathValue($alias),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPut
     *
     * Return object stating whether client Authorization permissions have been initialized or not and a reference
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias alias (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference $management_permission_reference management_permission_reference (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPut'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPut($realm, $alias, $management_permission_reference = null, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPut'][0])
    {
        list($response) = $this->adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPutWithHttpInfo($realm, $alias, $management_permission_reference, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPutWithHttpInfo
     *
     * Return object stating whether client Authorization permissions have been initialized or not and a reference
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference $management_permission_reference (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPut'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPutWithHttpInfo($realm, $alias, $management_permission_reference = null, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPut'][0])
    {
        $request = $this->adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPutRequest($realm, $alias, $management_permission_reference, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPutAsync
     *
     * Return object stating whether client Authorization permissions have been initialized or not and a reference
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference $management_permission_reference (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPutAsync($realm, $alias, $management_permission_reference = null, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPut'][0])
    {
        return $this->adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPutAsyncWithHttpInfo($realm, $alias, $management_permission_reference, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPutAsyncWithHttpInfo
     *
     * Return object stating whether client Authorization permissions have been initialized or not and a reference
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference $management_permission_reference (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPutAsyncWithHttpInfo($realm, $alias, $management_permission_reference = null, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPut'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference';
        $request = $this->adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPutRequest($realm, $alias, $management_permission_reference, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPut'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference $management_permission_reference (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPutRequest($realm, $alias, $management_permission_reference = null, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPut'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPut'
            );
        }

        // verify the required parameter 'alias' is set
        if ($alias === null || (is_array($alias) && count($alias) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $alias when calling adminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsPut'
            );
        }



        $resourcePath = '/admin/realms/{realm}/identity-provider/instances/{alias}/management/permissions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($alias !== null) {
            $resourcePath = str_replace(
                '{' . 'alias' . '}',
                ObjectSerializer::toPathValue($alias),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($management_permission_reference)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($management_permission_reference));
            } else {
                $httpBody = $management_permission_reference;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesAliasMapperTypesGet
     *
     * Get mapper types for identity provider
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias alias (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMapperTypesGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array<string,\WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderMapperTypeRepresentation>
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasMapperTypesGet($realm, $alias, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMapperTypesGet'][0])
    {
        list($response) = $this->adminRealmsRealmIdentityProviderInstancesAliasMapperTypesGetWithHttpInfo($realm, $alias, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesAliasMapperTypesGetWithHttpInfo
     *
     * Get mapper types for identity provider
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMapperTypesGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of array<string,\WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderMapperTypeRepresentation>, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasMapperTypesGetWithHttpInfo($realm, $alias, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMapperTypesGet'][0])
    {
        $request = $this->adminRealmsRealmIdentityProviderInstancesAliasMapperTypesGetRequest($realm, $alias, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('array<string,\WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderMapperTypeRepresentation>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,\WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderMapperTypeRepresentation>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,\WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderMapperTypeRepresentation>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'array<string,\WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderMapperTypeRepresentation>';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,\WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderMapperTypeRepresentation>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesAliasMapperTypesGetAsync
     *
     * Get mapper types for identity provider
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMapperTypesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasMapperTypesGetAsync($realm, $alias, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMapperTypesGet'][0])
    {
        return $this->adminRealmsRealmIdentityProviderInstancesAliasMapperTypesGetAsyncWithHttpInfo($realm, $alias, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesAliasMapperTypesGetAsyncWithHttpInfo
     *
     * Get mapper types for identity provider
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMapperTypesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasMapperTypesGetAsyncWithHttpInfo($realm, $alias, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMapperTypesGet'][0])
    {
        $returnType = 'array<string,\WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderMapperTypeRepresentation>';
        $request = $this->adminRealmsRealmIdentityProviderInstancesAliasMapperTypesGetRequest($realm, $alias, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmIdentityProviderInstancesAliasMapperTypesGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMapperTypesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasMapperTypesGetRequest($realm, $alias, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMapperTypesGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmIdentityProviderInstancesAliasMapperTypesGet'
            );
        }

        // verify the required parameter 'alias' is set
        if ($alias === null || (is_array($alias) && count($alias) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $alias when calling adminRealmsRealmIdentityProviderInstancesAliasMapperTypesGet'
            );
        }


        $resourcePath = '/admin/realms/{realm}/identity-provider/instances/{alias}/mapper-types';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($alias !== null) {
            $resourcePath = str_replace(
                '{' . 'alias' . '}',
                ObjectSerializer::toPathValue($alias),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesAliasMappersGet
     *
     * Get mappers for identity provider
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias alias (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMappersGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderMapperRepresentation[]
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasMappersGet($realm, $alias, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMappersGet'][0])
    {
        list($response) = $this->adminRealmsRealmIdentityProviderInstancesAliasMappersGetWithHttpInfo($realm, $alias, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesAliasMappersGetWithHttpInfo
     *
     * Get mappers for identity provider
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMappersGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderMapperRepresentation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasMappersGetWithHttpInfo($realm, $alias, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMappersGet'][0])
    {
        $request = $this->adminRealmsRealmIdentityProviderInstancesAliasMappersGetRequest($realm, $alias, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderMapperRepresentation[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderMapperRepresentation[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderMapperRepresentation[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderMapperRepresentation[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderMapperRepresentation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesAliasMappersGetAsync
     *
     * Get mappers for identity provider
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMappersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasMappersGetAsync($realm, $alias, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMappersGet'][0])
    {
        return $this->adminRealmsRealmIdentityProviderInstancesAliasMappersGetAsyncWithHttpInfo($realm, $alias, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesAliasMappersGetAsyncWithHttpInfo
     *
     * Get mappers for identity provider
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMappersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasMappersGetAsyncWithHttpInfo($realm, $alias, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMappersGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderMapperRepresentation[]';
        $request = $this->adminRealmsRealmIdentityProviderInstancesAliasMappersGetRequest($realm, $alias, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmIdentityProviderInstancesAliasMappersGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMappersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasMappersGetRequest($realm, $alias, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMappersGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmIdentityProviderInstancesAliasMappersGet'
            );
        }

        // verify the required parameter 'alias' is set
        if ($alias === null || (is_array($alias) && count($alias) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $alias when calling adminRealmsRealmIdentityProviderInstancesAliasMappersGet'
            );
        }


        $resourcePath = '/admin/realms/{realm}/identity-provider/instances/{alias}/mappers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($alias !== null) {
            $resourcePath = str_replace(
                '{' . 'alias' . '}',
                ObjectSerializer::toPathValue($alias),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesAliasMappersIdDelete
     *
     * Delete a mapper for the identity provider
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias alias (required)
     * @param  string $id Mapper id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMappersIdDelete'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasMappersIdDelete($realm, $alias, $id, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMappersIdDelete'][0])
    {
        $this->adminRealmsRealmIdentityProviderInstancesAliasMappersIdDeleteWithHttpInfo($realm, $alias, $id, $contentType);
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesAliasMappersIdDeleteWithHttpInfo
     *
     * Delete a mapper for the identity provider
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias (required)
     * @param  string $id Mapper id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMappersIdDelete'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasMappersIdDeleteWithHttpInfo($realm, $alias, $id, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMappersIdDelete'][0])
    {
        $request = $this->adminRealmsRealmIdentityProviderInstancesAliasMappersIdDeleteRequest($realm, $alias, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesAliasMappersIdDeleteAsync
     *
     * Delete a mapper for the identity provider
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias (required)
     * @param  string $id Mapper id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMappersIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasMappersIdDeleteAsync($realm, $alias, $id, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMappersIdDelete'][0])
    {
        return $this->adminRealmsRealmIdentityProviderInstancesAliasMappersIdDeleteAsyncWithHttpInfo($realm, $alias, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesAliasMappersIdDeleteAsyncWithHttpInfo
     *
     * Delete a mapper for the identity provider
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias (required)
     * @param  string $id Mapper id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMappersIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasMappersIdDeleteAsyncWithHttpInfo($realm, $alias, $id, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMappersIdDelete'][0])
    {
        $returnType = '';
        $request = $this->adminRealmsRealmIdentityProviderInstancesAliasMappersIdDeleteRequest($realm, $alias, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmIdentityProviderInstancesAliasMappersIdDelete'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias (required)
     * @param  string $id Mapper id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMappersIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasMappersIdDeleteRequest($realm, $alias, $id, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMappersIdDelete'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmIdentityProviderInstancesAliasMappersIdDelete'
            );
        }

        // verify the required parameter 'alias' is set
        if ($alias === null || (is_array($alias) && count($alias) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $alias when calling adminRealmsRealmIdentityProviderInstancesAliasMappersIdDelete'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling adminRealmsRealmIdentityProviderInstancesAliasMappersIdDelete'
            );
        }


        $resourcePath = '/admin/realms/{realm}/identity-provider/instances/{alias}/mappers/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($alias !== null) {
            $resourcePath = str_replace(
                '{' . 'alias' . '}',
                ObjectSerializer::toPathValue($alias),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesAliasMappersIdGet
     *
     * Get mapper by id for the identity provider
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias alias (required)
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMappersIdGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderMapperRepresentation
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasMappersIdGet($realm, $alias, $id, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMappersIdGet'][0])
    {
        list($response) = $this->adminRealmsRealmIdentityProviderInstancesAliasMappersIdGetWithHttpInfo($realm, $alias, $id, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesAliasMappersIdGetWithHttpInfo
     *
     * Get mapper by id for the identity provider
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias (required)
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMappersIdGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderMapperRepresentation, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasMappersIdGetWithHttpInfo($realm, $alias, $id, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMappersIdGet'][0])
    {
        $request = $this->adminRealmsRealmIdentityProviderInstancesAliasMappersIdGetRequest($realm, $alias, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderMapperRepresentation' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderMapperRepresentation' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderMapperRepresentation', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderMapperRepresentation';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderMapperRepresentation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesAliasMappersIdGetAsync
     *
     * Get mapper by id for the identity provider
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias (required)
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMappersIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasMappersIdGetAsync($realm, $alias, $id, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMappersIdGet'][0])
    {
        return $this->adminRealmsRealmIdentityProviderInstancesAliasMappersIdGetAsyncWithHttpInfo($realm, $alias, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesAliasMappersIdGetAsyncWithHttpInfo
     *
     * Get mapper by id for the identity provider
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias (required)
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMappersIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasMappersIdGetAsyncWithHttpInfo($realm, $alias, $id, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMappersIdGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderMapperRepresentation';
        $request = $this->adminRealmsRealmIdentityProviderInstancesAliasMappersIdGetRequest($realm, $alias, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmIdentityProviderInstancesAliasMappersIdGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias (required)
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMappersIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasMappersIdGetRequest($realm, $alias, $id, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMappersIdGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmIdentityProviderInstancesAliasMappersIdGet'
            );
        }

        // verify the required parameter 'alias' is set
        if ($alias === null || (is_array($alias) && count($alias) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $alias when calling adminRealmsRealmIdentityProviderInstancesAliasMappersIdGet'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling adminRealmsRealmIdentityProviderInstancesAliasMappersIdGet'
            );
        }


        $resourcePath = '/admin/realms/{realm}/identity-provider/instances/{alias}/mappers/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($alias !== null) {
            $resourcePath = str_replace(
                '{' . 'alias' . '}',
                ObjectSerializer::toPathValue($alias),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesAliasMappersIdPut
     *
     * Update a mapper for the identity provider
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias alias (required)
     * @param  string $id Mapper id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderMapperRepresentation $identity_provider_mapper_representation identity_provider_mapper_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMappersIdPut'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasMappersIdPut($realm, $alias, $id, $identity_provider_mapper_representation = null, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMappersIdPut'][0])
    {
        $this->adminRealmsRealmIdentityProviderInstancesAliasMappersIdPutWithHttpInfo($realm, $alias, $id, $identity_provider_mapper_representation, $contentType);
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesAliasMappersIdPutWithHttpInfo
     *
     * Update a mapper for the identity provider
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias (required)
     * @param  string $id Mapper id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderMapperRepresentation $identity_provider_mapper_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMappersIdPut'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasMappersIdPutWithHttpInfo($realm, $alias, $id, $identity_provider_mapper_representation = null, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMappersIdPut'][0])
    {
        $request = $this->adminRealmsRealmIdentityProviderInstancesAliasMappersIdPutRequest($realm, $alias, $id, $identity_provider_mapper_representation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesAliasMappersIdPutAsync
     *
     * Update a mapper for the identity provider
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias (required)
     * @param  string $id Mapper id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderMapperRepresentation $identity_provider_mapper_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMappersIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasMappersIdPutAsync($realm, $alias, $id, $identity_provider_mapper_representation = null, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMappersIdPut'][0])
    {
        return $this->adminRealmsRealmIdentityProviderInstancesAliasMappersIdPutAsyncWithHttpInfo($realm, $alias, $id, $identity_provider_mapper_representation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesAliasMappersIdPutAsyncWithHttpInfo
     *
     * Update a mapper for the identity provider
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias (required)
     * @param  string $id Mapper id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderMapperRepresentation $identity_provider_mapper_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMappersIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasMappersIdPutAsyncWithHttpInfo($realm, $alias, $id, $identity_provider_mapper_representation = null, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMappersIdPut'][0])
    {
        $returnType = '';
        $request = $this->adminRealmsRealmIdentityProviderInstancesAliasMappersIdPutRequest($realm, $alias, $id, $identity_provider_mapper_representation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmIdentityProviderInstancesAliasMappersIdPut'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias (required)
     * @param  string $id Mapper id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderMapperRepresentation $identity_provider_mapper_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMappersIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasMappersIdPutRequest($realm, $alias, $id, $identity_provider_mapper_representation = null, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMappersIdPut'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmIdentityProviderInstancesAliasMappersIdPut'
            );
        }

        // verify the required parameter 'alias' is set
        if ($alias === null || (is_array($alias) && count($alias) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $alias when calling adminRealmsRealmIdentityProviderInstancesAliasMappersIdPut'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling adminRealmsRealmIdentityProviderInstancesAliasMappersIdPut'
            );
        }



        $resourcePath = '/admin/realms/{realm}/identity-provider/instances/{alias}/mappers/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($alias !== null) {
            $resourcePath = str_replace(
                '{' . 'alias' . '}',
                ObjectSerializer::toPathValue($alias),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($identity_provider_mapper_representation)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($identity_provider_mapper_representation));
            } else {
                $httpBody = $identity_provider_mapper_representation;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesAliasMappersPost
     *
     * Add a mapper to identity provider
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias alias (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderMapperRepresentation $identity_provider_mapper_representation identity_provider_mapper_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMappersPost'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasMappersPost($realm, $alias, $identity_provider_mapper_representation = null, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMappersPost'][0])
    {
        $this->adminRealmsRealmIdentityProviderInstancesAliasMappersPostWithHttpInfo($realm, $alias, $identity_provider_mapper_representation, $contentType);
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesAliasMappersPostWithHttpInfo
     *
     * Add a mapper to identity provider
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderMapperRepresentation $identity_provider_mapper_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMappersPost'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasMappersPostWithHttpInfo($realm, $alias, $identity_provider_mapper_representation = null, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMappersPost'][0])
    {
        $request = $this->adminRealmsRealmIdentityProviderInstancesAliasMappersPostRequest($realm, $alias, $identity_provider_mapper_representation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesAliasMappersPostAsync
     *
     * Add a mapper to identity provider
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderMapperRepresentation $identity_provider_mapper_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMappersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasMappersPostAsync($realm, $alias, $identity_provider_mapper_representation = null, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMappersPost'][0])
    {
        return $this->adminRealmsRealmIdentityProviderInstancesAliasMappersPostAsyncWithHttpInfo($realm, $alias, $identity_provider_mapper_representation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesAliasMappersPostAsyncWithHttpInfo
     *
     * Add a mapper to identity provider
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderMapperRepresentation $identity_provider_mapper_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMappersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasMappersPostAsyncWithHttpInfo($realm, $alias, $identity_provider_mapper_representation = null, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMappersPost'][0])
    {
        $returnType = '';
        $request = $this->adminRealmsRealmIdentityProviderInstancesAliasMappersPostRequest($realm, $alias, $identity_provider_mapper_representation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmIdentityProviderInstancesAliasMappersPost'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderMapperRepresentation $identity_provider_mapper_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMappersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasMappersPostRequest($realm, $alias, $identity_provider_mapper_representation = null, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasMappersPost'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmIdentityProviderInstancesAliasMappersPost'
            );
        }

        // verify the required parameter 'alias' is set
        if ($alias === null || (is_array($alias) && count($alias) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $alias when calling adminRealmsRealmIdentityProviderInstancesAliasMappersPost'
            );
        }



        $resourcePath = '/admin/realms/{realm}/identity-provider/instances/{alias}/mappers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($alias !== null) {
            $resourcePath = str_replace(
                '{' . 'alias' . '}',
                ObjectSerializer::toPathValue($alias),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($identity_provider_mapper_representation)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($identity_provider_mapper_representation));
            } else {
                $httpBody = $identity_provider_mapper_representation;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesAliasPut
     *
     * Update the identity provider
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias alias (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderRepresentation $identity_provider_representation identity_provider_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasPut'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasPut($realm, $alias, $identity_provider_representation = null, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasPut'][0])
    {
        $this->adminRealmsRealmIdentityProviderInstancesAliasPutWithHttpInfo($realm, $alias, $identity_provider_representation, $contentType);
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesAliasPutWithHttpInfo
     *
     * Update the identity provider
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderRepresentation $identity_provider_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasPut'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasPutWithHttpInfo($realm, $alias, $identity_provider_representation = null, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasPut'][0])
    {
        $request = $this->adminRealmsRealmIdentityProviderInstancesAliasPutRequest($realm, $alias, $identity_provider_representation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesAliasPutAsync
     *
     * Update the identity provider
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderRepresentation $identity_provider_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasPutAsync($realm, $alias, $identity_provider_representation = null, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasPut'][0])
    {
        return $this->adminRealmsRealmIdentityProviderInstancesAliasPutAsyncWithHttpInfo($realm, $alias, $identity_provider_representation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesAliasPutAsyncWithHttpInfo
     *
     * Update the identity provider
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderRepresentation $identity_provider_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasPutAsyncWithHttpInfo($realm, $alias, $identity_provider_representation = null, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasPut'][0])
    {
        $returnType = '';
        $request = $this->adminRealmsRealmIdentityProviderInstancesAliasPutRequest($realm, $alias, $identity_provider_representation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmIdentityProviderInstancesAliasPut'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderRepresentation $identity_provider_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasPutRequest($realm, $alias, $identity_provider_representation = null, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasPut'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmIdentityProviderInstancesAliasPut'
            );
        }

        // verify the required parameter 'alias' is set
        if ($alias === null || (is_array($alias) && count($alias) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $alias when calling adminRealmsRealmIdentityProviderInstancesAliasPut'
            );
        }



        $resourcePath = '/admin/realms/{realm}/identity-provider/instances/{alias}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($alias !== null) {
            $resourcePath = str_replace(
                '{' . 'alias' . '}',
                ObjectSerializer::toPathValue($alias),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($identity_provider_representation)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($identity_provider_representation));
            } else {
                $httpBody = $identity_provider_representation;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesAliasReloadKeysGet
     *
     * Reaload keys for the identity provider if the provider supports it, \&quot;true\&quot; is returned if reload was performed, \&quot;false\&quot; if not.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias alias (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasReloadKeysGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return bool
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasReloadKeysGet($realm, $alias, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasReloadKeysGet'][0])
    {
        list($response) = $this->adminRealmsRealmIdentityProviderInstancesAliasReloadKeysGetWithHttpInfo($realm, $alias, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesAliasReloadKeysGetWithHttpInfo
     *
     * Reaload keys for the identity provider if the provider supports it, \&quot;true\&quot; is returned if reload was performed, \&quot;false\&quot; if not.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasReloadKeysGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasReloadKeysGetWithHttpInfo($realm, $alias, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasReloadKeysGet'][0])
    {
        $request = $this->adminRealmsRealmIdentityProviderInstancesAliasReloadKeysGetRequest($realm, $alias, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('bool' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('bool' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'bool', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'bool';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'bool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesAliasReloadKeysGetAsync
     *
     * Reaload keys for the identity provider if the provider supports it, \&quot;true\&quot; is returned if reload was performed, \&quot;false\&quot; if not.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasReloadKeysGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasReloadKeysGetAsync($realm, $alias, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasReloadKeysGet'][0])
    {
        return $this->adminRealmsRealmIdentityProviderInstancesAliasReloadKeysGetAsyncWithHttpInfo($realm, $alias, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesAliasReloadKeysGetAsyncWithHttpInfo
     *
     * Reaload keys for the identity provider if the provider supports it, \&quot;true\&quot; is returned if reload was performed, \&quot;false\&quot; if not.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasReloadKeysGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasReloadKeysGetAsyncWithHttpInfo($realm, $alias, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasReloadKeysGet'][0])
    {
        $returnType = 'bool';
        $request = $this->adminRealmsRealmIdentityProviderInstancesAliasReloadKeysGetRequest($realm, $alias, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmIdentityProviderInstancesAliasReloadKeysGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $alias (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasReloadKeysGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmIdentityProviderInstancesAliasReloadKeysGetRequest($realm, $alias, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesAliasReloadKeysGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmIdentityProviderInstancesAliasReloadKeysGet'
            );
        }

        // verify the required parameter 'alias' is set
        if ($alias === null || (is_array($alias) && count($alias) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $alias when calling adminRealmsRealmIdentityProviderInstancesAliasReloadKeysGet'
            );
        }


        $resourcePath = '/admin/realms/{realm}/identity-provider/instances/{alias}/reload-keys';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($alias !== null) {
            $resourcePath = str_replace(
                '{' . 'alias' . '}',
                ObjectSerializer::toPathValue($alias),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesGet
     *
     * List identity providers
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  bool $brief_representation Boolean which defines whether brief representations are returned (default: false) (optional)
     * @param  int $first Pagination offset (optional)
     * @param  int $max Maximum results size (defaults to 100) (optional)
     * @param  bool $realm_only Boolean which defines if only realm-level IDPs (not associated with orgs) should be returned (default: false) (optional)
     * @param  string $search Filter specific providers by name. Search can be prefix (name*), contains (*name*) or exact (\&quot;name\&quot;). Default prefixed. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderRepresentation[]
     */
    public function adminRealmsRealmIdentityProviderInstancesGet($realm, $brief_representation = null, $first = null, $max = null, $realm_only = null, $search = null, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesGet'][0])
    {
        list($response) = $this->adminRealmsRealmIdentityProviderInstancesGetWithHttpInfo($realm, $brief_representation, $first, $max, $realm_only, $search, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesGetWithHttpInfo
     *
     * List identity providers
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  bool $brief_representation Boolean which defines whether brief representations are returned (default: false) (optional)
     * @param  int $first Pagination offset (optional)
     * @param  int $max Maximum results size (defaults to 100) (optional)
     * @param  bool $realm_only Boolean which defines if only realm-level IDPs (not associated with orgs) should be returned (default: false) (optional)
     * @param  string $search Filter specific providers by name. Search can be prefix (name*), contains (*name*) or exact (\&quot;name\&quot;). Default prefixed. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderRepresentation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmIdentityProviderInstancesGetWithHttpInfo($realm, $brief_representation = null, $first = null, $max = null, $realm_only = null, $search = null, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesGet'][0])
    {
        $request = $this->adminRealmsRealmIdentityProviderInstancesGetRequest($realm, $brief_representation, $first, $max, $realm_only, $search, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderRepresentation[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderRepresentation[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderRepresentation[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderRepresentation[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderRepresentation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesGetAsync
     *
     * List identity providers
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  bool $brief_representation Boolean which defines whether brief representations are returned (default: false) (optional)
     * @param  int $first Pagination offset (optional)
     * @param  int $max Maximum results size (defaults to 100) (optional)
     * @param  bool $realm_only Boolean which defines if only realm-level IDPs (not associated with orgs) should be returned (default: false) (optional)
     * @param  string $search Filter specific providers by name. Search can be prefix (name*), contains (*name*) or exact (\&quot;name\&quot;). Default prefixed. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmIdentityProviderInstancesGetAsync($realm, $brief_representation = null, $first = null, $max = null, $realm_only = null, $search = null, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesGet'][0])
    {
        return $this->adminRealmsRealmIdentityProviderInstancesGetAsyncWithHttpInfo($realm, $brief_representation, $first, $max, $realm_only, $search, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesGetAsyncWithHttpInfo
     *
     * List identity providers
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  bool $brief_representation Boolean which defines whether brief representations are returned (default: false) (optional)
     * @param  int $first Pagination offset (optional)
     * @param  int $max Maximum results size (defaults to 100) (optional)
     * @param  bool $realm_only Boolean which defines if only realm-level IDPs (not associated with orgs) should be returned (default: false) (optional)
     * @param  string $search Filter specific providers by name. Search can be prefix (name*), contains (*name*) or exact (\&quot;name\&quot;). Default prefixed. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmIdentityProviderInstancesGetAsyncWithHttpInfo($realm, $brief_representation = null, $first = null, $max = null, $realm_only = null, $search = null, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderRepresentation[]';
        $request = $this->adminRealmsRealmIdentityProviderInstancesGetRequest($realm, $brief_representation, $first, $max, $realm_only, $search, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmIdentityProviderInstancesGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  bool $brief_representation Boolean which defines whether brief representations are returned (default: false) (optional)
     * @param  int $first Pagination offset (optional)
     * @param  int $max Maximum results size (defaults to 100) (optional)
     * @param  bool $realm_only Boolean which defines if only realm-level IDPs (not associated with orgs) should be returned (default: false) (optional)
     * @param  string $search Filter specific providers by name. Search can be prefix (name*), contains (*name*) or exact (\&quot;name\&quot;). Default prefixed. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmIdentityProviderInstancesGetRequest($realm, $brief_representation = null, $first = null, $max = null, $realm_only = null, $search = null, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmIdentityProviderInstancesGet'
            );
        }







        $resourcePath = '/admin/realms/{realm}/identity-provider/instances';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $brief_representation,
            'briefRepresentation', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $first,
            'first', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max,
            'max', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $realm_only,
            'realmOnly', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search,
            'search', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesPost
     *
     * Create a new identity provider
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderRepresentation $identity_provider_representation identity_provider_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesPost'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminRealmsRealmIdentityProviderInstancesPost($realm, $identity_provider_representation = null, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesPost'][0])
    {
        $this->adminRealmsRealmIdentityProviderInstancesPostWithHttpInfo($realm, $identity_provider_representation, $contentType);
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesPostWithHttpInfo
     *
     * Create a new identity provider
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderRepresentation $identity_provider_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesPost'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmIdentityProviderInstancesPostWithHttpInfo($realm, $identity_provider_representation = null, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesPost'][0])
    {
        $request = $this->adminRealmsRealmIdentityProviderInstancesPostRequest($realm, $identity_provider_representation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesPostAsync
     *
     * Create a new identity provider
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderRepresentation $identity_provider_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmIdentityProviderInstancesPostAsync($realm, $identity_provider_representation = null, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesPost'][0])
    {
        return $this->adminRealmsRealmIdentityProviderInstancesPostAsyncWithHttpInfo($realm, $identity_provider_representation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmIdentityProviderInstancesPostAsyncWithHttpInfo
     *
     * Create a new identity provider
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderRepresentation $identity_provider_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmIdentityProviderInstancesPostAsyncWithHttpInfo($realm, $identity_provider_representation = null, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesPost'][0])
    {
        $returnType = '';
        $request = $this->adminRealmsRealmIdentityProviderInstancesPostRequest($realm, $identity_provider_representation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmIdentityProviderInstancesPost'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\IdentityProviderRepresentation $identity_provider_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderInstancesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmIdentityProviderInstancesPostRequest($realm, $identity_provider_representation = null, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderInstancesPost'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmIdentityProviderInstancesPost'
            );
        }



        $resourcePath = '/admin/realms/{realm}/identity-provider/instances';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($identity_provider_representation)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($identity_provider_representation));
            } else {
                $httpBody = $identity_provider_representation;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmIdentityProviderProvidersProviderIdGet
     *
     * Get the identity provider factory for that provider id
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $provider_id The provider id to get the factory (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderProvidersProviderIdGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object
     */
    public function adminRealmsRealmIdentityProviderProvidersProviderIdGet($realm, $provider_id, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderProvidersProviderIdGet'][0])
    {
        list($response) = $this->adminRealmsRealmIdentityProviderProvidersProviderIdGetWithHttpInfo($realm, $provider_id, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmIdentityProviderProvidersProviderIdGetWithHttpInfo
     *
     * Get the identity provider factory for that provider id
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $provider_id The provider id to get the factory (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderProvidersProviderIdGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmIdentityProviderProvidersProviderIdGetWithHttpInfo($realm, $provider_id, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderProvidersProviderIdGet'][0])
    {
        $request = $this->adminRealmsRealmIdentityProviderProvidersProviderIdGetRequest($realm, $provider_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmIdentityProviderProvidersProviderIdGetAsync
     *
     * Get the identity provider factory for that provider id
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $provider_id The provider id to get the factory (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderProvidersProviderIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmIdentityProviderProvidersProviderIdGetAsync($realm, $provider_id, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderProvidersProviderIdGet'][0])
    {
        return $this->adminRealmsRealmIdentityProviderProvidersProviderIdGetAsyncWithHttpInfo($realm, $provider_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmIdentityProviderProvidersProviderIdGetAsyncWithHttpInfo
     *
     * Get the identity provider factory for that provider id
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $provider_id The provider id to get the factory (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderProvidersProviderIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmIdentityProviderProvidersProviderIdGetAsyncWithHttpInfo($realm, $provider_id, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderProvidersProviderIdGet'][0])
    {
        $returnType = 'object';
        $request = $this->adminRealmsRealmIdentityProviderProvidersProviderIdGetRequest($realm, $provider_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmIdentityProviderProvidersProviderIdGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $provider_id The provider id to get the factory (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmIdentityProviderProvidersProviderIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmIdentityProviderProvidersProviderIdGetRequest($realm, $provider_id, string $contentType = self::contentTypes['adminRealmsRealmIdentityProviderProvidersProviderIdGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmIdentityProviderProvidersProviderIdGet'
            );
        }

        // verify the required parameter 'provider_id' is set
        if ($provider_id === null || (is_array($provider_id) && count($provider_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $provider_id when calling adminRealmsRealmIdentityProviderProvidersProviderIdGet'
            );
        }


        $resourcePath = '/admin/realms/{realm}/identity-provider/providers/{provider_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($provider_id !== null) {
            $resourcePath = str_replace(
                '{' . 'provider_id' . '}',
                ObjectSerializer::toPathValue($provider_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
