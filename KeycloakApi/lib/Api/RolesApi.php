<?php
/**
 * RolesApi
 * PHP version 7.4
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace WebMI\KeycloakApiClient\KeycloakApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use WebMI\KeycloakApiClient\KeycloakApi\ApiException;
use WebMI\KeycloakApiClient\KeycloakApi\Configuration;
use WebMI\KeycloakApiClient\KeycloakApi\HeaderSelector;
use WebMI\KeycloakApiClient\KeycloakApi\ObjectSerializer;

/**
 * RolesApi Class Doc Comment
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class RolesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'adminRealmsRealmClientsClientUuidRolesGet' => [
            'application/json',
        ],
        'adminRealmsRealmClientsClientUuidRolesPost' => [
            'application/json',
        ],
        'adminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGet' => [
            'application/json',
        ],
        'adminRealmsRealmClientsClientUuidRolesRoleNameCompositesDelete' => [
            'application/json',
        ],
        'adminRealmsRealmClientsClientUuidRolesRoleNameCompositesGet' => [
            'application/json',
        ],
        'adminRealmsRealmClientsClientUuidRolesRoleNameCompositesPost' => [
            'application/json',
        ],
        'adminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGet' => [
            'application/json',
        ],
        'adminRealmsRealmClientsClientUuidRolesRoleNameDelete' => [
            'application/json',
        ],
        'adminRealmsRealmClientsClientUuidRolesRoleNameGet' => [
            'application/json',
        ],
        'adminRealmsRealmClientsClientUuidRolesRoleNameGroupsGet' => [
            'application/json',
        ],
        'adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGet' => [
            'application/json',
        ],
        'adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPut' => [
            'application/json',
        ],
        'adminRealmsRealmClientsClientUuidRolesRoleNamePut' => [
            'application/json',
        ],
        'adminRealmsRealmClientsClientUuidRolesRoleNameUsersGet' => [
            'application/json',
        ],
        'adminRealmsRealmRolesGet' => [
            'application/json',
        ],
        'adminRealmsRealmRolesPost' => [
            'application/json',
        ],
        'adminRealmsRealmRolesRoleNameCompositesClientsClientUuidGet' => [
            'application/json',
        ],
        'adminRealmsRealmRolesRoleNameCompositesDelete' => [
            'application/json',
        ],
        'adminRealmsRealmRolesRoleNameCompositesGet' => [
            'application/json',
        ],
        'adminRealmsRealmRolesRoleNameCompositesPost' => [
            'application/json',
        ],
        'adminRealmsRealmRolesRoleNameCompositesRealmGet' => [
            'application/json',
        ],
        'adminRealmsRealmRolesRoleNameDelete' => [
            'application/json',
        ],
        'adminRealmsRealmRolesRoleNameGet' => [
            'application/json',
        ],
        'adminRealmsRealmRolesRoleNameGroupsGet' => [
            'application/json',
        ],
        'adminRealmsRealmRolesRoleNameManagementPermissionsGet' => [
            'application/json',
        ],
        'adminRealmsRealmRolesRoleNameManagementPermissionsPut' => [
            'application/json',
        ],
        'adminRealmsRealmRolesRoleNamePut' => [
            'application/json',
        ],
        'adminRealmsRealmRolesRoleNameUsersGet' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidRolesGet
     *
     * Get all roles for the realm or client
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  bool $brief_representation brief_representation (optional, default to true)
     * @param  int $first first (optional)
     * @param  int $max max (optional)
     * @param  string $search search (optional, default to '')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]
     */
    public function adminRealmsRealmClientsClientUuidRolesGet($realm, $client_uuid, $brief_representation = true, $first = null, $max = null, $search = '', string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesGet'][0])
    {
        list($response) = $this->adminRealmsRealmClientsClientUuidRolesGetWithHttpInfo($realm, $client_uuid, $brief_representation, $first, $max, $search, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidRolesGetWithHttpInfo
     *
     * Get all roles for the realm or client
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  bool $brief_representation (optional, default to true)
     * @param  int $first (optional)
     * @param  int $max (optional)
     * @param  string $search (optional, default to '')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientsClientUuidRolesGetWithHttpInfo($realm, $client_uuid, $brief_representation = true, $first = null, $max = null, $search = '', string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesGet'][0])
    {
        $request = $this->adminRealmsRealmClientsClientUuidRolesGetRequest($realm, $client_uuid, $brief_representation, $first, $max, $search, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidRolesGetAsync
     *
     * Get all roles for the realm or client
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  bool $brief_representation (optional, default to true)
     * @param  int $first (optional)
     * @param  int $max (optional)
     * @param  string $search (optional, default to '')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidRolesGetAsync($realm, $client_uuid, $brief_representation = true, $first = null, $max = null, $search = '', string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesGet'][0])
    {
        return $this->adminRealmsRealmClientsClientUuidRolesGetAsyncWithHttpInfo($realm, $client_uuid, $brief_representation, $first, $max, $search, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidRolesGetAsyncWithHttpInfo
     *
     * Get all roles for the realm or client
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  bool $brief_representation (optional, default to true)
     * @param  int $first (optional)
     * @param  int $max (optional)
     * @param  string $search (optional, default to '')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidRolesGetAsyncWithHttpInfo($realm, $client_uuid, $brief_representation = true, $first = null, $max = null, $search = '', string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
        $request = $this->adminRealmsRealmClientsClientUuidRolesGetRequest($realm, $client_uuid, $brief_representation, $first, $max, $search, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientsClientUuidRolesGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  bool $brief_representation (optional, default to true)
     * @param  int $first (optional)
     * @param  int $max (optional)
     * @param  string $search (optional, default to '')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientsClientUuidRolesGetRequest($realm, $client_uuid, $brief_representation = true, $first = null, $max = null, $search = '', string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientsClientUuidRolesGet'
            );
        }

        // verify the required parameter 'client_uuid' is set
        if ($client_uuid === null || (is_array($client_uuid) && count($client_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_uuid when calling adminRealmsRealmClientsClientUuidRolesGet'
            );
        }






        $resourcePath = '/admin/realms/{realm}/clients/{client-uuid}/roles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $brief_representation,
            'briefRepresentation', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $first,
            'first', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max,
            'max', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search,
            'search', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'client-uuid' . '}',
                ObjectSerializer::toPathValue($client_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidRolesPost
     *
     * Create a new role for the realm or client
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation $role_representation role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesPost'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminRealmsRealmClientsClientUuidRolesPost($realm, $client_uuid, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesPost'][0])
    {
        $this->adminRealmsRealmClientsClientUuidRolesPostWithHttpInfo($realm, $client_uuid, $role_representation, $contentType);
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidRolesPostWithHttpInfo
     *
     * Create a new role for the realm or client
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesPost'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientsClientUuidRolesPostWithHttpInfo($realm, $client_uuid, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesPost'][0])
    {
        $request = $this->adminRealmsRealmClientsClientUuidRolesPostRequest($realm, $client_uuid, $role_representation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidRolesPostAsync
     *
     * Create a new role for the realm or client
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidRolesPostAsync($realm, $client_uuid, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesPost'][0])
    {
        return $this->adminRealmsRealmClientsClientUuidRolesPostAsyncWithHttpInfo($realm, $client_uuid, $role_representation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidRolesPostAsyncWithHttpInfo
     *
     * Create a new role for the realm or client
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidRolesPostAsyncWithHttpInfo($realm, $client_uuid, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesPost'][0])
    {
        $returnType = '';
        $request = $this->adminRealmsRealmClientsClientUuidRolesPostRequest($realm, $client_uuid, $role_representation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientsClientUuidRolesPost'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientsClientUuidRolesPostRequest($realm, $client_uuid, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesPost'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientsClientUuidRolesPost'
            );
        }

        // verify the required parameter 'client_uuid' is set
        if ($client_uuid === null || (is_array($client_uuid) && count($client_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_uuid when calling adminRealmsRealmClientsClientUuidRolesPost'
            );
        }



        $resourcePath = '/admin/realms/{realm}/clients/{client-uuid}/roles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'client-uuid' . '}',
                ObjectSerializer::toPathValue($client_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($role_representation)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($role_representation));
            } else {
                $httpBody = $role_representation;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGet
     *
     * Get client-level roles for the client that are in the role&#39;s composite
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid client_uuid (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGet($realm, $client_uuid, $role_name, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGet'][0])
    {
        list($response) = $this->adminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGetWithHttpInfo($realm, $client_uuid, $role_name, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGetWithHttpInfo
     *
     * Get client-level roles for the client that are in the role&#39;s composite
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGetWithHttpInfo($realm, $client_uuid, $role_name, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGet'][0])
    {
        $request = $this->adminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGetRequest($realm, $client_uuid, $role_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGetAsync
     *
     * Get client-level roles for the client that are in the role&#39;s composite
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGetAsync($realm, $client_uuid, $role_name, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGet'][0])
    {
        return $this->adminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGetAsyncWithHttpInfo($realm, $client_uuid, $role_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGetAsyncWithHttpInfo
     *
     * Get client-level roles for the client that are in the role&#39;s composite
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGetAsyncWithHttpInfo($realm, $client_uuid, $role_name, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
        $request = $this->adminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGetRequest($realm, $client_uuid, $role_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGetRequest($realm, $client_uuid, $role_name, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGet'
            );
        }

        // verify the required parameter 'client_uuid' is set
        if ($client_uuid === null || (is_array($client_uuid) && count($client_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_uuid when calling adminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGet'
            );
        }

        // verify the required parameter 'role_name' is set
        if ($role_name === null || (is_array($role_name) && count($role_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $role_name when calling adminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClientUuidGet'
            );
        }


        $resourcePath = '/admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}/composites/clients/{client-uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'client-uuid' . '}',
                ObjectSerializer::toPathValue($client_uuid),
                $resourcePath
            );
        }
        // path params
        if ($role_name !== null) {
            $resourcePath = str_replace(
                '{' . 'role-name' . '}',
                ObjectSerializer::toPathValue($role_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidRolesRoleNameCompositesDelete
     *
     * Remove roles from the role&#39;s composite
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameCompositesDelete'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNameCompositesDelete($realm, $client_uuid, $role_name, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameCompositesDelete'][0])
    {
        $this->adminRealmsRealmClientsClientUuidRolesRoleNameCompositesDeleteWithHttpInfo($realm, $client_uuid, $role_name, $role_representation, $contentType);
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidRolesRoleNameCompositesDeleteWithHttpInfo
     *
     * Remove roles from the role&#39;s composite
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameCompositesDelete'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNameCompositesDeleteWithHttpInfo($realm, $client_uuid, $role_name, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameCompositesDelete'][0])
    {
        $request = $this->adminRealmsRealmClientsClientUuidRolesRoleNameCompositesDeleteRequest($realm, $client_uuid, $role_name, $role_representation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidRolesRoleNameCompositesDeleteAsync
     *
     * Remove roles from the role&#39;s composite
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameCompositesDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNameCompositesDeleteAsync($realm, $client_uuid, $role_name, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameCompositesDelete'][0])
    {
        return $this->adminRealmsRealmClientsClientUuidRolesRoleNameCompositesDeleteAsyncWithHttpInfo($realm, $client_uuid, $role_name, $role_representation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidRolesRoleNameCompositesDeleteAsyncWithHttpInfo
     *
     * Remove roles from the role&#39;s composite
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameCompositesDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNameCompositesDeleteAsyncWithHttpInfo($realm, $client_uuid, $role_name, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameCompositesDelete'][0])
    {
        $returnType = '';
        $request = $this->adminRealmsRealmClientsClientUuidRolesRoleNameCompositesDeleteRequest($realm, $client_uuid, $role_name, $role_representation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientsClientUuidRolesRoleNameCompositesDelete'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameCompositesDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNameCompositesDeleteRequest($realm, $client_uuid, $role_name, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameCompositesDelete'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientsClientUuidRolesRoleNameCompositesDelete'
            );
        }

        // verify the required parameter 'client_uuid' is set
        if ($client_uuid === null || (is_array($client_uuid) && count($client_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_uuid when calling adminRealmsRealmClientsClientUuidRolesRoleNameCompositesDelete'
            );
        }

        // verify the required parameter 'role_name' is set
        if ($role_name === null || (is_array($role_name) && count($role_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $role_name when calling adminRealmsRealmClientsClientUuidRolesRoleNameCompositesDelete'
            );
        }



        $resourcePath = '/admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}/composites';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'client-uuid' . '}',
                ObjectSerializer::toPathValue($client_uuid),
                $resourcePath
            );
        }
        // path params
        if ($role_name !== null) {
            $resourcePath = str_replace(
                '{' . 'role-name' . '}',
                ObjectSerializer::toPathValue($role_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($role_representation)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($role_representation));
            } else {
                $httpBody = $role_representation;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidRolesRoleNameCompositesGet
     *
     * Get composites of the role
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameCompositesGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNameCompositesGet($realm, $client_uuid, $role_name, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameCompositesGet'][0])
    {
        list($response) = $this->adminRealmsRealmClientsClientUuidRolesRoleNameCompositesGetWithHttpInfo($realm, $client_uuid, $role_name, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidRolesRoleNameCompositesGetWithHttpInfo
     *
     * Get composites of the role
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameCompositesGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNameCompositesGetWithHttpInfo($realm, $client_uuid, $role_name, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameCompositesGet'][0])
    {
        $request = $this->adminRealmsRealmClientsClientUuidRolesRoleNameCompositesGetRequest($realm, $client_uuid, $role_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidRolesRoleNameCompositesGetAsync
     *
     * Get composites of the role
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameCompositesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNameCompositesGetAsync($realm, $client_uuid, $role_name, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameCompositesGet'][0])
    {
        return $this->adminRealmsRealmClientsClientUuidRolesRoleNameCompositesGetAsyncWithHttpInfo($realm, $client_uuid, $role_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidRolesRoleNameCompositesGetAsyncWithHttpInfo
     *
     * Get composites of the role
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameCompositesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNameCompositesGetAsyncWithHttpInfo($realm, $client_uuid, $role_name, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameCompositesGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
        $request = $this->adminRealmsRealmClientsClientUuidRolesRoleNameCompositesGetRequest($realm, $client_uuid, $role_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientsClientUuidRolesRoleNameCompositesGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameCompositesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNameCompositesGetRequest($realm, $client_uuid, $role_name, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameCompositesGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientsClientUuidRolesRoleNameCompositesGet'
            );
        }

        // verify the required parameter 'client_uuid' is set
        if ($client_uuid === null || (is_array($client_uuid) && count($client_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_uuid when calling adminRealmsRealmClientsClientUuidRolesRoleNameCompositesGet'
            );
        }

        // verify the required parameter 'role_name' is set
        if ($role_name === null || (is_array($role_name) && count($role_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $role_name when calling adminRealmsRealmClientsClientUuidRolesRoleNameCompositesGet'
            );
        }


        $resourcePath = '/admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}/composites';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'client-uuid' . '}',
                ObjectSerializer::toPathValue($client_uuid),
                $resourcePath
            );
        }
        // path params
        if ($role_name !== null) {
            $resourcePath = str_replace(
                '{' . 'role-name' . '}',
                ObjectSerializer::toPathValue($role_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidRolesRoleNameCompositesPost
     *
     * Add a composite to the role
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameCompositesPost'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNameCompositesPost($realm, $client_uuid, $role_name, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameCompositesPost'][0])
    {
        $this->adminRealmsRealmClientsClientUuidRolesRoleNameCompositesPostWithHttpInfo($realm, $client_uuid, $role_name, $role_representation, $contentType);
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidRolesRoleNameCompositesPostWithHttpInfo
     *
     * Add a composite to the role
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameCompositesPost'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNameCompositesPostWithHttpInfo($realm, $client_uuid, $role_name, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameCompositesPost'][0])
    {
        $request = $this->adminRealmsRealmClientsClientUuidRolesRoleNameCompositesPostRequest($realm, $client_uuid, $role_name, $role_representation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidRolesRoleNameCompositesPostAsync
     *
     * Add a composite to the role
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameCompositesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNameCompositesPostAsync($realm, $client_uuid, $role_name, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameCompositesPost'][0])
    {
        return $this->adminRealmsRealmClientsClientUuidRolesRoleNameCompositesPostAsyncWithHttpInfo($realm, $client_uuid, $role_name, $role_representation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidRolesRoleNameCompositesPostAsyncWithHttpInfo
     *
     * Add a composite to the role
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameCompositesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNameCompositesPostAsyncWithHttpInfo($realm, $client_uuid, $role_name, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameCompositesPost'][0])
    {
        $returnType = '';
        $request = $this->adminRealmsRealmClientsClientUuidRolesRoleNameCompositesPostRequest($realm, $client_uuid, $role_name, $role_representation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientsClientUuidRolesRoleNameCompositesPost'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameCompositesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNameCompositesPostRequest($realm, $client_uuid, $role_name, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameCompositesPost'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientsClientUuidRolesRoleNameCompositesPost'
            );
        }

        // verify the required parameter 'client_uuid' is set
        if ($client_uuid === null || (is_array($client_uuid) && count($client_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_uuid when calling adminRealmsRealmClientsClientUuidRolesRoleNameCompositesPost'
            );
        }

        // verify the required parameter 'role_name' is set
        if ($role_name === null || (is_array($role_name) && count($role_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $role_name when calling adminRealmsRealmClientsClientUuidRolesRoleNameCompositesPost'
            );
        }



        $resourcePath = '/admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}/composites';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'client-uuid' . '}',
                ObjectSerializer::toPathValue($client_uuid),
                $resourcePath
            );
        }
        // path params
        if ($role_name !== null) {
            $resourcePath = str_replace(
                '{' . 'role-name' . '}',
                ObjectSerializer::toPathValue($role_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($role_representation)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($role_representation));
            } else {
                $httpBody = $role_representation;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGet
     *
     * Get realm-level roles of the role&#39;s composite
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGet($realm, $client_uuid, $role_name, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGet'][0])
    {
        list($response) = $this->adminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGetWithHttpInfo($realm, $client_uuid, $role_name, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGetWithHttpInfo
     *
     * Get realm-level roles of the role&#39;s composite
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGetWithHttpInfo($realm, $client_uuid, $role_name, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGet'][0])
    {
        $request = $this->adminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGetRequest($realm, $client_uuid, $role_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGetAsync
     *
     * Get realm-level roles of the role&#39;s composite
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGetAsync($realm, $client_uuid, $role_name, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGet'][0])
    {
        return $this->adminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGetAsyncWithHttpInfo($realm, $client_uuid, $role_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGetAsyncWithHttpInfo
     *
     * Get realm-level roles of the role&#39;s composite
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGetAsyncWithHttpInfo($realm, $client_uuid, $role_name, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
        $request = $this->adminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGetRequest($realm, $client_uuid, $role_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGetRequest($realm, $client_uuid, $role_name, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGet'
            );
        }

        // verify the required parameter 'client_uuid' is set
        if ($client_uuid === null || (is_array($client_uuid) && count($client_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_uuid when calling adminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGet'
            );
        }

        // verify the required parameter 'role_name' is set
        if ($role_name === null || (is_array($role_name) && count($role_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $role_name when calling adminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmGet'
            );
        }


        $resourcePath = '/admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}/composites/realm';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'client-uuid' . '}',
                ObjectSerializer::toPathValue($client_uuid),
                $resourcePath
            );
        }
        // path params
        if ($role_name !== null) {
            $resourcePath = str_replace(
                '{' . 'role-name' . '}',
                ObjectSerializer::toPathValue($role_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidRolesRoleNameDelete
     *
     * Delete a role by name
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameDelete'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNameDelete($realm, $client_uuid, $role_name, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameDelete'][0])
    {
        $this->adminRealmsRealmClientsClientUuidRolesRoleNameDeleteWithHttpInfo($realm, $client_uuid, $role_name, $contentType);
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidRolesRoleNameDeleteWithHttpInfo
     *
     * Delete a role by name
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameDelete'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNameDeleteWithHttpInfo($realm, $client_uuid, $role_name, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameDelete'][0])
    {
        $request = $this->adminRealmsRealmClientsClientUuidRolesRoleNameDeleteRequest($realm, $client_uuid, $role_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidRolesRoleNameDeleteAsync
     *
     * Delete a role by name
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNameDeleteAsync($realm, $client_uuid, $role_name, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameDelete'][0])
    {
        return $this->adminRealmsRealmClientsClientUuidRolesRoleNameDeleteAsyncWithHttpInfo($realm, $client_uuid, $role_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidRolesRoleNameDeleteAsyncWithHttpInfo
     *
     * Delete a role by name
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNameDeleteAsyncWithHttpInfo($realm, $client_uuid, $role_name, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameDelete'][0])
    {
        $returnType = '';
        $request = $this->adminRealmsRealmClientsClientUuidRolesRoleNameDeleteRequest($realm, $client_uuid, $role_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientsClientUuidRolesRoleNameDelete'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNameDeleteRequest($realm, $client_uuid, $role_name, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameDelete'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientsClientUuidRolesRoleNameDelete'
            );
        }

        // verify the required parameter 'client_uuid' is set
        if ($client_uuid === null || (is_array($client_uuid) && count($client_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_uuid when calling adminRealmsRealmClientsClientUuidRolesRoleNameDelete'
            );
        }

        // verify the required parameter 'role_name' is set
        if ($role_name === null || (is_array($role_name) && count($role_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $role_name when calling adminRealmsRealmClientsClientUuidRolesRoleNameDelete'
            );
        }


        $resourcePath = '/admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'client-uuid' . '}',
                ObjectSerializer::toPathValue($client_uuid),
                $resourcePath
            );
        }
        // path params
        if ($role_name !== null) {
            $resourcePath = str_replace(
                '{' . 'role-name' . '}',
                ObjectSerializer::toPathValue($role_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidRolesRoleNameGet
     *
     * Get a role by name
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNameGet($realm, $client_uuid, $role_name, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameGet'][0])
    {
        list($response) = $this->adminRealmsRealmClientsClientUuidRolesRoleNameGetWithHttpInfo($realm, $client_uuid, $role_name, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidRolesRoleNameGetWithHttpInfo
     *
     * Get a role by name
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNameGetWithHttpInfo($realm, $client_uuid, $role_name, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameGet'][0])
    {
        $request = $this->adminRealmsRealmClientsClientUuidRolesRoleNameGetRequest($realm, $client_uuid, $role_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidRolesRoleNameGetAsync
     *
     * Get a role by name
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNameGetAsync($realm, $client_uuid, $role_name, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameGet'][0])
    {
        return $this->adminRealmsRealmClientsClientUuidRolesRoleNameGetAsyncWithHttpInfo($realm, $client_uuid, $role_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidRolesRoleNameGetAsyncWithHttpInfo
     *
     * Get a role by name
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNameGetAsyncWithHttpInfo($realm, $client_uuid, $role_name, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation';
        $request = $this->adminRealmsRealmClientsClientUuidRolesRoleNameGetRequest($realm, $client_uuid, $role_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientsClientUuidRolesRoleNameGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNameGetRequest($realm, $client_uuid, $role_name, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientsClientUuidRolesRoleNameGet'
            );
        }

        // verify the required parameter 'client_uuid' is set
        if ($client_uuid === null || (is_array($client_uuid) && count($client_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_uuid when calling adminRealmsRealmClientsClientUuidRolesRoleNameGet'
            );
        }

        // verify the required parameter 'role_name' is set
        if ($role_name === null || (is_array($role_name) && count($role_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $role_name when calling adminRealmsRealmClientsClientUuidRolesRoleNameGet'
            );
        }


        $resourcePath = '/admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'client-uuid' . '}',
                ObjectSerializer::toPathValue($client_uuid),
                $resourcePath
            );
        }
        // path params
        if ($role_name !== null) {
            $resourcePath = str_replace(
                '{' . 'role-name' . '}',
                ObjectSerializer::toPathValue($role_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidRolesRoleNameGroupsGet
     *
     * Returns a stream of groups that have the specified role name
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $role_name the role name. (required)
     * @param  bool $brief_representation if false, return a full representation of the {@code GroupRepresentation} objects. (optional, default to true)
     * @param  int $first first result to return. Ignored if negative or {@code null}. (optional)
     * @param  int $max maximum number of results to return. Ignored if negative or {@code null}. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameGroupsGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\GroupRepresentation[]
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNameGroupsGet($realm, $client_uuid, $role_name, $brief_representation = true, $first = null, $max = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameGroupsGet'][0])
    {
        list($response) = $this->adminRealmsRealmClientsClientUuidRolesRoleNameGroupsGetWithHttpInfo($realm, $client_uuid, $role_name, $brief_representation, $first, $max, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidRolesRoleNameGroupsGetWithHttpInfo
     *
     * Returns a stream of groups that have the specified role name
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $role_name the role name. (required)
     * @param  bool $brief_representation if false, return a full representation of the {@code GroupRepresentation} objects. (optional, default to true)
     * @param  int $first first result to return. Ignored if negative or {@code null}. (optional)
     * @param  int $max maximum number of results to return. Ignored if negative or {@code null}. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameGroupsGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\GroupRepresentation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNameGroupsGetWithHttpInfo($realm, $client_uuid, $role_name, $brief_representation = true, $first = null, $max = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameGroupsGet'][0])
    {
        $request = $this->adminRealmsRealmClientsClientUuidRolesRoleNameGroupsGetRequest($realm, $client_uuid, $role_name, $brief_representation, $first, $max, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\GroupRepresentation[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\GroupRepresentation[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\GroupRepresentation[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\GroupRepresentation[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\GroupRepresentation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidRolesRoleNameGroupsGetAsync
     *
     * Returns a stream of groups that have the specified role name
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $role_name the role name. (required)
     * @param  bool $brief_representation if false, return a full representation of the {@code GroupRepresentation} objects. (optional, default to true)
     * @param  int $first first result to return. Ignored if negative or {@code null}. (optional)
     * @param  int $max maximum number of results to return. Ignored if negative or {@code null}. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameGroupsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNameGroupsGetAsync($realm, $client_uuid, $role_name, $brief_representation = true, $first = null, $max = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameGroupsGet'][0])
    {
        return $this->adminRealmsRealmClientsClientUuidRolesRoleNameGroupsGetAsyncWithHttpInfo($realm, $client_uuid, $role_name, $brief_representation, $first, $max, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidRolesRoleNameGroupsGetAsyncWithHttpInfo
     *
     * Returns a stream of groups that have the specified role name
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $role_name the role name. (required)
     * @param  bool $brief_representation if false, return a full representation of the {@code GroupRepresentation} objects. (optional, default to true)
     * @param  int $first first result to return. Ignored if negative or {@code null}. (optional)
     * @param  int $max maximum number of results to return. Ignored if negative or {@code null}. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameGroupsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNameGroupsGetAsyncWithHttpInfo($realm, $client_uuid, $role_name, $brief_representation = true, $first = null, $max = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameGroupsGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\GroupRepresentation[]';
        $request = $this->adminRealmsRealmClientsClientUuidRolesRoleNameGroupsGetRequest($realm, $client_uuid, $role_name, $brief_representation, $first, $max, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientsClientUuidRolesRoleNameGroupsGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $role_name the role name. (required)
     * @param  bool $brief_representation if false, return a full representation of the {@code GroupRepresentation} objects. (optional, default to true)
     * @param  int $first first result to return. Ignored if negative or {@code null}. (optional)
     * @param  int $max maximum number of results to return. Ignored if negative or {@code null}. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameGroupsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNameGroupsGetRequest($realm, $client_uuid, $role_name, $brief_representation = true, $first = null, $max = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameGroupsGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientsClientUuidRolesRoleNameGroupsGet'
            );
        }

        // verify the required parameter 'client_uuid' is set
        if ($client_uuid === null || (is_array($client_uuid) && count($client_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_uuid when calling adminRealmsRealmClientsClientUuidRolesRoleNameGroupsGet'
            );
        }

        // verify the required parameter 'role_name' is set
        if ($role_name === null || (is_array($role_name) && count($role_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $role_name when calling adminRealmsRealmClientsClientUuidRolesRoleNameGroupsGet'
            );
        }





        $resourcePath = '/admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}/groups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $brief_representation,
            'briefRepresentation', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $first,
            'first', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max,
            'max', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'client-uuid' . '}',
                ObjectSerializer::toPathValue($client_uuid),
                $resourcePath
            );
        }
        // path params
        if ($role_name !== null) {
            $resourcePath = str_replace(
                '{' . 'role-name' . '}',
                ObjectSerializer::toPathValue($role_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGet
     *
     * Return object stating whether role Authorization permissions have been initialized or not and a reference
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $role_name role_name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGet($realm, $client_uuid, $role_name, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGet'][0])
    {
        list($response) = $this->adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGetWithHttpInfo($realm, $client_uuid, $role_name, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGetWithHttpInfo
     *
     * Return object stating whether role Authorization permissions have been initialized or not and a reference
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $role_name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGetWithHttpInfo($realm, $client_uuid, $role_name, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGet'][0])
    {
        $request = $this->adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGetRequest($realm, $client_uuid, $role_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGetAsync
     *
     * Return object stating whether role Authorization permissions have been initialized or not and a reference
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $role_name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGetAsync($realm, $client_uuid, $role_name, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGet'][0])
    {
        return $this->adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGetAsyncWithHttpInfo($realm, $client_uuid, $role_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGetAsyncWithHttpInfo
     *
     * Return object stating whether role Authorization permissions have been initialized or not and a reference
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $role_name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGetAsyncWithHttpInfo($realm, $client_uuid, $role_name, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference';
        $request = $this->adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGetRequest($realm, $client_uuid, $role_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $role_name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGetRequest($realm, $client_uuid, $role_name, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGet'
            );
        }

        // verify the required parameter 'client_uuid' is set
        if ($client_uuid === null || (is_array($client_uuid) && count($client_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_uuid when calling adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGet'
            );
        }

        // verify the required parameter 'role_name' is set
        if ($role_name === null || (is_array($role_name) && count($role_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $role_name when calling adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsGet'
            );
        }


        $resourcePath = '/admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}/management/permissions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'client-uuid' . '}',
                ObjectSerializer::toPathValue($client_uuid),
                $resourcePath
            );
        }
        // path params
        if ($role_name !== null) {
            $resourcePath = str_replace(
                '{' . 'role-name' . '}',
                ObjectSerializer::toPathValue($role_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPut
     *
     * Return object stating whether role Authorization permissions have been initialized or not and a reference
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $role_name role_name (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference $management_permission_reference management_permission_reference (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPut'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPut($realm, $client_uuid, $role_name, $management_permission_reference = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPut'][0])
    {
        list($response) = $this->adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPutWithHttpInfo($realm, $client_uuid, $role_name, $management_permission_reference, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPutWithHttpInfo
     *
     * Return object stating whether role Authorization permissions have been initialized or not and a reference
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $role_name (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference $management_permission_reference (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPut'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPutWithHttpInfo($realm, $client_uuid, $role_name, $management_permission_reference = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPut'][0])
    {
        $request = $this->adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPutRequest($realm, $client_uuid, $role_name, $management_permission_reference, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPutAsync
     *
     * Return object stating whether role Authorization permissions have been initialized or not and a reference
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $role_name (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference $management_permission_reference (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPutAsync($realm, $client_uuid, $role_name, $management_permission_reference = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPut'][0])
    {
        return $this->adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPutAsyncWithHttpInfo($realm, $client_uuid, $role_name, $management_permission_reference, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPutAsyncWithHttpInfo
     *
     * Return object stating whether role Authorization permissions have been initialized or not and a reference
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $role_name (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference $management_permission_reference (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPutAsyncWithHttpInfo($realm, $client_uuid, $role_name, $management_permission_reference = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPut'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference';
        $request = $this->adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPutRequest($realm, $client_uuid, $role_name, $management_permission_reference, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPut'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $role_name (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference $management_permission_reference (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPutRequest($realm, $client_uuid, $role_name, $management_permission_reference = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPut'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPut'
            );
        }

        // verify the required parameter 'client_uuid' is set
        if ($client_uuid === null || (is_array($client_uuid) && count($client_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_uuid when calling adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPut'
            );
        }

        // verify the required parameter 'role_name' is set
        if ($role_name === null || (is_array($role_name) && count($role_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $role_name when calling adminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsPut'
            );
        }



        $resourcePath = '/admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}/management/permissions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'client-uuid' . '}',
                ObjectSerializer::toPathValue($client_uuid),
                $resourcePath
            );
        }
        // path params
        if ($role_name !== null) {
            $resourcePath = str_replace(
                '{' . 'role-name' . '}',
                ObjectSerializer::toPathValue($role_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($management_permission_reference)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($management_permission_reference));
            } else {
                $httpBody = $management_permission_reference;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidRolesRoleNamePut
     *
     * Update a role by name
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation $role_representation role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNamePut'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNamePut($realm, $client_uuid, $role_name, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNamePut'][0])
    {
        $this->adminRealmsRealmClientsClientUuidRolesRoleNamePutWithHttpInfo($realm, $client_uuid, $role_name, $role_representation, $contentType);
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidRolesRoleNamePutWithHttpInfo
     *
     * Update a role by name
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNamePut'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNamePutWithHttpInfo($realm, $client_uuid, $role_name, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNamePut'][0])
    {
        $request = $this->adminRealmsRealmClientsClientUuidRolesRoleNamePutRequest($realm, $client_uuid, $role_name, $role_representation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidRolesRoleNamePutAsync
     *
     * Update a role by name
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNamePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNamePutAsync($realm, $client_uuid, $role_name, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNamePut'][0])
    {
        return $this->adminRealmsRealmClientsClientUuidRolesRoleNamePutAsyncWithHttpInfo($realm, $client_uuid, $role_name, $role_representation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidRolesRoleNamePutAsyncWithHttpInfo
     *
     * Update a role by name
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNamePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNamePutAsyncWithHttpInfo($realm, $client_uuid, $role_name, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNamePut'][0])
    {
        $returnType = '';
        $request = $this->adminRealmsRealmClientsClientUuidRolesRoleNamePutRequest($realm, $client_uuid, $role_name, $role_representation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientsClientUuidRolesRoleNamePut'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNamePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNamePutRequest($realm, $client_uuid, $role_name, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNamePut'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientsClientUuidRolesRoleNamePut'
            );
        }

        // verify the required parameter 'client_uuid' is set
        if ($client_uuid === null || (is_array($client_uuid) && count($client_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_uuid when calling adminRealmsRealmClientsClientUuidRolesRoleNamePut'
            );
        }

        // verify the required parameter 'role_name' is set
        if ($role_name === null || (is_array($role_name) && count($role_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $role_name when calling adminRealmsRealmClientsClientUuidRolesRoleNamePut'
            );
        }



        $resourcePath = '/admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'client-uuid' . '}',
                ObjectSerializer::toPathValue($client_uuid),
                $resourcePath
            );
        }
        // path params
        if ($role_name !== null) {
            $resourcePath = str_replace(
                '{' . 'role-name' . '}',
                ObjectSerializer::toPathValue($role_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($role_representation)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($role_representation));
            } else {
                $httpBody = $role_representation;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidRolesRoleNameUsersGet
     *
     * Returns a stream of users that have the specified role name.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $role_name the role name. (required)
     * @param  bool $brief_representation Boolean which defines whether brief representations are returned (default: false) (optional)
     * @param  int $first first result to return. Ignored if negative or {@code null}. (optional)
     * @param  int $max maximum number of results to return. Ignored if negative or {@code null}. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameUsersGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\UserRepresentation[]
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNameUsersGet($realm, $client_uuid, $role_name, $brief_representation = null, $first = null, $max = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameUsersGet'][0])
    {
        list($response) = $this->adminRealmsRealmClientsClientUuidRolesRoleNameUsersGetWithHttpInfo($realm, $client_uuid, $role_name, $brief_representation, $first, $max, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidRolesRoleNameUsersGetWithHttpInfo
     *
     * Returns a stream of users that have the specified role name.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $role_name the role name. (required)
     * @param  bool $brief_representation Boolean which defines whether brief representations are returned (default: false) (optional)
     * @param  int $first first result to return. Ignored if negative or {@code null}. (optional)
     * @param  int $max maximum number of results to return. Ignored if negative or {@code null}. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameUsersGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\UserRepresentation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNameUsersGetWithHttpInfo($realm, $client_uuid, $role_name, $brief_representation = null, $first = null, $max = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameUsersGet'][0])
    {
        $request = $this->adminRealmsRealmClientsClientUuidRolesRoleNameUsersGetRequest($realm, $client_uuid, $role_name, $brief_representation, $first, $max, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\UserRepresentation[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\UserRepresentation[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\UserRepresentation[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\UserRepresentation[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\UserRepresentation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidRolesRoleNameUsersGetAsync
     *
     * Returns a stream of users that have the specified role name.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $role_name the role name. (required)
     * @param  bool $brief_representation Boolean which defines whether brief representations are returned (default: false) (optional)
     * @param  int $first first result to return. Ignored if negative or {@code null}. (optional)
     * @param  int $max maximum number of results to return. Ignored if negative or {@code null}. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameUsersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNameUsersGetAsync($realm, $client_uuid, $role_name, $brief_representation = null, $first = null, $max = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameUsersGet'][0])
    {
        return $this->adminRealmsRealmClientsClientUuidRolesRoleNameUsersGetAsyncWithHttpInfo($realm, $client_uuid, $role_name, $brief_representation, $first, $max, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidRolesRoleNameUsersGetAsyncWithHttpInfo
     *
     * Returns a stream of users that have the specified role name.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $role_name the role name. (required)
     * @param  bool $brief_representation Boolean which defines whether brief representations are returned (default: false) (optional)
     * @param  int $first first result to return. Ignored if negative or {@code null}. (optional)
     * @param  int $max maximum number of results to return. Ignored if negative or {@code null}. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameUsersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNameUsersGetAsyncWithHttpInfo($realm, $client_uuid, $role_name, $brief_representation = null, $first = null, $max = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameUsersGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\UserRepresentation[]';
        $request = $this->adminRealmsRealmClientsClientUuidRolesRoleNameUsersGetRequest($realm, $client_uuid, $role_name, $brief_representation, $first, $max, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientsClientUuidRolesRoleNameUsersGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $role_name the role name. (required)
     * @param  bool $brief_representation Boolean which defines whether brief representations are returned (default: false) (optional)
     * @param  int $first first result to return. Ignored if negative or {@code null}. (optional)
     * @param  int $max maximum number of results to return. Ignored if negative or {@code null}. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameUsersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientsClientUuidRolesRoleNameUsersGetRequest($realm, $client_uuid, $role_name, $brief_representation = null, $first = null, $max = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidRolesRoleNameUsersGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientsClientUuidRolesRoleNameUsersGet'
            );
        }

        // verify the required parameter 'client_uuid' is set
        if ($client_uuid === null || (is_array($client_uuid) && count($client_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_uuid when calling adminRealmsRealmClientsClientUuidRolesRoleNameUsersGet'
            );
        }

        // verify the required parameter 'role_name' is set
        if ($role_name === null || (is_array($role_name) && count($role_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $role_name when calling adminRealmsRealmClientsClientUuidRolesRoleNameUsersGet'
            );
        }





        $resourcePath = '/admin/realms/{realm}/clients/{client-uuid}/roles/{role-name}/users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $brief_representation,
            'briefRepresentation', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $first,
            'first', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max,
            'max', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'client-uuid' . '}',
                ObjectSerializer::toPathValue($client_uuid),
                $resourcePath
            );
        }
        // path params
        if ($role_name !== null) {
            $resourcePath = str_replace(
                '{' . 'role-name' . '}',
                ObjectSerializer::toPathValue($role_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmRolesGet
     *
     * Get all roles for the realm or client
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  bool $brief_representation brief_representation (optional, default to true)
     * @param  int $first first (optional)
     * @param  int $max max (optional)
     * @param  string $search search (optional, default to '')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]
     */
    public function adminRealmsRealmRolesGet($realm, $brief_representation = true, $first = null, $max = null, $search = '', string $contentType = self::contentTypes['adminRealmsRealmRolesGet'][0])
    {
        list($response) = $this->adminRealmsRealmRolesGetWithHttpInfo($realm, $brief_representation, $first, $max, $search, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmRolesGetWithHttpInfo
     *
     * Get all roles for the realm or client
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  bool $brief_representation (optional, default to true)
     * @param  int $first (optional)
     * @param  int $max (optional)
     * @param  string $search (optional, default to '')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmRolesGetWithHttpInfo($realm, $brief_representation = true, $first = null, $max = null, $search = '', string $contentType = self::contentTypes['adminRealmsRealmRolesGet'][0])
    {
        $request = $this->adminRealmsRealmRolesGetRequest($realm, $brief_representation, $first, $max, $search, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmRolesGetAsync
     *
     * Get all roles for the realm or client
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  bool $brief_representation (optional, default to true)
     * @param  int $first (optional)
     * @param  int $max (optional)
     * @param  string $search (optional, default to '')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmRolesGetAsync($realm, $brief_representation = true, $first = null, $max = null, $search = '', string $contentType = self::contentTypes['adminRealmsRealmRolesGet'][0])
    {
        return $this->adminRealmsRealmRolesGetAsyncWithHttpInfo($realm, $brief_representation, $first, $max, $search, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmRolesGetAsyncWithHttpInfo
     *
     * Get all roles for the realm or client
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  bool $brief_representation (optional, default to true)
     * @param  int $first (optional)
     * @param  int $max (optional)
     * @param  string $search (optional, default to '')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmRolesGetAsyncWithHttpInfo($realm, $brief_representation = true, $first = null, $max = null, $search = '', string $contentType = self::contentTypes['adminRealmsRealmRolesGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
        $request = $this->adminRealmsRealmRolesGetRequest($realm, $brief_representation, $first, $max, $search, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmRolesGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  bool $brief_representation (optional, default to true)
     * @param  int $first (optional)
     * @param  int $max (optional)
     * @param  string $search (optional, default to '')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmRolesGetRequest($realm, $brief_representation = true, $first = null, $max = null, $search = '', string $contentType = self::contentTypes['adminRealmsRealmRolesGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmRolesGet'
            );
        }






        $resourcePath = '/admin/realms/{realm}/roles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $brief_representation,
            'briefRepresentation', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $first,
            'first', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max,
            'max', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search,
            'search', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmRolesPost
     *
     * Create a new role for the realm or client
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation $role_representation role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesPost'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminRealmsRealmRolesPost($realm, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmRolesPost'][0])
    {
        $this->adminRealmsRealmRolesPostWithHttpInfo($realm, $role_representation, $contentType);
    }

    /**
     * Operation adminRealmsRealmRolesPostWithHttpInfo
     *
     * Create a new role for the realm or client
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesPost'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmRolesPostWithHttpInfo($realm, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmRolesPost'][0])
    {
        $request = $this->adminRealmsRealmRolesPostRequest($realm, $role_representation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmRolesPostAsync
     *
     * Create a new role for the realm or client
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmRolesPostAsync($realm, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmRolesPost'][0])
    {
        return $this->adminRealmsRealmRolesPostAsyncWithHttpInfo($realm, $role_representation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmRolesPostAsyncWithHttpInfo
     *
     * Create a new role for the realm or client
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmRolesPostAsyncWithHttpInfo($realm, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmRolesPost'][0])
    {
        $returnType = '';
        $request = $this->adminRealmsRealmRolesPostRequest($realm, $role_representation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmRolesPost'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmRolesPostRequest($realm, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmRolesPost'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmRolesPost'
            );
        }



        $resourcePath = '/admin/realms/{realm}/roles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($role_representation)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($role_representation));
            } else {
                $httpBody = $role_representation;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmRolesRoleNameCompositesClientsClientUuidGet
     *
     * Get client-level roles for the client that are in the role&#39;s composite
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid client_uuid (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNameCompositesClientsClientUuidGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]
     */
    public function adminRealmsRealmRolesRoleNameCompositesClientsClientUuidGet($realm, $client_uuid, $role_name, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNameCompositesClientsClientUuidGet'][0])
    {
        list($response) = $this->adminRealmsRealmRolesRoleNameCompositesClientsClientUuidGetWithHttpInfo($realm, $client_uuid, $role_name, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmRolesRoleNameCompositesClientsClientUuidGetWithHttpInfo
     *
     * Get client-level roles for the client that are in the role&#39;s composite
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNameCompositesClientsClientUuidGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmRolesRoleNameCompositesClientsClientUuidGetWithHttpInfo($realm, $client_uuid, $role_name, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNameCompositesClientsClientUuidGet'][0])
    {
        $request = $this->adminRealmsRealmRolesRoleNameCompositesClientsClientUuidGetRequest($realm, $client_uuid, $role_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmRolesRoleNameCompositesClientsClientUuidGetAsync
     *
     * Get client-level roles for the client that are in the role&#39;s composite
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNameCompositesClientsClientUuidGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmRolesRoleNameCompositesClientsClientUuidGetAsync($realm, $client_uuid, $role_name, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNameCompositesClientsClientUuidGet'][0])
    {
        return $this->adminRealmsRealmRolesRoleNameCompositesClientsClientUuidGetAsyncWithHttpInfo($realm, $client_uuid, $role_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmRolesRoleNameCompositesClientsClientUuidGetAsyncWithHttpInfo
     *
     * Get client-level roles for the client that are in the role&#39;s composite
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNameCompositesClientsClientUuidGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmRolesRoleNameCompositesClientsClientUuidGetAsyncWithHttpInfo($realm, $client_uuid, $role_name, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNameCompositesClientsClientUuidGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
        $request = $this->adminRealmsRealmRolesRoleNameCompositesClientsClientUuidGetRequest($realm, $client_uuid, $role_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmRolesRoleNameCompositesClientsClientUuidGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNameCompositesClientsClientUuidGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmRolesRoleNameCompositesClientsClientUuidGetRequest($realm, $client_uuid, $role_name, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNameCompositesClientsClientUuidGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmRolesRoleNameCompositesClientsClientUuidGet'
            );
        }

        // verify the required parameter 'client_uuid' is set
        if ($client_uuid === null || (is_array($client_uuid) && count($client_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_uuid when calling adminRealmsRealmRolesRoleNameCompositesClientsClientUuidGet'
            );
        }

        // verify the required parameter 'role_name' is set
        if ($role_name === null || (is_array($role_name) && count($role_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $role_name when calling adminRealmsRealmRolesRoleNameCompositesClientsClientUuidGet'
            );
        }


        $resourcePath = '/admin/realms/{realm}/roles/{role-name}/composites/clients/{client-uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'client-uuid' . '}',
                ObjectSerializer::toPathValue($client_uuid),
                $resourcePath
            );
        }
        // path params
        if ($role_name !== null) {
            $resourcePath = str_replace(
                '{' . 'role-name' . '}',
                ObjectSerializer::toPathValue($role_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmRolesRoleNameCompositesDelete
     *
     * Remove roles from the role&#39;s composite
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNameCompositesDelete'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminRealmsRealmRolesRoleNameCompositesDelete($realm, $role_name, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNameCompositesDelete'][0])
    {
        $this->adminRealmsRealmRolesRoleNameCompositesDeleteWithHttpInfo($realm, $role_name, $role_representation, $contentType);
    }

    /**
     * Operation adminRealmsRealmRolesRoleNameCompositesDeleteWithHttpInfo
     *
     * Remove roles from the role&#39;s composite
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNameCompositesDelete'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmRolesRoleNameCompositesDeleteWithHttpInfo($realm, $role_name, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNameCompositesDelete'][0])
    {
        $request = $this->adminRealmsRealmRolesRoleNameCompositesDeleteRequest($realm, $role_name, $role_representation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmRolesRoleNameCompositesDeleteAsync
     *
     * Remove roles from the role&#39;s composite
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNameCompositesDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmRolesRoleNameCompositesDeleteAsync($realm, $role_name, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNameCompositesDelete'][0])
    {
        return $this->adminRealmsRealmRolesRoleNameCompositesDeleteAsyncWithHttpInfo($realm, $role_name, $role_representation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmRolesRoleNameCompositesDeleteAsyncWithHttpInfo
     *
     * Remove roles from the role&#39;s composite
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNameCompositesDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmRolesRoleNameCompositesDeleteAsyncWithHttpInfo($realm, $role_name, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNameCompositesDelete'][0])
    {
        $returnType = '';
        $request = $this->adminRealmsRealmRolesRoleNameCompositesDeleteRequest($realm, $role_name, $role_representation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmRolesRoleNameCompositesDelete'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNameCompositesDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmRolesRoleNameCompositesDeleteRequest($realm, $role_name, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNameCompositesDelete'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmRolesRoleNameCompositesDelete'
            );
        }

        // verify the required parameter 'role_name' is set
        if ($role_name === null || (is_array($role_name) && count($role_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $role_name when calling adminRealmsRealmRolesRoleNameCompositesDelete'
            );
        }



        $resourcePath = '/admin/realms/{realm}/roles/{role-name}/composites';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($role_name !== null) {
            $resourcePath = str_replace(
                '{' . 'role-name' . '}',
                ObjectSerializer::toPathValue($role_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($role_representation)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($role_representation));
            } else {
                $httpBody = $role_representation;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmRolesRoleNameCompositesGet
     *
     * Get composites of the role
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNameCompositesGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]
     */
    public function adminRealmsRealmRolesRoleNameCompositesGet($realm, $role_name, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNameCompositesGet'][0])
    {
        list($response) = $this->adminRealmsRealmRolesRoleNameCompositesGetWithHttpInfo($realm, $role_name, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmRolesRoleNameCompositesGetWithHttpInfo
     *
     * Get composites of the role
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNameCompositesGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmRolesRoleNameCompositesGetWithHttpInfo($realm, $role_name, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNameCompositesGet'][0])
    {
        $request = $this->adminRealmsRealmRolesRoleNameCompositesGetRequest($realm, $role_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmRolesRoleNameCompositesGetAsync
     *
     * Get composites of the role
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNameCompositesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmRolesRoleNameCompositesGetAsync($realm, $role_name, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNameCompositesGet'][0])
    {
        return $this->adminRealmsRealmRolesRoleNameCompositesGetAsyncWithHttpInfo($realm, $role_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmRolesRoleNameCompositesGetAsyncWithHttpInfo
     *
     * Get composites of the role
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNameCompositesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmRolesRoleNameCompositesGetAsyncWithHttpInfo($realm, $role_name, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNameCompositesGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
        $request = $this->adminRealmsRealmRolesRoleNameCompositesGetRequest($realm, $role_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmRolesRoleNameCompositesGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNameCompositesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmRolesRoleNameCompositesGetRequest($realm, $role_name, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNameCompositesGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmRolesRoleNameCompositesGet'
            );
        }

        // verify the required parameter 'role_name' is set
        if ($role_name === null || (is_array($role_name) && count($role_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $role_name when calling adminRealmsRealmRolesRoleNameCompositesGet'
            );
        }


        $resourcePath = '/admin/realms/{realm}/roles/{role-name}/composites';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($role_name !== null) {
            $resourcePath = str_replace(
                '{' . 'role-name' . '}',
                ObjectSerializer::toPathValue($role_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmRolesRoleNameCompositesPost
     *
     * Add a composite to the role
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNameCompositesPost'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminRealmsRealmRolesRoleNameCompositesPost($realm, $role_name, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNameCompositesPost'][0])
    {
        $this->adminRealmsRealmRolesRoleNameCompositesPostWithHttpInfo($realm, $role_name, $role_representation, $contentType);
    }

    /**
     * Operation adminRealmsRealmRolesRoleNameCompositesPostWithHttpInfo
     *
     * Add a composite to the role
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNameCompositesPost'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmRolesRoleNameCompositesPostWithHttpInfo($realm, $role_name, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNameCompositesPost'][0])
    {
        $request = $this->adminRealmsRealmRolesRoleNameCompositesPostRequest($realm, $role_name, $role_representation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmRolesRoleNameCompositesPostAsync
     *
     * Add a composite to the role
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNameCompositesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmRolesRoleNameCompositesPostAsync($realm, $role_name, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNameCompositesPost'][0])
    {
        return $this->adminRealmsRealmRolesRoleNameCompositesPostAsyncWithHttpInfo($realm, $role_name, $role_representation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmRolesRoleNameCompositesPostAsyncWithHttpInfo
     *
     * Add a composite to the role
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNameCompositesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmRolesRoleNameCompositesPostAsyncWithHttpInfo($realm, $role_name, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNameCompositesPost'][0])
    {
        $returnType = '';
        $request = $this->adminRealmsRealmRolesRoleNameCompositesPostRequest($realm, $role_name, $role_representation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmRolesRoleNameCompositesPost'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNameCompositesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmRolesRoleNameCompositesPostRequest($realm, $role_name, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNameCompositesPost'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmRolesRoleNameCompositesPost'
            );
        }

        // verify the required parameter 'role_name' is set
        if ($role_name === null || (is_array($role_name) && count($role_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $role_name when calling adminRealmsRealmRolesRoleNameCompositesPost'
            );
        }



        $resourcePath = '/admin/realms/{realm}/roles/{role-name}/composites';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($role_name !== null) {
            $resourcePath = str_replace(
                '{' . 'role-name' . '}',
                ObjectSerializer::toPathValue($role_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($role_representation)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($role_representation));
            } else {
                $httpBody = $role_representation;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmRolesRoleNameCompositesRealmGet
     *
     * Get realm-level roles of the role&#39;s composite
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNameCompositesRealmGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]
     */
    public function adminRealmsRealmRolesRoleNameCompositesRealmGet($realm, $role_name, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNameCompositesRealmGet'][0])
    {
        list($response) = $this->adminRealmsRealmRolesRoleNameCompositesRealmGetWithHttpInfo($realm, $role_name, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmRolesRoleNameCompositesRealmGetWithHttpInfo
     *
     * Get realm-level roles of the role&#39;s composite
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNameCompositesRealmGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmRolesRoleNameCompositesRealmGetWithHttpInfo($realm, $role_name, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNameCompositesRealmGet'][0])
    {
        $request = $this->adminRealmsRealmRolesRoleNameCompositesRealmGetRequest($realm, $role_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmRolesRoleNameCompositesRealmGetAsync
     *
     * Get realm-level roles of the role&#39;s composite
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNameCompositesRealmGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmRolesRoleNameCompositesRealmGetAsync($realm, $role_name, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNameCompositesRealmGet'][0])
    {
        return $this->adminRealmsRealmRolesRoleNameCompositesRealmGetAsyncWithHttpInfo($realm, $role_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmRolesRoleNameCompositesRealmGetAsyncWithHttpInfo
     *
     * Get realm-level roles of the role&#39;s composite
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNameCompositesRealmGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmRolesRoleNameCompositesRealmGetAsyncWithHttpInfo($realm, $role_name, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNameCompositesRealmGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
        $request = $this->adminRealmsRealmRolesRoleNameCompositesRealmGetRequest($realm, $role_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmRolesRoleNameCompositesRealmGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNameCompositesRealmGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmRolesRoleNameCompositesRealmGetRequest($realm, $role_name, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNameCompositesRealmGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmRolesRoleNameCompositesRealmGet'
            );
        }

        // verify the required parameter 'role_name' is set
        if ($role_name === null || (is_array($role_name) && count($role_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $role_name when calling adminRealmsRealmRolesRoleNameCompositesRealmGet'
            );
        }


        $resourcePath = '/admin/realms/{realm}/roles/{role-name}/composites/realm';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($role_name !== null) {
            $resourcePath = str_replace(
                '{' . 'role-name' . '}',
                ObjectSerializer::toPathValue($role_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmRolesRoleNameDelete
     *
     * Delete a role by name
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNameDelete'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminRealmsRealmRolesRoleNameDelete($realm, $role_name, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNameDelete'][0])
    {
        $this->adminRealmsRealmRolesRoleNameDeleteWithHttpInfo($realm, $role_name, $contentType);
    }

    /**
     * Operation adminRealmsRealmRolesRoleNameDeleteWithHttpInfo
     *
     * Delete a role by name
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNameDelete'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmRolesRoleNameDeleteWithHttpInfo($realm, $role_name, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNameDelete'][0])
    {
        $request = $this->adminRealmsRealmRolesRoleNameDeleteRequest($realm, $role_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmRolesRoleNameDeleteAsync
     *
     * Delete a role by name
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNameDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmRolesRoleNameDeleteAsync($realm, $role_name, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNameDelete'][0])
    {
        return $this->adminRealmsRealmRolesRoleNameDeleteAsyncWithHttpInfo($realm, $role_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmRolesRoleNameDeleteAsyncWithHttpInfo
     *
     * Delete a role by name
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNameDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmRolesRoleNameDeleteAsyncWithHttpInfo($realm, $role_name, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNameDelete'][0])
    {
        $returnType = '';
        $request = $this->adminRealmsRealmRolesRoleNameDeleteRequest($realm, $role_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmRolesRoleNameDelete'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNameDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmRolesRoleNameDeleteRequest($realm, $role_name, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNameDelete'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmRolesRoleNameDelete'
            );
        }

        // verify the required parameter 'role_name' is set
        if ($role_name === null || (is_array($role_name) && count($role_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $role_name when calling adminRealmsRealmRolesRoleNameDelete'
            );
        }


        $resourcePath = '/admin/realms/{realm}/roles/{role-name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($role_name !== null) {
            $resourcePath = str_replace(
                '{' . 'role-name' . '}',
                ObjectSerializer::toPathValue($role_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmRolesRoleNameGet
     *
     * Get a role by name
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNameGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation
     */
    public function adminRealmsRealmRolesRoleNameGet($realm, $role_name, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNameGet'][0])
    {
        list($response) = $this->adminRealmsRealmRolesRoleNameGetWithHttpInfo($realm, $role_name, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmRolesRoleNameGetWithHttpInfo
     *
     * Get a role by name
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNameGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmRolesRoleNameGetWithHttpInfo($realm, $role_name, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNameGet'][0])
    {
        $request = $this->adminRealmsRealmRolesRoleNameGetRequest($realm, $role_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmRolesRoleNameGetAsync
     *
     * Get a role by name
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmRolesRoleNameGetAsync($realm, $role_name, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNameGet'][0])
    {
        return $this->adminRealmsRealmRolesRoleNameGetAsyncWithHttpInfo($realm, $role_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmRolesRoleNameGetAsyncWithHttpInfo
     *
     * Get a role by name
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmRolesRoleNameGetAsyncWithHttpInfo($realm, $role_name, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNameGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation';
        $request = $this->adminRealmsRealmRolesRoleNameGetRequest($realm, $role_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmRolesRoleNameGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmRolesRoleNameGetRequest($realm, $role_name, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNameGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmRolesRoleNameGet'
            );
        }

        // verify the required parameter 'role_name' is set
        if ($role_name === null || (is_array($role_name) && count($role_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $role_name when calling adminRealmsRealmRolesRoleNameGet'
            );
        }


        $resourcePath = '/admin/realms/{realm}/roles/{role-name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($role_name !== null) {
            $resourcePath = str_replace(
                '{' . 'role-name' . '}',
                ObjectSerializer::toPathValue($role_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmRolesRoleNameGroupsGet
     *
     * Returns a stream of groups that have the specified role name
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_name the role name. (required)
     * @param  bool $brief_representation if false, return a full representation of the {@code GroupRepresentation} objects. (optional, default to true)
     * @param  int $first first result to return. Ignored if negative or {@code null}. (optional)
     * @param  int $max maximum number of results to return. Ignored if negative or {@code null}. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNameGroupsGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\GroupRepresentation[]
     */
    public function adminRealmsRealmRolesRoleNameGroupsGet($realm, $role_name, $brief_representation = true, $first = null, $max = null, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNameGroupsGet'][0])
    {
        list($response) = $this->adminRealmsRealmRolesRoleNameGroupsGetWithHttpInfo($realm, $role_name, $brief_representation, $first, $max, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmRolesRoleNameGroupsGetWithHttpInfo
     *
     * Returns a stream of groups that have the specified role name
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_name the role name. (required)
     * @param  bool $brief_representation if false, return a full representation of the {@code GroupRepresentation} objects. (optional, default to true)
     * @param  int $first first result to return. Ignored if negative or {@code null}. (optional)
     * @param  int $max maximum number of results to return. Ignored if negative or {@code null}. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNameGroupsGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\GroupRepresentation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmRolesRoleNameGroupsGetWithHttpInfo($realm, $role_name, $brief_representation = true, $first = null, $max = null, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNameGroupsGet'][0])
    {
        $request = $this->adminRealmsRealmRolesRoleNameGroupsGetRequest($realm, $role_name, $brief_representation, $first, $max, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\GroupRepresentation[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\GroupRepresentation[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\GroupRepresentation[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\GroupRepresentation[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\GroupRepresentation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmRolesRoleNameGroupsGetAsync
     *
     * Returns a stream of groups that have the specified role name
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_name the role name. (required)
     * @param  bool $brief_representation if false, return a full representation of the {@code GroupRepresentation} objects. (optional, default to true)
     * @param  int $first first result to return. Ignored if negative or {@code null}. (optional)
     * @param  int $max maximum number of results to return. Ignored if negative or {@code null}. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNameGroupsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmRolesRoleNameGroupsGetAsync($realm, $role_name, $brief_representation = true, $first = null, $max = null, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNameGroupsGet'][0])
    {
        return $this->adminRealmsRealmRolesRoleNameGroupsGetAsyncWithHttpInfo($realm, $role_name, $brief_representation, $first, $max, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmRolesRoleNameGroupsGetAsyncWithHttpInfo
     *
     * Returns a stream of groups that have the specified role name
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_name the role name. (required)
     * @param  bool $brief_representation if false, return a full representation of the {@code GroupRepresentation} objects. (optional, default to true)
     * @param  int $first first result to return. Ignored if negative or {@code null}. (optional)
     * @param  int $max maximum number of results to return. Ignored if negative or {@code null}. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNameGroupsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmRolesRoleNameGroupsGetAsyncWithHttpInfo($realm, $role_name, $brief_representation = true, $first = null, $max = null, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNameGroupsGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\GroupRepresentation[]';
        $request = $this->adminRealmsRealmRolesRoleNameGroupsGetRequest($realm, $role_name, $brief_representation, $first, $max, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmRolesRoleNameGroupsGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_name the role name. (required)
     * @param  bool $brief_representation if false, return a full representation of the {@code GroupRepresentation} objects. (optional, default to true)
     * @param  int $first first result to return. Ignored if negative or {@code null}. (optional)
     * @param  int $max maximum number of results to return. Ignored if negative or {@code null}. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNameGroupsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmRolesRoleNameGroupsGetRequest($realm, $role_name, $brief_representation = true, $first = null, $max = null, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNameGroupsGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmRolesRoleNameGroupsGet'
            );
        }

        // verify the required parameter 'role_name' is set
        if ($role_name === null || (is_array($role_name) && count($role_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $role_name when calling adminRealmsRealmRolesRoleNameGroupsGet'
            );
        }





        $resourcePath = '/admin/realms/{realm}/roles/{role-name}/groups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $brief_representation,
            'briefRepresentation', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $first,
            'first', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max,
            'max', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($role_name !== null) {
            $resourcePath = str_replace(
                '{' . 'role-name' . '}',
                ObjectSerializer::toPathValue($role_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmRolesRoleNameManagementPermissionsGet
     *
     * Return object stating whether role Authorization permissions have been initialized or not and a reference
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_name role_name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNameManagementPermissionsGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference
     */
    public function adminRealmsRealmRolesRoleNameManagementPermissionsGet($realm, $role_name, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNameManagementPermissionsGet'][0])
    {
        list($response) = $this->adminRealmsRealmRolesRoleNameManagementPermissionsGetWithHttpInfo($realm, $role_name, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmRolesRoleNameManagementPermissionsGetWithHttpInfo
     *
     * Return object stating whether role Authorization permissions have been initialized or not and a reference
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNameManagementPermissionsGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmRolesRoleNameManagementPermissionsGetWithHttpInfo($realm, $role_name, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNameManagementPermissionsGet'][0])
    {
        $request = $this->adminRealmsRealmRolesRoleNameManagementPermissionsGetRequest($realm, $role_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmRolesRoleNameManagementPermissionsGetAsync
     *
     * Return object stating whether role Authorization permissions have been initialized or not and a reference
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNameManagementPermissionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmRolesRoleNameManagementPermissionsGetAsync($realm, $role_name, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNameManagementPermissionsGet'][0])
    {
        return $this->adminRealmsRealmRolesRoleNameManagementPermissionsGetAsyncWithHttpInfo($realm, $role_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmRolesRoleNameManagementPermissionsGetAsyncWithHttpInfo
     *
     * Return object stating whether role Authorization permissions have been initialized or not and a reference
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNameManagementPermissionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmRolesRoleNameManagementPermissionsGetAsyncWithHttpInfo($realm, $role_name, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNameManagementPermissionsGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference';
        $request = $this->adminRealmsRealmRolesRoleNameManagementPermissionsGetRequest($realm, $role_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmRolesRoleNameManagementPermissionsGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNameManagementPermissionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmRolesRoleNameManagementPermissionsGetRequest($realm, $role_name, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNameManagementPermissionsGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmRolesRoleNameManagementPermissionsGet'
            );
        }

        // verify the required parameter 'role_name' is set
        if ($role_name === null || (is_array($role_name) && count($role_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $role_name when calling adminRealmsRealmRolesRoleNameManagementPermissionsGet'
            );
        }


        $resourcePath = '/admin/realms/{realm}/roles/{role-name}/management/permissions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($role_name !== null) {
            $resourcePath = str_replace(
                '{' . 'role-name' . '}',
                ObjectSerializer::toPathValue($role_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmRolesRoleNameManagementPermissionsPut
     *
     * Return object stating whether role Authorization permissions have been initialized or not and a reference
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_name role_name (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference $management_permission_reference management_permission_reference (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNameManagementPermissionsPut'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference
     */
    public function adminRealmsRealmRolesRoleNameManagementPermissionsPut($realm, $role_name, $management_permission_reference = null, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNameManagementPermissionsPut'][0])
    {
        list($response) = $this->adminRealmsRealmRolesRoleNameManagementPermissionsPutWithHttpInfo($realm, $role_name, $management_permission_reference, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmRolesRoleNameManagementPermissionsPutWithHttpInfo
     *
     * Return object stating whether role Authorization permissions have been initialized or not and a reference
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_name (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference $management_permission_reference (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNameManagementPermissionsPut'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmRolesRoleNameManagementPermissionsPutWithHttpInfo($realm, $role_name, $management_permission_reference = null, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNameManagementPermissionsPut'][0])
    {
        $request = $this->adminRealmsRealmRolesRoleNameManagementPermissionsPutRequest($realm, $role_name, $management_permission_reference, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmRolesRoleNameManagementPermissionsPutAsync
     *
     * Return object stating whether role Authorization permissions have been initialized or not and a reference
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_name (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference $management_permission_reference (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNameManagementPermissionsPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmRolesRoleNameManagementPermissionsPutAsync($realm, $role_name, $management_permission_reference = null, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNameManagementPermissionsPut'][0])
    {
        return $this->adminRealmsRealmRolesRoleNameManagementPermissionsPutAsyncWithHttpInfo($realm, $role_name, $management_permission_reference, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmRolesRoleNameManagementPermissionsPutAsyncWithHttpInfo
     *
     * Return object stating whether role Authorization permissions have been initialized or not and a reference
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_name (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference $management_permission_reference (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNameManagementPermissionsPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmRolesRoleNameManagementPermissionsPutAsyncWithHttpInfo($realm, $role_name, $management_permission_reference = null, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNameManagementPermissionsPut'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference';
        $request = $this->adminRealmsRealmRolesRoleNameManagementPermissionsPutRequest($realm, $role_name, $management_permission_reference, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmRolesRoleNameManagementPermissionsPut'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_name (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference $management_permission_reference (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNameManagementPermissionsPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmRolesRoleNameManagementPermissionsPutRequest($realm, $role_name, $management_permission_reference = null, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNameManagementPermissionsPut'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmRolesRoleNameManagementPermissionsPut'
            );
        }

        // verify the required parameter 'role_name' is set
        if ($role_name === null || (is_array($role_name) && count($role_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $role_name when calling adminRealmsRealmRolesRoleNameManagementPermissionsPut'
            );
        }



        $resourcePath = '/admin/realms/{realm}/roles/{role-name}/management/permissions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($role_name !== null) {
            $resourcePath = str_replace(
                '{' . 'role-name' . '}',
                ObjectSerializer::toPathValue($role_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($management_permission_reference)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($management_permission_reference));
            } else {
                $httpBody = $management_permission_reference;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmRolesRoleNamePut
     *
     * Update a role by name
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation $role_representation role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNamePut'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminRealmsRealmRolesRoleNamePut($realm, $role_name, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNamePut'][0])
    {
        $this->adminRealmsRealmRolesRoleNamePutWithHttpInfo($realm, $role_name, $role_representation, $contentType);
    }

    /**
     * Operation adminRealmsRealmRolesRoleNamePutWithHttpInfo
     *
     * Update a role by name
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNamePut'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmRolesRoleNamePutWithHttpInfo($realm, $role_name, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNamePut'][0])
    {
        $request = $this->adminRealmsRealmRolesRoleNamePutRequest($realm, $role_name, $role_representation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmRolesRoleNamePutAsync
     *
     * Update a role by name
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNamePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmRolesRoleNamePutAsync($realm, $role_name, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNamePut'][0])
    {
        return $this->adminRealmsRealmRolesRoleNamePutAsyncWithHttpInfo($realm, $role_name, $role_representation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmRolesRoleNamePutAsyncWithHttpInfo
     *
     * Update a role by name
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNamePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmRolesRoleNamePutAsyncWithHttpInfo($realm, $role_name, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNamePut'][0])
    {
        $returnType = '';
        $request = $this->adminRealmsRealmRolesRoleNamePutRequest($realm, $role_name, $role_representation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmRolesRoleNamePut'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_name role&#39;s name (not id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNamePut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmRolesRoleNamePutRequest($realm, $role_name, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNamePut'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmRolesRoleNamePut'
            );
        }

        // verify the required parameter 'role_name' is set
        if ($role_name === null || (is_array($role_name) && count($role_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $role_name when calling adminRealmsRealmRolesRoleNamePut'
            );
        }



        $resourcePath = '/admin/realms/{realm}/roles/{role-name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($role_name !== null) {
            $resourcePath = str_replace(
                '{' . 'role-name' . '}',
                ObjectSerializer::toPathValue($role_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($role_representation)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($role_representation));
            } else {
                $httpBody = $role_representation;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmRolesRoleNameUsersGet
     *
     * Returns a stream of users that have the specified role name.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_name the role name. (required)
     * @param  bool $brief_representation Boolean which defines whether brief representations are returned (default: false) (optional)
     * @param  int $first first result to return. Ignored if negative or {@code null}. (optional)
     * @param  int $max maximum number of results to return. Ignored if negative or {@code null}. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNameUsersGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\UserRepresentation[]
     */
    public function adminRealmsRealmRolesRoleNameUsersGet($realm, $role_name, $brief_representation = null, $first = null, $max = null, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNameUsersGet'][0])
    {
        list($response) = $this->adminRealmsRealmRolesRoleNameUsersGetWithHttpInfo($realm, $role_name, $brief_representation, $first, $max, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmRolesRoleNameUsersGetWithHttpInfo
     *
     * Returns a stream of users that have the specified role name.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_name the role name. (required)
     * @param  bool $brief_representation Boolean which defines whether brief representations are returned (default: false) (optional)
     * @param  int $first first result to return. Ignored if negative or {@code null}. (optional)
     * @param  int $max maximum number of results to return. Ignored if negative or {@code null}. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNameUsersGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\UserRepresentation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmRolesRoleNameUsersGetWithHttpInfo($realm, $role_name, $brief_representation = null, $first = null, $max = null, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNameUsersGet'][0])
    {
        $request = $this->adminRealmsRealmRolesRoleNameUsersGetRequest($realm, $role_name, $brief_representation, $first, $max, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\UserRepresentation[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\UserRepresentation[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\UserRepresentation[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\UserRepresentation[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\UserRepresentation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmRolesRoleNameUsersGetAsync
     *
     * Returns a stream of users that have the specified role name.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_name the role name. (required)
     * @param  bool $brief_representation Boolean which defines whether brief representations are returned (default: false) (optional)
     * @param  int $first first result to return. Ignored if negative or {@code null}. (optional)
     * @param  int $max maximum number of results to return. Ignored if negative or {@code null}. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNameUsersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmRolesRoleNameUsersGetAsync($realm, $role_name, $brief_representation = null, $first = null, $max = null, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNameUsersGet'][0])
    {
        return $this->adminRealmsRealmRolesRoleNameUsersGetAsyncWithHttpInfo($realm, $role_name, $brief_representation, $first, $max, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmRolesRoleNameUsersGetAsyncWithHttpInfo
     *
     * Returns a stream of users that have the specified role name.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_name the role name. (required)
     * @param  bool $brief_representation Boolean which defines whether brief representations are returned (default: false) (optional)
     * @param  int $first first result to return. Ignored if negative or {@code null}. (optional)
     * @param  int $max maximum number of results to return. Ignored if negative or {@code null}. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNameUsersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmRolesRoleNameUsersGetAsyncWithHttpInfo($realm, $role_name, $brief_representation = null, $first = null, $max = null, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNameUsersGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\UserRepresentation[]';
        $request = $this->adminRealmsRealmRolesRoleNameUsersGetRequest($realm, $role_name, $brief_representation, $first, $max, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmRolesRoleNameUsersGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_name the role name. (required)
     * @param  bool $brief_representation Boolean which defines whether brief representations are returned (default: false) (optional)
     * @param  int $first first result to return. Ignored if negative or {@code null}. (optional)
     * @param  int $max maximum number of results to return. Ignored if negative or {@code null}. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesRoleNameUsersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmRolesRoleNameUsersGetRequest($realm, $role_name, $brief_representation = null, $first = null, $max = null, string $contentType = self::contentTypes['adminRealmsRealmRolesRoleNameUsersGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmRolesRoleNameUsersGet'
            );
        }

        // verify the required parameter 'role_name' is set
        if ($role_name === null || (is_array($role_name) && count($role_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $role_name when calling adminRealmsRealmRolesRoleNameUsersGet'
            );
        }





        $resourcePath = '/admin/realms/{realm}/roles/{role-name}/users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $brief_representation,
            'briefRepresentation', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $first,
            'first', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max,
            'max', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($role_name !== null) {
            $resourcePath = str_replace(
                '{' . 'role-name' . '}',
                ObjectSerializer::toPathValue($role_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
