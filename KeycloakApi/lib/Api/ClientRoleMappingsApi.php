<?php
/**
 * ClientRoleMappingsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace WebMI\KeycloakApiClient\KeycloakApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use WebMI\KeycloakApiClient\KeycloakApi\ApiException;
use WebMI\KeycloakApiClient\KeycloakApi\Configuration;
use WebMI\KeycloakApiClient\KeycloakApi\HeaderSelector;
use WebMI\KeycloakApiClient\KeycloakApi\ObjectSerializer;

/**
 * ClientRoleMappingsApi Class Doc Comment
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ClientRoleMappingsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableGet' => [
            'application/json',
        ],
        'adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGet' => [
            'application/json',
        ],
        'adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDelete' => [
            'application/json',
        ],
        'adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdGet' => [
            'application/json',
        ],
        'adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPost' => [
            'application/json',
        ],
        'adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableGet' => [
            'application/json',
        ],
        'adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGet' => [
            'application/json',
        ],
        'adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDelete' => [
            'application/json',
        ],
        'adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdGet' => [
            'application/json',
        ],
        'adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPost' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableGet
     *
     * Get available client-level roles that can be mapped to the user or group
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $group_id group_id (required)
     * @param  string $client_id client id (not clientId!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]
     */
    public function adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableGet($realm, $group_id, $client_id, string $contentType = self::contentTypes['adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableGet'][0])
    {
        list($response) = $this->adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableGetWithHttpInfo($realm, $group_id, $client_id, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableGetWithHttpInfo
     *
     * Get available client-level roles that can be mapped to the user or group
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $group_id (required)
     * @param  string $client_id client id (not clientId!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableGetWithHttpInfo($realm, $group_id, $client_id, string $contentType = self::contentTypes['adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableGet'][0])
    {
        $request = $this->adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableGetRequest($realm, $group_id, $client_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableGetAsync
     *
     * Get available client-level roles that can be mapped to the user or group
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $group_id (required)
     * @param  string $client_id client id (not clientId!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableGetAsync($realm, $group_id, $client_id, string $contentType = self::contentTypes['adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableGet'][0])
    {
        return $this->adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableGetAsyncWithHttpInfo($realm, $group_id, $client_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableGetAsyncWithHttpInfo
     *
     * Get available client-level roles that can be mapped to the user or group
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $group_id (required)
     * @param  string $client_id client id (not clientId!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableGetAsyncWithHttpInfo($realm, $group_id, $client_id, string $contentType = self::contentTypes['adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
        $request = $this->adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableGetRequest($realm, $group_id, $client_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $group_id (required)
     * @param  string $client_id client id (not clientId!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableGetRequest($realm, $group_id, $client_id, string $contentType = self::contentTypes['adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableGet'
            );
        }

        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableGet'
            );
        }

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableGet'
            );
        }


        $resourcePath = '/admin/realms/{realm}/groups/{group-id}/role-mappings/clients/{client-id}/available';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'group-id' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath
            );
        }
        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'client-id' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGet
     *
     * Get effective client-level role mappings This recurses any composite roles
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $group_id group_id (required)
     * @param  string $client_id client id (not clientId!) (required)
     * @param  bool $brief_representation if false, return roles with their attributes (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]
     */
    public function adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGet($realm, $group_id, $client_id, $brief_representation = true, string $contentType = self::contentTypes['adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGet'][0])
    {
        list($response) = $this->adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGetWithHttpInfo($realm, $group_id, $client_id, $brief_representation, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGetWithHttpInfo
     *
     * Get effective client-level role mappings This recurses any composite roles
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $group_id (required)
     * @param  string $client_id client id (not clientId!) (required)
     * @param  bool $brief_representation if false, return roles with their attributes (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGetWithHttpInfo($realm, $group_id, $client_id, $brief_representation = true, string $contentType = self::contentTypes['adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGet'][0])
    {
        $request = $this->adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGetRequest($realm, $group_id, $client_id, $brief_representation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGetAsync
     *
     * Get effective client-level role mappings This recurses any composite roles
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $group_id (required)
     * @param  string $client_id client id (not clientId!) (required)
     * @param  bool $brief_representation if false, return roles with their attributes (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGetAsync($realm, $group_id, $client_id, $brief_representation = true, string $contentType = self::contentTypes['adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGet'][0])
    {
        return $this->adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGetAsyncWithHttpInfo($realm, $group_id, $client_id, $brief_representation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGetAsyncWithHttpInfo
     *
     * Get effective client-level role mappings This recurses any composite roles
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $group_id (required)
     * @param  string $client_id client id (not clientId!) (required)
     * @param  bool $brief_representation if false, return roles with their attributes (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGetAsyncWithHttpInfo($realm, $group_id, $client_id, $brief_representation = true, string $contentType = self::contentTypes['adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
        $request = $this->adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGetRequest($realm, $group_id, $client_id, $brief_representation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $group_id (required)
     * @param  string $client_id client id (not clientId!) (required)
     * @param  bool $brief_representation if false, return roles with their attributes (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGetRequest($realm, $group_id, $client_id, $brief_representation = true, string $contentType = self::contentTypes['adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGet'
            );
        }

        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGet'
            );
        }

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeGet'
            );
        }



        $resourcePath = '/admin/realms/{realm}/groups/{group-id}/role-mappings/clients/{client-id}/composite';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $brief_representation,
            'briefRepresentation', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'group-id' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath
            );
        }
        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'client-id' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDelete
     *
     * Delete client-level roles from user or group role mapping
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $group_id group_id (required)
     * @param  string $client_id client id (not clientId!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDelete'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDelete($realm, $group_id, $client_id, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDelete'][0])
    {
        $this->adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDeleteWithHttpInfo($realm, $group_id, $client_id, $role_representation, $contentType);
    }

    /**
     * Operation adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDeleteWithHttpInfo
     *
     * Delete client-level roles from user or group role mapping
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $group_id (required)
     * @param  string $client_id client id (not clientId!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDelete'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDeleteWithHttpInfo($realm, $group_id, $client_id, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDelete'][0])
    {
        $request = $this->adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDeleteRequest($realm, $group_id, $client_id, $role_representation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDeleteAsync
     *
     * Delete client-level roles from user or group role mapping
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $group_id (required)
     * @param  string $client_id client id (not clientId!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDeleteAsync($realm, $group_id, $client_id, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDelete'][0])
    {
        return $this->adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDeleteAsyncWithHttpInfo($realm, $group_id, $client_id, $role_representation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDeleteAsyncWithHttpInfo
     *
     * Delete client-level roles from user or group role mapping
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $group_id (required)
     * @param  string $client_id client id (not clientId!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDeleteAsyncWithHttpInfo($realm, $group_id, $client_id, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDelete'][0])
    {
        $returnType = '';
        $request = $this->adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDeleteRequest($realm, $group_id, $client_id, $role_representation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDelete'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $group_id (required)
     * @param  string $client_id client id (not clientId!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDeleteRequest($realm, $group_id, $client_id, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDelete'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDelete'
            );
        }

        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDelete'
            );
        }

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdDelete'
            );
        }



        $resourcePath = '/admin/realms/{realm}/groups/{group-id}/role-mappings/clients/{client-id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'group-id' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath
            );
        }
        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'client-id' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($role_representation)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($role_representation));
            } else {
                $httpBody = $role_representation;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdGet
     *
     * Get client-level role mappings for the user or group, and the app
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $group_id group_id (required)
     * @param  string $client_id client id (not clientId!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]
     */
    public function adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdGet($realm, $group_id, $client_id, string $contentType = self::contentTypes['adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdGet'][0])
    {
        list($response) = $this->adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdGetWithHttpInfo($realm, $group_id, $client_id, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdGetWithHttpInfo
     *
     * Get client-level role mappings for the user or group, and the app
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $group_id (required)
     * @param  string $client_id client id (not clientId!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdGetWithHttpInfo($realm, $group_id, $client_id, string $contentType = self::contentTypes['adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdGet'][0])
    {
        $request = $this->adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdGetRequest($realm, $group_id, $client_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdGetAsync
     *
     * Get client-level role mappings for the user or group, and the app
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $group_id (required)
     * @param  string $client_id client id (not clientId!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdGetAsync($realm, $group_id, $client_id, string $contentType = self::contentTypes['adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdGet'][0])
    {
        return $this->adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdGetAsyncWithHttpInfo($realm, $group_id, $client_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdGetAsyncWithHttpInfo
     *
     * Get client-level role mappings for the user or group, and the app
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $group_id (required)
     * @param  string $client_id client id (not clientId!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdGetAsyncWithHttpInfo($realm, $group_id, $client_id, string $contentType = self::contentTypes['adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
        $request = $this->adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdGetRequest($realm, $group_id, $client_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $group_id (required)
     * @param  string $client_id client id (not clientId!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdGetRequest($realm, $group_id, $client_id, string $contentType = self::contentTypes['adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdGet'
            );
        }

        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdGet'
            );
        }

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdGet'
            );
        }


        $resourcePath = '/admin/realms/{realm}/groups/{group-id}/role-mappings/clients/{client-id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'group-id' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath
            );
        }
        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'client-id' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPost
     *
     * Add client-level roles to the user or group role mapping
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $group_id group_id (required)
     * @param  string $client_id client id (not clientId!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPost'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPost($realm, $group_id, $client_id, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPost'][0])
    {
        $this->adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPostWithHttpInfo($realm, $group_id, $client_id, $role_representation, $contentType);
    }

    /**
     * Operation adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPostWithHttpInfo
     *
     * Add client-level roles to the user or group role mapping
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $group_id (required)
     * @param  string $client_id client id (not clientId!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPost'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPostWithHttpInfo($realm, $group_id, $client_id, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPost'][0])
    {
        $request = $this->adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPostRequest($realm, $group_id, $client_id, $role_representation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPostAsync
     *
     * Add client-level roles to the user or group role mapping
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $group_id (required)
     * @param  string $client_id client id (not clientId!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPostAsync($realm, $group_id, $client_id, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPost'][0])
    {
        return $this->adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPostAsyncWithHttpInfo($realm, $group_id, $client_id, $role_representation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPostAsyncWithHttpInfo
     *
     * Add client-level roles to the user or group role mapping
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $group_id (required)
     * @param  string $client_id client id (not clientId!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPostAsyncWithHttpInfo($realm, $group_id, $client_id, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPost'][0])
    {
        $returnType = '';
        $request = $this->adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPostRequest($realm, $group_id, $client_id, $role_representation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPost'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $group_id (required)
     * @param  string $client_id client id (not clientId!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPostRequest($realm, $group_id, $client_id, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPost'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPost'
            );
        }

        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPost'
            );
        }

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling adminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdPost'
            );
        }



        $resourcePath = '/admin/realms/{realm}/groups/{group-id}/role-mappings/clients/{client-id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'group-id' . '}',
                ObjectSerializer::toPathValue($group_id),
                $resourcePath
            );
        }
        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'client-id' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($role_representation)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($role_representation));
            } else {
                $httpBody = $role_representation;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableGet
     *
     * Get available client-level roles that can be mapped to the user or group
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $user_id user_id (required)
     * @param  string $client_id client id (not clientId!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]
     */
    public function adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableGet($realm, $user_id, $client_id, string $contentType = self::contentTypes['adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableGet'][0])
    {
        list($response) = $this->adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableGetWithHttpInfo($realm, $user_id, $client_id, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableGetWithHttpInfo
     *
     * Get available client-level roles that can be mapped to the user or group
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $user_id (required)
     * @param  string $client_id client id (not clientId!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableGetWithHttpInfo($realm, $user_id, $client_id, string $contentType = self::contentTypes['adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableGet'][0])
    {
        $request = $this->adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableGetRequest($realm, $user_id, $client_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableGetAsync
     *
     * Get available client-level roles that can be mapped to the user or group
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $user_id (required)
     * @param  string $client_id client id (not clientId!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableGetAsync($realm, $user_id, $client_id, string $contentType = self::contentTypes['adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableGet'][0])
    {
        return $this->adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableGetAsyncWithHttpInfo($realm, $user_id, $client_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableGetAsyncWithHttpInfo
     *
     * Get available client-level roles that can be mapped to the user or group
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $user_id (required)
     * @param  string $client_id client id (not clientId!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableGetAsyncWithHttpInfo($realm, $user_id, $client_id, string $contentType = self::contentTypes['adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
        $request = $this->adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableGetRequest($realm, $user_id, $client_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $user_id (required)
     * @param  string $client_id client id (not clientId!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableGetRequest($realm, $user_id, $client_id, string $contentType = self::contentTypes['adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableGet'
            );
        }

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableGet'
            );
        }

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableGet'
            );
        }


        $resourcePath = '/admin/realms/{realm}/users/{user-id}/role-mappings/clients/{client-id}/available';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user-id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'client-id' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGet
     *
     * Get effective client-level role mappings This recurses any composite roles
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $user_id user_id (required)
     * @param  string $client_id client id (not clientId!) (required)
     * @param  bool $brief_representation if false, return roles with their attributes (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]
     */
    public function adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGet($realm, $user_id, $client_id, $brief_representation = true, string $contentType = self::contentTypes['adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGet'][0])
    {
        list($response) = $this->adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGetWithHttpInfo($realm, $user_id, $client_id, $brief_representation, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGetWithHttpInfo
     *
     * Get effective client-level role mappings This recurses any composite roles
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $user_id (required)
     * @param  string $client_id client id (not clientId!) (required)
     * @param  bool $brief_representation if false, return roles with their attributes (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGetWithHttpInfo($realm, $user_id, $client_id, $brief_representation = true, string $contentType = self::contentTypes['adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGet'][0])
    {
        $request = $this->adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGetRequest($realm, $user_id, $client_id, $brief_representation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGetAsync
     *
     * Get effective client-level role mappings This recurses any composite roles
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $user_id (required)
     * @param  string $client_id client id (not clientId!) (required)
     * @param  bool $brief_representation if false, return roles with their attributes (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGetAsync($realm, $user_id, $client_id, $brief_representation = true, string $contentType = self::contentTypes['adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGet'][0])
    {
        return $this->adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGetAsyncWithHttpInfo($realm, $user_id, $client_id, $brief_representation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGetAsyncWithHttpInfo
     *
     * Get effective client-level role mappings This recurses any composite roles
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $user_id (required)
     * @param  string $client_id client id (not clientId!) (required)
     * @param  bool $brief_representation if false, return roles with their attributes (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGetAsyncWithHttpInfo($realm, $user_id, $client_id, $brief_representation = true, string $contentType = self::contentTypes['adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
        $request = $this->adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGetRequest($realm, $user_id, $client_id, $brief_representation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $user_id (required)
     * @param  string $client_id client id (not clientId!) (required)
     * @param  bool $brief_representation if false, return roles with their attributes (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGetRequest($realm, $user_id, $client_id, $brief_representation = true, string $contentType = self::contentTypes['adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGet'
            );
        }

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGet'
            );
        }

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeGet'
            );
        }



        $resourcePath = '/admin/realms/{realm}/users/{user-id}/role-mappings/clients/{client-id}/composite';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $brief_representation,
            'briefRepresentation', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user-id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'client-id' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDelete
     *
     * Delete client-level roles from user or group role mapping
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $user_id user_id (required)
     * @param  string $client_id client id (not clientId!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDelete'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDelete($realm, $user_id, $client_id, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDelete'][0])
    {
        $this->adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDeleteWithHttpInfo($realm, $user_id, $client_id, $role_representation, $contentType);
    }

    /**
     * Operation adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDeleteWithHttpInfo
     *
     * Delete client-level roles from user or group role mapping
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $user_id (required)
     * @param  string $client_id client id (not clientId!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDelete'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDeleteWithHttpInfo($realm, $user_id, $client_id, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDelete'][0])
    {
        $request = $this->adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDeleteRequest($realm, $user_id, $client_id, $role_representation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDeleteAsync
     *
     * Delete client-level roles from user or group role mapping
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $user_id (required)
     * @param  string $client_id client id (not clientId!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDeleteAsync($realm, $user_id, $client_id, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDelete'][0])
    {
        return $this->adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDeleteAsyncWithHttpInfo($realm, $user_id, $client_id, $role_representation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDeleteAsyncWithHttpInfo
     *
     * Delete client-level roles from user or group role mapping
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $user_id (required)
     * @param  string $client_id client id (not clientId!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDeleteAsyncWithHttpInfo($realm, $user_id, $client_id, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDelete'][0])
    {
        $returnType = '';
        $request = $this->adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDeleteRequest($realm, $user_id, $client_id, $role_representation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDelete'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $user_id (required)
     * @param  string $client_id client id (not clientId!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDeleteRequest($realm, $user_id, $client_id, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDelete'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDelete'
            );
        }

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDelete'
            );
        }

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdDelete'
            );
        }



        $resourcePath = '/admin/realms/{realm}/users/{user-id}/role-mappings/clients/{client-id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user-id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'client-id' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($role_representation)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($role_representation));
            } else {
                $httpBody = $role_representation;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdGet
     *
     * Get client-level role mappings for the user or group, and the app
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $user_id user_id (required)
     * @param  string $client_id client id (not clientId!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]
     */
    public function adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdGet($realm, $user_id, $client_id, string $contentType = self::contentTypes['adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdGet'][0])
    {
        list($response) = $this->adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdGetWithHttpInfo($realm, $user_id, $client_id, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdGetWithHttpInfo
     *
     * Get client-level role mappings for the user or group, and the app
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $user_id (required)
     * @param  string $client_id client id (not clientId!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdGetWithHttpInfo($realm, $user_id, $client_id, string $contentType = self::contentTypes['adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdGet'][0])
    {
        $request = $this->adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdGetRequest($realm, $user_id, $client_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdGetAsync
     *
     * Get client-level role mappings for the user or group, and the app
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $user_id (required)
     * @param  string $client_id client id (not clientId!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdGetAsync($realm, $user_id, $client_id, string $contentType = self::contentTypes['adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdGet'][0])
    {
        return $this->adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdGetAsyncWithHttpInfo($realm, $user_id, $client_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdGetAsyncWithHttpInfo
     *
     * Get client-level role mappings for the user or group, and the app
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $user_id (required)
     * @param  string $client_id client id (not clientId!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdGetAsyncWithHttpInfo($realm, $user_id, $client_id, string $contentType = self::contentTypes['adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
        $request = $this->adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdGetRequest($realm, $user_id, $client_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $user_id (required)
     * @param  string $client_id client id (not clientId!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdGetRequest($realm, $user_id, $client_id, string $contentType = self::contentTypes['adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdGet'
            );
        }

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdGet'
            );
        }

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdGet'
            );
        }


        $resourcePath = '/admin/realms/{realm}/users/{user-id}/role-mappings/clients/{client-id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user-id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'client-id' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPost
     *
     * Add client-level roles to the user or group role mapping
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $user_id user_id (required)
     * @param  string $client_id client id (not clientId!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPost'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPost($realm, $user_id, $client_id, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPost'][0])
    {
        $this->adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPostWithHttpInfo($realm, $user_id, $client_id, $role_representation, $contentType);
    }

    /**
     * Operation adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPostWithHttpInfo
     *
     * Add client-level roles to the user or group role mapping
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $user_id (required)
     * @param  string $client_id client id (not clientId!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPost'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPostWithHttpInfo($realm, $user_id, $client_id, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPost'][0])
    {
        $request = $this->adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPostRequest($realm, $user_id, $client_id, $role_representation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPostAsync
     *
     * Add client-level roles to the user or group role mapping
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $user_id (required)
     * @param  string $client_id client id (not clientId!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPostAsync($realm, $user_id, $client_id, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPost'][0])
    {
        return $this->adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPostAsyncWithHttpInfo($realm, $user_id, $client_id, $role_representation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPostAsyncWithHttpInfo
     *
     * Add client-level roles to the user or group role mapping
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $user_id (required)
     * @param  string $client_id client id (not clientId!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPostAsyncWithHttpInfo($realm, $user_id, $client_id, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPost'][0])
    {
        $returnType = '';
        $request = $this->adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPostRequest($realm, $user_id, $client_id, $role_representation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPost'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $user_id (required)
     * @param  string $client_id client id (not clientId!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPostRequest($realm, $user_id, $client_id, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPost'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPost'
            );
        }

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPost'
            );
        }

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling adminRealmsRealmUsersUserIdRoleMappingsClientsClientIdPost'
            );
        }



        $resourcePath = '/admin/realms/{realm}/users/{user-id}/role-mappings/clients/{client-id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user-id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($client_id !== null) {
            $resourcePath = str_replace(
                '{' . 'client-id' . '}',
                ObjectSerializer::toPathValue($client_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($role_representation)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($role_representation));
            } else {
                $httpBody = $role_representation;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
