<?php
/**
 * ScopeMappingsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace WebMI\KeycloakApiClient\KeycloakApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use WebMI\KeycloakApiClient\KeycloakApi\ApiException;
use WebMI\KeycloakApiClient\KeycloakApi\Configuration;
use WebMI\KeycloakApiClient\KeycloakApi\HeaderSelector;
use WebMI\KeycloakApiClient\KeycloakApi\ObjectSerializer;

/**
 * ScopeMappingsApi Class Doc Comment
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ScopeMappingsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableGet' => [
            'application/json',
        ],
        'adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeGet' => [
            'application/json',
        ],
        'adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientDelete' => [
            'application/json',
        ],
        'adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientGet' => [
            'application/json',
        ],
        'adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPost' => [
            'application/json',
        ],
        'adminRealmsRealmClientScopesClientScopeIdScopeMappingsGet' => [
            'application/json',
        ],
        'adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableGet' => [
            'application/json',
        ],
        'adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeGet' => [
            'application/json',
        ],
        'adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmDelete' => [
            'application/json',
        ],
        'adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmGet' => [
            'application/json',
        ],
        'adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPost' => [
            'application/json',
        ],
        'adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableGet' => [
            'application/json',
        ],
        'adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeGet' => [
            'application/json',
        ],
        'adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientDelete' => [
            'application/json',
        ],
        'adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientGet' => [
            'application/json',
        ],
        'adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPost' => [
            'application/json',
        ],
        'adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsGet' => [
            'application/json',
        ],
        'adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableGet' => [
            'application/json',
        ],
        'adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeGet' => [
            'application/json',
        ],
        'adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmDelete' => [
            'application/json',
        ],
        'adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmGet' => [
            'application/json',
        ],
        'adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPost' => [
            'application/json',
        ],
        'adminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableGet' => [
            'application/json',
        ],
        'adminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeGet' => [
            'application/json',
        ],
        'adminRealmsRealmClientsClientUuidScopeMappingsClientsClientDelete' => [
            'application/json',
        ],
        'adminRealmsRealmClientsClientUuidScopeMappingsClientsClientGet' => [
            'application/json',
        ],
        'adminRealmsRealmClientsClientUuidScopeMappingsClientsClientPost' => [
            'application/json',
        ],
        'adminRealmsRealmClientsClientUuidScopeMappingsGet' => [
            'application/json',
        ],
        'adminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableGet' => [
            'application/json',
        ],
        'adminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeGet' => [
            'application/json',
        ],
        'adminRealmsRealmClientsClientUuidScopeMappingsRealmDelete' => [
            'application/json',
        ],
        'adminRealmsRealmClientsClientUuidScopeMappingsRealmGet' => [
            'application/json',
        ],
        'adminRealmsRealmClientsClientUuidScopeMappingsRealmPost' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableGet
     *
     * The available client-level roles Returns the roles for the client that can be associated with the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id client_scope_id (required)
     * @param  string $client client (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]
     */
    public function adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableGet($realm, $client_scope_id, $client, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableGet'][0])
    {
        list($response) = $this->adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableGetWithHttpInfo($realm, $client_scope_id, $client, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableGetWithHttpInfo
     *
     * The available client-level roles Returns the roles for the client that can be associated with the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $client (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableGetWithHttpInfo($realm, $client_scope_id, $client, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableGet'][0])
    {
        $request = $this->adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableGetRequest($realm, $client_scope_id, $client, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableGetAsync
     *
     * The available client-level roles Returns the roles for the client that can be associated with the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $client (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableGetAsync($realm, $client_scope_id, $client, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableGet'][0])
    {
        return $this->adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableGetAsyncWithHttpInfo($realm, $client_scope_id, $client, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableGetAsyncWithHttpInfo
     *
     * The available client-level roles Returns the roles for the client that can be associated with the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $client (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableGetAsyncWithHttpInfo($realm, $client_scope_id, $client, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
        $request = $this->adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableGetRequest($realm, $client_scope_id, $client, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $client (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableGetRequest($realm, $client_scope_id, $client, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableGet'
            );
        }

        // verify the required parameter 'client_scope_id' is set
        if ($client_scope_id === null || (is_array($client_scope_id) && count($client_scope_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_scope_id when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableGet'
            );
        }

        // verify the required parameter 'client' is set
        if ($client === null || (is_array($client) && count($client) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableGet'
            );
        }


        $resourcePath = '/admin/realms/{realm}/client-scopes/{client-scope-id}/scope-mappings/clients/{client}/available';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_scope_id !== null) {
            $resourcePath = str_replace(
                '{' . 'client-scope-id' . '}',
                ObjectSerializer::toPathValue($client_scope_id),
                $resourcePath
            );
        }
        // path params
        if ($client !== null) {
            $resourcePath = str_replace(
                '{' . 'client' . '}',
                ObjectSerializer::toPathValue($client),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeGet
     *
     * Get effective client roles Returns the roles for the client that are associated with the client&#39;s scope.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id client_scope_id (required)
     * @param  string $client client (required)
     * @param  bool $brief_representation if false, return roles with their attributes (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]
     */
    public function adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeGet($realm, $client_scope_id, $client, $brief_representation = true, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeGet'][0])
    {
        list($response) = $this->adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeGetWithHttpInfo($realm, $client_scope_id, $client, $brief_representation, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeGetWithHttpInfo
     *
     * Get effective client roles Returns the roles for the client that are associated with the client&#39;s scope.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $client (required)
     * @param  bool $brief_representation if false, return roles with their attributes (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeGetWithHttpInfo($realm, $client_scope_id, $client, $brief_representation = true, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeGet'][0])
    {
        $request = $this->adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeGetRequest($realm, $client_scope_id, $client, $brief_representation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeGetAsync
     *
     * Get effective client roles Returns the roles for the client that are associated with the client&#39;s scope.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $client (required)
     * @param  bool $brief_representation if false, return roles with their attributes (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeGetAsync($realm, $client_scope_id, $client, $brief_representation = true, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeGet'][0])
    {
        return $this->adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeGetAsyncWithHttpInfo($realm, $client_scope_id, $client, $brief_representation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeGetAsyncWithHttpInfo
     *
     * Get effective client roles Returns the roles for the client that are associated with the client&#39;s scope.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $client (required)
     * @param  bool $brief_representation if false, return roles with their attributes (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeGetAsyncWithHttpInfo($realm, $client_scope_id, $client, $brief_representation = true, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
        $request = $this->adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeGetRequest($realm, $client_scope_id, $client, $brief_representation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $client (required)
     * @param  bool $brief_representation if false, return roles with their attributes (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeGetRequest($realm, $client_scope_id, $client, $brief_representation = true, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeGet'
            );
        }

        // verify the required parameter 'client_scope_id' is set
        if ($client_scope_id === null || (is_array($client_scope_id) && count($client_scope_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_scope_id when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeGet'
            );
        }

        // verify the required parameter 'client' is set
        if ($client === null || (is_array($client) && count($client) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeGet'
            );
        }



        $resourcePath = '/admin/realms/{realm}/client-scopes/{client-scope-id}/scope-mappings/clients/{client}/composite';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $brief_representation,
            'briefRepresentation', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_scope_id !== null) {
            $resourcePath = str_replace(
                '{' . 'client-scope-id' . '}',
                ObjectSerializer::toPathValue($client_scope_id),
                $resourcePath
            );
        }
        // path params
        if ($client !== null) {
            $resourcePath = str_replace(
                '{' . 'client' . '}',
                ObjectSerializer::toPathValue($client),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientDelete
     *
     * Remove client-level roles from the client&#39;s scope.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id client_scope_id (required)
     * @param  string $client client (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientDelete'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientDelete($realm, $client_scope_id, $client, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientDelete'][0])
    {
        $this->adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientDeleteWithHttpInfo($realm, $client_scope_id, $client, $role_representation, $contentType);
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientDeleteWithHttpInfo
     *
     * Remove client-level roles from the client&#39;s scope.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $client (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientDelete'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientDeleteWithHttpInfo($realm, $client_scope_id, $client, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientDelete'][0])
    {
        $request = $this->adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientDeleteRequest($realm, $client_scope_id, $client, $role_representation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientDeleteAsync
     *
     * Remove client-level roles from the client&#39;s scope.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $client (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientDeleteAsync($realm, $client_scope_id, $client, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientDelete'][0])
    {
        return $this->adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientDeleteAsyncWithHttpInfo($realm, $client_scope_id, $client, $role_representation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientDeleteAsyncWithHttpInfo
     *
     * Remove client-level roles from the client&#39;s scope.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $client (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientDeleteAsyncWithHttpInfo($realm, $client_scope_id, $client, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientDelete'][0])
    {
        $returnType = '';
        $request = $this->adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientDeleteRequest($realm, $client_scope_id, $client, $role_representation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientDelete'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $client (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientDeleteRequest($realm, $client_scope_id, $client, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientDelete'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientDelete'
            );
        }

        // verify the required parameter 'client_scope_id' is set
        if ($client_scope_id === null || (is_array($client_scope_id) && count($client_scope_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_scope_id when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientDelete'
            );
        }

        // verify the required parameter 'client' is set
        if ($client === null || (is_array($client) && count($client) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientDelete'
            );
        }



        $resourcePath = '/admin/realms/{realm}/client-scopes/{client-scope-id}/scope-mappings/clients/{client}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_scope_id !== null) {
            $resourcePath = str_replace(
                '{' . 'client-scope-id' . '}',
                ObjectSerializer::toPathValue($client_scope_id),
                $resourcePath
            );
        }
        // path params
        if ($client !== null) {
            $resourcePath = str_replace(
                '{' . 'client' . '}',
                ObjectSerializer::toPathValue($client),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($role_representation)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($role_representation));
            } else {
                $httpBody = $role_representation;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientGet
     *
     * Get the roles associated with a client&#39;s scope Returns roles for the client.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id client_scope_id (required)
     * @param  string $client client (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]
     */
    public function adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientGet($realm, $client_scope_id, $client, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientGet'][0])
    {
        list($response) = $this->adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientGetWithHttpInfo($realm, $client_scope_id, $client, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientGetWithHttpInfo
     *
     * Get the roles associated with a client&#39;s scope Returns roles for the client.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $client (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientGetWithHttpInfo($realm, $client_scope_id, $client, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientGet'][0])
    {
        $request = $this->adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientGetRequest($realm, $client_scope_id, $client, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientGetAsync
     *
     * Get the roles associated with a client&#39;s scope Returns roles for the client.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $client (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientGetAsync($realm, $client_scope_id, $client, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientGet'][0])
    {
        return $this->adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientGetAsyncWithHttpInfo($realm, $client_scope_id, $client, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientGetAsyncWithHttpInfo
     *
     * Get the roles associated with a client&#39;s scope Returns roles for the client.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $client (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientGetAsyncWithHttpInfo($realm, $client_scope_id, $client, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
        $request = $this->adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientGetRequest($realm, $client_scope_id, $client, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $client (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientGetRequest($realm, $client_scope_id, $client, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientGet'
            );
        }

        // verify the required parameter 'client_scope_id' is set
        if ($client_scope_id === null || (is_array($client_scope_id) && count($client_scope_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_scope_id when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientGet'
            );
        }

        // verify the required parameter 'client' is set
        if ($client === null || (is_array($client) && count($client) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientGet'
            );
        }


        $resourcePath = '/admin/realms/{realm}/client-scopes/{client-scope-id}/scope-mappings/clients/{client}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_scope_id !== null) {
            $resourcePath = str_replace(
                '{' . 'client-scope-id' . '}',
                ObjectSerializer::toPathValue($client_scope_id),
                $resourcePath
            );
        }
        // path params
        if ($client !== null) {
            $resourcePath = str_replace(
                '{' . 'client' . '}',
                ObjectSerializer::toPathValue($client),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPost
     *
     * Add client-level roles to the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id client_scope_id (required)
     * @param  string $client client (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPost'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPost($realm, $client_scope_id, $client, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPost'][0])
    {
        $this->adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPostWithHttpInfo($realm, $client_scope_id, $client, $role_representation, $contentType);
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPostWithHttpInfo
     *
     * Add client-level roles to the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $client (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPost'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPostWithHttpInfo($realm, $client_scope_id, $client, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPost'][0])
    {
        $request = $this->adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPostRequest($realm, $client_scope_id, $client, $role_representation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPostAsync
     *
     * Add client-level roles to the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $client (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPostAsync($realm, $client_scope_id, $client, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPost'][0])
    {
        return $this->adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPostAsyncWithHttpInfo($realm, $client_scope_id, $client, $role_representation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPostAsyncWithHttpInfo
     *
     * Add client-level roles to the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $client (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPostAsyncWithHttpInfo($realm, $client_scope_id, $client, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPost'][0])
    {
        $returnType = '';
        $request = $this->adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPostRequest($realm, $client_scope_id, $client, $role_representation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPost'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $client (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPostRequest($realm, $client_scope_id, $client, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPost'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPost'
            );
        }

        // verify the required parameter 'client_scope_id' is set
        if ($client_scope_id === null || (is_array($client_scope_id) && count($client_scope_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_scope_id when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPost'
            );
        }

        // verify the required parameter 'client' is set
        if ($client === null || (is_array($client) && count($client) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientPost'
            );
        }



        $resourcePath = '/admin/realms/{realm}/client-scopes/{client-scope-id}/scope-mappings/clients/{client}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_scope_id !== null) {
            $resourcePath = str_replace(
                '{' . 'client-scope-id' . '}',
                ObjectSerializer::toPathValue($client_scope_id),
                $resourcePath
            );
        }
        // path params
        if ($client !== null) {
            $resourcePath = str_replace(
                '{' . 'client' . '}',
                ObjectSerializer::toPathValue($client),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($role_representation)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($role_representation));
            } else {
                $httpBody = $role_representation;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdScopeMappingsGet
     *
     * Get all scope mappings for the client
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id client_scope_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\MappingsRepresentation
     * @deprecated
     */
    public function adminRealmsRealmClientScopesClientScopeIdScopeMappingsGet($realm, $client_scope_id, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsGet'][0])
    {
        list($response) = $this->adminRealmsRealmClientScopesClientScopeIdScopeMappingsGetWithHttpInfo($realm, $client_scope_id, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdScopeMappingsGetWithHttpInfo
     *
     * Get all scope mappings for the client
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\MappingsRepresentation, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function adminRealmsRealmClientScopesClientScopeIdScopeMappingsGetWithHttpInfo($realm, $client_scope_id, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsGet'][0])
    {
        $request = $this->adminRealmsRealmClientScopesClientScopeIdScopeMappingsGetRequest($realm, $client_scope_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\MappingsRepresentation' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\MappingsRepresentation' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\MappingsRepresentation', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\MappingsRepresentation';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\MappingsRepresentation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdScopeMappingsGetAsync
     *
     * Get all scope mappings for the client
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function adminRealmsRealmClientScopesClientScopeIdScopeMappingsGetAsync($realm, $client_scope_id, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsGet'][0])
    {
        return $this->adminRealmsRealmClientScopesClientScopeIdScopeMappingsGetAsyncWithHttpInfo($realm, $client_scope_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdScopeMappingsGetAsyncWithHttpInfo
     *
     * Get all scope mappings for the client
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function adminRealmsRealmClientScopesClientScopeIdScopeMappingsGetAsyncWithHttpInfo($realm, $client_scope_id, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\MappingsRepresentation';
        $request = $this->adminRealmsRealmClientScopesClientScopeIdScopeMappingsGetRequest($realm, $client_scope_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientScopesClientScopeIdScopeMappingsGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function adminRealmsRealmClientScopesClientScopeIdScopeMappingsGetRequest($realm, $client_scope_id, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsGet'
            );
        }

        // verify the required parameter 'client_scope_id' is set
        if ($client_scope_id === null || (is_array($client_scope_id) && count($client_scope_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_scope_id when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsGet'
            );
        }


        $resourcePath = '/admin/realms/{realm}/client-scopes/{client-scope-id}/scope-mappings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_scope_id !== null) {
            $resourcePath = str_replace(
                '{' . 'client-scope-id' . '}',
                ObjectSerializer::toPathValue($client_scope_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableGet
     *
     * Get realm-level roles that are available to attach to this client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id client_scope_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]
     */
    public function adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableGet($realm, $client_scope_id, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableGet'][0])
    {
        list($response) = $this->adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableGetWithHttpInfo($realm, $client_scope_id, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableGetWithHttpInfo
     *
     * Get realm-level roles that are available to attach to this client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableGetWithHttpInfo($realm, $client_scope_id, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableGet'][0])
    {
        $request = $this->adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableGetRequest($realm, $client_scope_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableGetAsync
     *
     * Get realm-level roles that are available to attach to this client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableGetAsync($realm, $client_scope_id, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableGet'][0])
    {
        return $this->adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableGetAsyncWithHttpInfo($realm, $client_scope_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableGetAsyncWithHttpInfo
     *
     * Get realm-level roles that are available to attach to this client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableGetAsyncWithHttpInfo($realm, $client_scope_id, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
        $request = $this->adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableGetRequest($realm, $client_scope_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableGetRequest($realm, $client_scope_id, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableGet'
            );
        }

        // verify the required parameter 'client_scope_id' is set
        if ($client_scope_id === null || (is_array($client_scope_id) && count($client_scope_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_scope_id when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableGet'
            );
        }


        $resourcePath = '/admin/realms/{realm}/client-scopes/{client-scope-id}/scope-mappings/realm/available';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_scope_id !== null) {
            $resourcePath = str_replace(
                '{' . 'client-scope-id' . '}',
                ObjectSerializer::toPathValue($client_scope_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeGet
     *
     * Get effective realm-level roles associated with the client’s scope What this does is recurse any composite roles associated with the client’s scope and adds the roles to this lists.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id client_scope_id (required)
     * @param  bool $brief_representation if false, return roles with their attributes (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]
     */
    public function adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeGet($realm, $client_scope_id, $brief_representation = true, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeGet'][0])
    {
        list($response) = $this->adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeGetWithHttpInfo($realm, $client_scope_id, $brief_representation, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeGetWithHttpInfo
     *
     * Get effective realm-level roles associated with the client’s scope What this does is recurse any composite roles associated with the client’s scope and adds the roles to this lists.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  bool $brief_representation if false, return roles with their attributes (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeGetWithHttpInfo($realm, $client_scope_id, $brief_representation = true, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeGet'][0])
    {
        $request = $this->adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeGetRequest($realm, $client_scope_id, $brief_representation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeGetAsync
     *
     * Get effective realm-level roles associated with the client’s scope What this does is recurse any composite roles associated with the client’s scope and adds the roles to this lists.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  bool $brief_representation if false, return roles with their attributes (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeGetAsync($realm, $client_scope_id, $brief_representation = true, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeGet'][0])
    {
        return $this->adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeGetAsyncWithHttpInfo($realm, $client_scope_id, $brief_representation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeGetAsyncWithHttpInfo
     *
     * Get effective realm-level roles associated with the client’s scope What this does is recurse any composite roles associated with the client’s scope and adds the roles to this lists.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  bool $brief_representation if false, return roles with their attributes (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeGetAsyncWithHttpInfo($realm, $client_scope_id, $brief_representation = true, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
        $request = $this->adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeGetRequest($realm, $client_scope_id, $brief_representation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  bool $brief_representation if false, return roles with their attributes (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeGetRequest($realm, $client_scope_id, $brief_representation = true, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeGet'
            );
        }

        // verify the required parameter 'client_scope_id' is set
        if ($client_scope_id === null || (is_array($client_scope_id) && count($client_scope_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_scope_id when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeGet'
            );
        }



        $resourcePath = '/admin/realms/{realm}/client-scopes/{client-scope-id}/scope-mappings/realm/composite';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $brief_representation,
            'briefRepresentation', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_scope_id !== null) {
            $resourcePath = str_replace(
                '{' . 'client-scope-id' . '}',
                ObjectSerializer::toPathValue($client_scope_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmDelete
     *
     * Remove a set of realm-level roles from the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id client_scope_id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmDelete'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmDelete($realm, $client_scope_id, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmDelete'][0])
    {
        $this->adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmDeleteWithHttpInfo($realm, $client_scope_id, $role_representation, $contentType);
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmDeleteWithHttpInfo
     *
     * Remove a set of realm-level roles from the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmDelete'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmDeleteWithHttpInfo($realm, $client_scope_id, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmDelete'][0])
    {
        $request = $this->adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmDeleteRequest($realm, $client_scope_id, $role_representation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmDeleteAsync
     *
     * Remove a set of realm-level roles from the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmDeleteAsync($realm, $client_scope_id, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmDelete'][0])
    {
        return $this->adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmDeleteAsyncWithHttpInfo($realm, $client_scope_id, $role_representation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmDeleteAsyncWithHttpInfo
     *
     * Remove a set of realm-level roles from the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmDeleteAsyncWithHttpInfo($realm, $client_scope_id, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmDelete'][0])
    {
        $returnType = '';
        $request = $this->adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmDeleteRequest($realm, $client_scope_id, $role_representation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmDelete'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmDeleteRequest($realm, $client_scope_id, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmDelete'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmDelete'
            );
        }

        // verify the required parameter 'client_scope_id' is set
        if ($client_scope_id === null || (is_array($client_scope_id) && count($client_scope_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_scope_id when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmDelete'
            );
        }



        $resourcePath = '/admin/realms/{realm}/client-scopes/{client-scope-id}/scope-mappings/realm';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_scope_id !== null) {
            $resourcePath = str_replace(
                '{' . 'client-scope-id' . '}',
                ObjectSerializer::toPathValue($client_scope_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($role_representation)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($role_representation));
            } else {
                $httpBody = $role_representation;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmGet
     *
     * Get realm-level roles associated with the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id client_scope_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]
     */
    public function adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmGet($realm, $client_scope_id, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmGet'][0])
    {
        list($response) = $this->adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmGetWithHttpInfo($realm, $client_scope_id, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmGetWithHttpInfo
     *
     * Get realm-level roles associated with the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmGetWithHttpInfo($realm, $client_scope_id, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmGet'][0])
    {
        $request = $this->adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmGetRequest($realm, $client_scope_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmGetAsync
     *
     * Get realm-level roles associated with the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmGetAsync($realm, $client_scope_id, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmGet'][0])
    {
        return $this->adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmGetAsyncWithHttpInfo($realm, $client_scope_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmGetAsyncWithHttpInfo
     *
     * Get realm-level roles associated with the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmGetAsyncWithHttpInfo($realm, $client_scope_id, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
        $request = $this->adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmGetRequest($realm, $client_scope_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmGetRequest($realm, $client_scope_id, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmGet'
            );
        }

        // verify the required parameter 'client_scope_id' is set
        if ($client_scope_id === null || (is_array($client_scope_id) && count($client_scope_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_scope_id when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmGet'
            );
        }


        $resourcePath = '/admin/realms/{realm}/client-scopes/{client-scope-id}/scope-mappings/realm';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_scope_id !== null) {
            $resourcePath = str_replace(
                '{' . 'client-scope-id' . '}',
                ObjectSerializer::toPathValue($client_scope_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPost
     *
     * Add a set of realm-level roles to the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id client_scope_id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPost'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPost($realm, $client_scope_id, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPost'][0])
    {
        $this->adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPostWithHttpInfo($realm, $client_scope_id, $role_representation, $contentType);
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPostWithHttpInfo
     *
     * Add a set of realm-level roles to the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPost'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPostWithHttpInfo($realm, $client_scope_id, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPost'][0])
    {
        $request = $this->adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPostRequest($realm, $client_scope_id, $role_representation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPostAsync
     *
     * Add a set of realm-level roles to the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPostAsync($realm, $client_scope_id, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPost'][0])
    {
        return $this->adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPostAsyncWithHttpInfo($realm, $client_scope_id, $role_representation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPostAsyncWithHttpInfo
     *
     * Add a set of realm-level roles to the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPostAsyncWithHttpInfo($realm, $client_scope_id, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPost'][0])
    {
        $returnType = '';
        $request = $this->adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPostRequest($realm, $client_scope_id, $role_representation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPost'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPostRequest($realm, $client_scope_id, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPost'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPost'
            );
        }

        // verify the required parameter 'client_scope_id' is set
        if ($client_scope_id === null || (is_array($client_scope_id) && count($client_scope_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_scope_id when calling adminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmPost'
            );
        }



        $resourcePath = '/admin/realms/{realm}/client-scopes/{client-scope-id}/scope-mappings/realm';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_scope_id !== null) {
            $resourcePath = str_replace(
                '{' . 'client-scope-id' . '}',
                ObjectSerializer::toPathValue($client_scope_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($role_representation)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($role_representation));
            } else {
                $httpBody = $role_representation;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableGet
     *
     * The available client-level roles Returns the roles for the client that can be associated with the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id client_scope_id (required)
     * @param  string $client client (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableGet($realm, $client_scope_id, $client, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableGet'][0])
    {
        list($response) = $this->adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableGetWithHttpInfo($realm, $client_scope_id, $client, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableGetWithHttpInfo
     *
     * The available client-level roles Returns the roles for the client that can be associated with the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $client (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableGetWithHttpInfo($realm, $client_scope_id, $client, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableGet'][0])
    {
        $request = $this->adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableGetRequest($realm, $client_scope_id, $client, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableGetAsync
     *
     * The available client-level roles Returns the roles for the client that can be associated with the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $client (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableGetAsync($realm, $client_scope_id, $client, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableGet'][0])
    {
        return $this->adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableGetAsyncWithHttpInfo($realm, $client_scope_id, $client, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableGetAsyncWithHttpInfo
     *
     * The available client-level roles Returns the roles for the client that can be associated with the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $client (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableGetAsyncWithHttpInfo($realm, $client_scope_id, $client, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
        $request = $this->adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableGetRequest($realm, $client_scope_id, $client, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $client (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableGetRequest($realm, $client_scope_id, $client, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableGet'
            );
        }

        // verify the required parameter 'client_scope_id' is set
        if ($client_scope_id === null || (is_array($client_scope_id) && count($client_scope_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_scope_id when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableGet'
            );
        }

        // verify the required parameter 'client' is set
        if ($client === null || (is_array($client) && count($client) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableGet'
            );
        }


        $resourcePath = '/admin/realms/{realm}/client-templates/{client-scope-id}/scope-mappings/clients/{client}/available';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_scope_id !== null) {
            $resourcePath = str_replace(
                '{' . 'client-scope-id' . '}',
                ObjectSerializer::toPathValue($client_scope_id),
                $resourcePath
            );
        }
        // path params
        if ($client !== null) {
            $resourcePath = str_replace(
                '{' . 'client' . '}',
                ObjectSerializer::toPathValue($client),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeGet
     *
     * Get effective client roles Returns the roles for the client that are associated with the client&#39;s scope.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id client_scope_id (required)
     * @param  string $client client (required)
     * @param  bool $brief_representation if false, return roles with their attributes (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeGet($realm, $client_scope_id, $client, $brief_representation = true, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeGet'][0])
    {
        list($response) = $this->adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeGetWithHttpInfo($realm, $client_scope_id, $client, $brief_representation, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeGetWithHttpInfo
     *
     * Get effective client roles Returns the roles for the client that are associated with the client&#39;s scope.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $client (required)
     * @param  bool $brief_representation if false, return roles with their attributes (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeGetWithHttpInfo($realm, $client_scope_id, $client, $brief_representation = true, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeGet'][0])
    {
        $request = $this->adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeGetRequest($realm, $client_scope_id, $client, $brief_representation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeGetAsync
     *
     * Get effective client roles Returns the roles for the client that are associated with the client&#39;s scope.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $client (required)
     * @param  bool $brief_representation if false, return roles with their attributes (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeGetAsync($realm, $client_scope_id, $client, $brief_representation = true, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeGet'][0])
    {
        return $this->adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeGetAsyncWithHttpInfo($realm, $client_scope_id, $client, $brief_representation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeGetAsyncWithHttpInfo
     *
     * Get effective client roles Returns the roles for the client that are associated with the client&#39;s scope.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $client (required)
     * @param  bool $brief_representation if false, return roles with their attributes (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeGetAsyncWithHttpInfo($realm, $client_scope_id, $client, $brief_representation = true, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
        $request = $this->adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeGetRequest($realm, $client_scope_id, $client, $brief_representation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $client (required)
     * @param  bool $brief_representation if false, return roles with their attributes (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeGetRequest($realm, $client_scope_id, $client, $brief_representation = true, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeGet'
            );
        }

        // verify the required parameter 'client_scope_id' is set
        if ($client_scope_id === null || (is_array($client_scope_id) && count($client_scope_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_scope_id when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeGet'
            );
        }

        // verify the required parameter 'client' is set
        if ($client === null || (is_array($client) && count($client) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeGet'
            );
        }



        $resourcePath = '/admin/realms/{realm}/client-templates/{client-scope-id}/scope-mappings/clients/{client}/composite';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $brief_representation,
            'briefRepresentation', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_scope_id !== null) {
            $resourcePath = str_replace(
                '{' . 'client-scope-id' . '}',
                ObjectSerializer::toPathValue($client_scope_id),
                $resourcePath
            );
        }
        // path params
        if ($client !== null) {
            $resourcePath = str_replace(
                '{' . 'client' . '}',
                ObjectSerializer::toPathValue($client),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientDelete
     *
     * Remove client-level roles from the client&#39;s scope.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id client_scope_id (required)
     * @param  string $client client (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientDelete'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientDelete($realm, $client_scope_id, $client, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientDelete'][0])
    {
        $this->adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientDeleteWithHttpInfo($realm, $client_scope_id, $client, $role_representation, $contentType);
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientDeleteWithHttpInfo
     *
     * Remove client-level roles from the client&#39;s scope.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $client (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientDelete'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientDeleteWithHttpInfo($realm, $client_scope_id, $client, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientDelete'][0])
    {
        $request = $this->adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientDeleteRequest($realm, $client_scope_id, $client, $role_representation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientDeleteAsync
     *
     * Remove client-level roles from the client&#39;s scope.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $client (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientDeleteAsync($realm, $client_scope_id, $client, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientDelete'][0])
    {
        return $this->adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientDeleteAsyncWithHttpInfo($realm, $client_scope_id, $client, $role_representation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientDeleteAsyncWithHttpInfo
     *
     * Remove client-level roles from the client&#39;s scope.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $client (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientDeleteAsyncWithHttpInfo($realm, $client_scope_id, $client, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientDelete'][0])
    {
        $returnType = '';
        $request = $this->adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientDeleteRequest($realm, $client_scope_id, $client, $role_representation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientDelete'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $client (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientDeleteRequest($realm, $client_scope_id, $client, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientDelete'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientDelete'
            );
        }

        // verify the required parameter 'client_scope_id' is set
        if ($client_scope_id === null || (is_array($client_scope_id) && count($client_scope_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_scope_id when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientDelete'
            );
        }

        // verify the required parameter 'client' is set
        if ($client === null || (is_array($client) && count($client) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientDelete'
            );
        }



        $resourcePath = '/admin/realms/{realm}/client-templates/{client-scope-id}/scope-mappings/clients/{client}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_scope_id !== null) {
            $resourcePath = str_replace(
                '{' . 'client-scope-id' . '}',
                ObjectSerializer::toPathValue($client_scope_id),
                $resourcePath
            );
        }
        // path params
        if ($client !== null) {
            $resourcePath = str_replace(
                '{' . 'client' . '}',
                ObjectSerializer::toPathValue($client),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($role_representation)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($role_representation));
            } else {
                $httpBody = $role_representation;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientGet
     *
     * Get the roles associated with a client&#39;s scope Returns roles for the client.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id client_scope_id (required)
     * @param  string $client client (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientGet($realm, $client_scope_id, $client, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientGet'][0])
    {
        list($response) = $this->adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientGetWithHttpInfo($realm, $client_scope_id, $client, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientGetWithHttpInfo
     *
     * Get the roles associated with a client&#39;s scope Returns roles for the client.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $client (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientGetWithHttpInfo($realm, $client_scope_id, $client, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientGet'][0])
    {
        $request = $this->adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientGetRequest($realm, $client_scope_id, $client, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientGetAsync
     *
     * Get the roles associated with a client&#39;s scope Returns roles for the client.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $client (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientGetAsync($realm, $client_scope_id, $client, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientGet'][0])
    {
        return $this->adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientGetAsyncWithHttpInfo($realm, $client_scope_id, $client, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientGetAsyncWithHttpInfo
     *
     * Get the roles associated with a client&#39;s scope Returns roles for the client.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $client (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientGetAsyncWithHttpInfo($realm, $client_scope_id, $client, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
        $request = $this->adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientGetRequest($realm, $client_scope_id, $client, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $client (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientGetRequest($realm, $client_scope_id, $client, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientGet'
            );
        }

        // verify the required parameter 'client_scope_id' is set
        if ($client_scope_id === null || (is_array($client_scope_id) && count($client_scope_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_scope_id when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientGet'
            );
        }

        // verify the required parameter 'client' is set
        if ($client === null || (is_array($client) && count($client) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientGet'
            );
        }


        $resourcePath = '/admin/realms/{realm}/client-templates/{client-scope-id}/scope-mappings/clients/{client}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_scope_id !== null) {
            $resourcePath = str_replace(
                '{' . 'client-scope-id' . '}',
                ObjectSerializer::toPathValue($client_scope_id),
                $resourcePath
            );
        }
        // path params
        if ($client !== null) {
            $resourcePath = str_replace(
                '{' . 'client' . '}',
                ObjectSerializer::toPathValue($client),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPost
     *
     * Add client-level roles to the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id client_scope_id (required)
     * @param  string $client client (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPost'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPost($realm, $client_scope_id, $client, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPost'][0])
    {
        $this->adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPostWithHttpInfo($realm, $client_scope_id, $client, $role_representation, $contentType);
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPostWithHttpInfo
     *
     * Add client-level roles to the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $client (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPost'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPostWithHttpInfo($realm, $client_scope_id, $client, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPost'][0])
    {
        $request = $this->adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPostRequest($realm, $client_scope_id, $client, $role_representation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPostAsync
     *
     * Add client-level roles to the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $client (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPostAsync($realm, $client_scope_id, $client, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPost'][0])
    {
        return $this->adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPostAsyncWithHttpInfo($realm, $client_scope_id, $client, $role_representation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPostAsyncWithHttpInfo
     *
     * Add client-level roles to the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $client (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPostAsyncWithHttpInfo($realm, $client_scope_id, $client, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPost'][0])
    {
        $returnType = '';
        $request = $this->adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPostRequest($realm, $client_scope_id, $client, $role_representation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPost'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $client (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPostRequest($realm, $client_scope_id, $client, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPost'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPost'
            );
        }

        // verify the required parameter 'client_scope_id' is set
        if ($client_scope_id === null || (is_array($client_scope_id) && count($client_scope_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_scope_id when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPost'
            );
        }

        // verify the required parameter 'client' is set
        if ($client === null || (is_array($client) && count($client) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientPost'
            );
        }



        $resourcePath = '/admin/realms/{realm}/client-templates/{client-scope-id}/scope-mappings/clients/{client}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_scope_id !== null) {
            $resourcePath = str_replace(
                '{' . 'client-scope-id' . '}',
                ObjectSerializer::toPathValue($client_scope_id),
                $resourcePath
            );
        }
        // path params
        if ($client !== null) {
            $resourcePath = str_replace(
                '{' . 'client' . '}',
                ObjectSerializer::toPathValue($client),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($role_representation)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($role_representation));
            } else {
                $httpBody = $role_representation;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsGet
     *
     * Get all scope mappings for the client
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id client_scope_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\MappingsRepresentation
     * @deprecated
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsGet($realm, $client_scope_id, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsGet'][0])
    {
        list($response) = $this->adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsGetWithHttpInfo($realm, $client_scope_id, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsGetWithHttpInfo
     *
     * Get all scope mappings for the client
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\MappingsRepresentation, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsGetWithHttpInfo($realm, $client_scope_id, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsGet'][0])
    {
        $request = $this->adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsGetRequest($realm, $client_scope_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\MappingsRepresentation' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\MappingsRepresentation' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\MappingsRepresentation', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\MappingsRepresentation';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\MappingsRepresentation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsGetAsync
     *
     * Get all scope mappings for the client
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsGetAsync($realm, $client_scope_id, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsGet'][0])
    {
        return $this->adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsGetAsyncWithHttpInfo($realm, $client_scope_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsGetAsyncWithHttpInfo
     *
     * Get all scope mappings for the client
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsGetAsyncWithHttpInfo($realm, $client_scope_id, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\MappingsRepresentation';
        $request = $this->adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsGetRequest($realm, $client_scope_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsGetRequest($realm, $client_scope_id, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsGet'
            );
        }

        // verify the required parameter 'client_scope_id' is set
        if ($client_scope_id === null || (is_array($client_scope_id) && count($client_scope_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_scope_id when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsGet'
            );
        }


        $resourcePath = '/admin/realms/{realm}/client-templates/{client-scope-id}/scope-mappings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_scope_id !== null) {
            $resourcePath = str_replace(
                '{' . 'client-scope-id' . '}',
                ObjectSerializer::toPathValue($client_scope_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableGet
     *
     * Get realm-level roles that are available to attach to this client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id client_scope_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableGet($realm, $client_scope_id, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableGet'][0])
    {
        list($response) = $this->adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableGetWithHttpInfo($realm, $client_scope_id, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableGetWithHttpInfo
     *
     * Get realm-level roles that are available to attach to this client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableGetWithHttpInfo($realm, $client_scope_id, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableGet'][0])
    {
        $request = $this->adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableGetRequest($realm, $client_scope_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableGetAsync
     *
     * Get realm-level roles that are available to attach to this client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableGetAsync($realm, $client_scope_id, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableGet'][0])
    {
        return $this->adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableGetAsyncWithHttpInfo($realm, $client_scope_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableGetAsyncWithHttpInfo
     *
     * Get realm-level roles that are available to attach to this client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableGetAsyncWithHttpInfo($realm, $client_scope_id, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
        $request = $this->adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableGetRequest($realm, $client_scope_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableGetRequest($realm, $client_scope_id, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableGet'
            );
        }

        // verify the required parameter 'client_scope_id' is set
        if ($client_scope_id === null || (is_array($client_scope_id) && count($client_scope_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_scope_id when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableGet'
            );
        }


        $resourcePath = '/admin/realms/{realm}/client-templates/{client-scope-id}/scope-mappings/realm/available';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_scope_id !== null) {
            $resourcePath = str_replace(
                '{' . 'client-scope-id' . '}',
                ObjectSerializer::toPathValue($client_scope_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeGet
     *
     * Get effective realm-level roles associated with the client’s scope What this does is recurse any composite roles associated with the client’s scope and adds the roles to this lists.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id client_scope_id (required)
     * @param  bool $brief_representation if false, return roles with their attributes (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeGet($realm, $client_scope_id, $brief_representation = true, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeGet'][0])
    {
        list($response) = $this->adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeGetWithHttpInfo($realm, $client_scope_id, $brief_representation, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeGetWithHttpInfo
     *
     * Get effective realm-level roles associated with the client’s scope What this does is recurse any composite roles associated with the client’s scope and adds the roles to this lists.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  bool $brief_representation if false, return roles with their attributes (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeGetWithHttpInfo($realm, $client_scope_id, $brief_representation = true, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeGet'][0])
    {
        $request = $this->adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeGetRequest($realm, $client_scope_id, $brief_representation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeGetAsync
     *
     * Get effective realm-level roles associated with the client’s scope What this does is recurse any composite roles associated with the client’s scope and adds the roles to this lists.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  bool $brief_representation if false, return roles with their attributes (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeGetAsync($realm, $client_scope_id, $brief_representation = true, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeGet'][0])
    {
        return $this->adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeGetAsyncWithHttpInfo($realm, $client_scope_id, $brief_representation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeGetAsyncWithHttpInfo
     *
     * Get effective realm-level roles associated with the client’s scope What this does is recurse any composite roles associated with the client’s scope and adds the roles to this lists.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  bool $brief_representation if false, return roles with their attributes (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeGetAsyncWithHttpInfo($realm, $client_scope_id, $brief_representation = true, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
        $request = $this->adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeGetRequest($realm, $client_scope_id, $brief_representation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  bool $brief_representation if false, return roles with their attributes (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeGetRequest($realm, $client_scope_id, $brief_representation = true, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeGet'
            );
        }

        // verify the required parameter 'client_scope_id' is set
        if ($client_scope_id === null || (is_array($client_scope_id) && count($client_scope_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_scope_id when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeGet'
            );
        }



        $resourcePath = '/admin/realms/{realm}/client-templates/{client-scope-id}/scope-mappings/realm/composite';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $brief_representation,
            'briefRepresentation', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_scope_id !== null) {
            $resourcePath = str_replace(
                '{' . 'client-scope-id' . '}',
                ObjectSerializer::toPathValue($client_scope_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmDelete
     *
     * Remove a set of realm-level roles from the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id client_scope_id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmDelete'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmDelete($realm, $client_scope_id, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmDelete'][0])
    {
        $this->adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmDeleteWithHttpInfo($realm, $client_scope_id, $role_representation, $contentType);
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmDeleteWithHttpInfo
     *
     * Remove a set of realm-level roles from the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmDelete'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmDeleteWithHttpInfo($realm, $client_scope_id, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmDelete'][0])
    {
        $request = $this->adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmDeleteRequest($realm, $client_scope_id, $role_representation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmDeleteAsync
     *
     * Remove a set of realm-level roles from the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmDeleteAsync($realm, $client_scope_id, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmDelete'][0])
    {
        return $this->adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmDeleteAsyncWithHttpInfo($realm, $client_scope_id, $role_representation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmDeleteAsyncWithHttpInfo
     *
     * Remove a set of realm-level roles from the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmDeleteAsyncWithHttpInfo($realm, $client_scope_id, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmDelete'][0])
    {
        $returnType = '';
        $request = $this->adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmDeleteRequest($realm, $client_scope_id, $role_representation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmDelete'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmDeleteRequest($realm, $client_scope_id, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmDelete'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmDelete'
            );
        }

        // verify the required parameter 'client_scope_id' is set
        if ($client_scope_id === null || (is_array($client_scope_id) && count($client_scope_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_scope_id when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmDelete'
            );
        }



        $resourcePath = '/admin/realms/{realm}/client-templates/{client-scope-id}/scope-mappings/realm';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_scope_id !== null) {
            $resourcePath = str_replace(
                '{' . 'client-scope-id' . '}',
                ObjectSerializer::toPathValue($client_scope_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($role_representation)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($role_representation));
            } else {
                $httpBody = $role_representation;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmGet
     *
     * Get realm-level roles associated with the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id client_scope_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmGet($realm, $client_scope_id, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmGet'][0])
    {
        list($response) = $this->adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmGetWithHttpInfo($realm, $client_scope_id, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmGetWithHttpInfo
     *
     * Get realm-level roles associated with the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmGetWithHttpInfo($realm, $client_scope_id, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmGet'][0])
    {
        $request = $this->adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmGetRequest($realm, $client_scope_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmGetAsync
     *
     * Get realm-level roles associated with the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmGetAsync($realm, $client_scope_id, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmGet'][0])
    {
        return $this->adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmGetAsyncWithHttpInfo($realm, $client_scope_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmGetAsyncWithHttpInfo
     *
     * Get realm-level roles associated with the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmGetAsyncWithHttpInfo($realm, $client_scope_id, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
        $request = $this->adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmGetRequest($realm, $client_scope_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmGetRequest($realm, $client_scope_id, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmGet'
            );
        }

        // verify the required parameter 'client_scope_id' is set
        if ($client_scope_id === null || (is_array($client_scope_id) && count($client_scope_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_scope_id when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmGet'
            );
        }


        $resourcePath = '/admin/realms/{realm}/client-templates/{client-scope-id}/scope-mappings/realm';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_scope_id !== null) {
            $resourcePath = str_replace(
                '{' . 'client-scope-id' . '}',
                ObjectSerializer::toPathValue($client_scope_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPost
     *
     * Add a set of realm-level roles to the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id client_scope_id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPost'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPost($realm, $client_scope_id, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPost'][0])
    {
        $this->adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPostWithHttpInfo($realm, $client_scope_id, $role_representation, $contentType);
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPostWithHttpInfo
     *
     * Add a set of realm-level roles to the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPost'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPostWithHttpInfo($realm, $client_scope_id, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPost'][0])
    {
        $request = $this->adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPostRequest($realm, $client_scope_id, $role_representation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPostAsync
     *
     * Add a set of realm-level roles to the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPostAsync($realm, $client_scope_id, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPost'][0])
    {
        return $this->adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPostAsyncWithHttpInfo($realm, $client_scope_id, $role_representation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPostAsyncWithHttpInfo
     *
     * Add a set of realm-level roles to the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPostAsyncWithHttpInfo($realm, $client_scope_id, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPost'][0])
    {
        $returnType = '';
        $request = $this->adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPostRequest($realm, $client_scope_id, $role_representation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPost'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPostRequest($realm, $client_scope_id, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPost'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPost'
            );
        }

        // verify the required parameter 'client_scope_id' is set
        if ($client_scope_id === null || (is_array($client_scope_id) && count($client_scope_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_scope_id when calling adminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmPost'
            );
        }



        $resourcePath = '/admin/realms/{realm}/client-templates/{client-scope-id}/scope-mappings/realm';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_scope_id !== null) {
            $resourcePath = str_replace(
                '{' . 'client-scope-id' . '}',
                ObjectSerializer::toPathValue($client_scope_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($role_representation)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($role_representation));
            } else {
                $httpBody = $role_representation;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableGet
     *
     * The available client-level roles Returns the roles for the client that can be associated with the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $client client (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]
     */
    public function adminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableGet($realm, $client_uuid, $client, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableGet'][0])
    {
        list($response) = $this->adminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableGetWithHttpInfo($realm, $client_uuid, $client, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableGetWithHttpInfo
     *
     * The available client-level roles Returns the roles for the client that can be associated with the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $client (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableGetWithHttpInfo($realm, $client_uuid, $client, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableGet'][0])
    {
        $request = $this->adminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableGetRequest($realm, $client_uuid, $client, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableGetAsync
     *
     * The available client-level roles Returns the roles for the client that can be associated with the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $client (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableGetAsync($realm, $client_uuid, $client, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableGet'][0])
    {
        return $this->adminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableGetAsyncWithHttpInfo($realm, $client_uuid, $client, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableGetAsyncWithHttpInfo
     *
     * The available client-level roles Returns the roles for the client that can be associated with the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $client (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableGetAsyncWithHttpInfo($realm, $client_uuid, $client, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
        $request = $this->adminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableGetRequest($realm, $client_uuid, $client, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $client (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableGetRequest($realm, $client_uuid, $client, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableGet'
            );
        }

        // verify the required parameter 'client_uuid' is set
        if ($client_uuid === null || (is_array($client_uuid) && count($client_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_uuid when calling adminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableGet'
            );
        }

        // verify the required parameter 'client' is set
        if ($client === null || (is_array($client) && count($client) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client when calling adminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableGet'
            );
        }


        $resourcePath = '/admin/realms/{realm}/clients/{client-uuid}/scope-mappings/clients/{client}/available';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'client-uuid' . '}',
                ObjectSerializer::toPathValue($client_uuid),
                $resourcePath
            );
        }
        // path params
        if ($client !== null) {
            $resourcePath = str_replace(
                '{' . 'client' . '}',
                ObjectSerializer::toPathValue($client),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeGet
     *
     * Get effective client roles Returns the roles for the client that are associated with the client&#39;s scope.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $client client (required)
     * @param  bool $brief_representation if false, return roles with their attributes (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]
     */
    public function adminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeGet($realm, $client_uuid, $client, $brief_representation = true, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeGet'][0])
    {
        list($response) = $this->adminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeGetWithHttpInfo($realm, $client_uuid, $client, $brief_representation, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeGetWithHttpInfo
     *
     * Get effective client roles Returns the roles for the client that are associated with the client&#39;s scope.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $client (required)
     * @param  bool $brief_representation if false, return roles with their attributes (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeGetWithHttpInfo($realm, $client_uuid, $client, $brief_representation = true, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeGet'][0])
    {
        $request = $this->adminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeGetRequest($realm, $client_uuid, $client, $brief_representation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeGetAsync
     *
     * Get effective client roles Returns the roles for the client that are associated with the client&#39;s scope.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $client (required)
     * @param  bool $brief_representation if false, return roles with their attributes (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeGetAsync($realm, $client_uuid, $client, $brief_representation = true, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeGet'][0])
    {
        return $this->adminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeGetAsyncWithHttpInfo($realm, $client_uuid, $client, $brief_representation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeGetAsyncWithHttpInfo
     *
     * Get effective client roles Returns the roles for the client that are associated with the client&#39;s scope.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $client (required)
     * @param  bool $brief_representation if false, return roles with their attributes (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeGetAsyncWithHttpInfo($realm, $client_uuid, $client, $brief_representation = true, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
        $request = $this->adminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeGetRequest($realm, $client_uuid, $client, $brief_representation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $client (required)
     * @param  bool $brief_representation if false, return roles with their attributes (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeGetRequest($realm, $client_uuid, $client, $brief_representation = true, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeGet'
            );
        }

        // verify the required parameter 'client_uuid' is set
        if ($client_uuid === null || (is_array($client_uuid) && count($client_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_uuid when calling adminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeGet'
            );
        }

        // verify the required parameter 'client' is set
        if ($client === null || (is_array($client) && count($client) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client when calling adminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeGet'
            );
        }



        $resourcePath = '/admin/realms/{realm}/clients/{client-uuid}/scope-mappings/clients/{client}/composite';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $brief_representation,
            'briefRepresentation', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'client-uuid' . '}',
                ObjectSerializer::toPathValue($client_uuid),
                $resourcePath
            );
        }
        // path params
        if ($client !== null) {
            $resourcePath = str_replace(
                '{' . 'client' . '}',
                ObjectSerializer::toPathValue($client),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidScopeMappingsClientsClientDelete
     *
     * Remove client-level roles from the client&#39;s scope.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $client client (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsClientsClientDelete'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminRealmsRealmClientsClientUuidScopeMappingsClientsClientDelete($realm, $client_uuid, $client, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsClientsClientDelete'][0])
    {
        $this->adminRealmsRealmClientsClientUuidScopeMappingsClientsClientDeleteWithHttpInfo($realm, $client_uuid, $client, $role_representation, $contentType);
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidScopeMappingsClientsClientDeleteWithHttpInfo
     *
     * Remove client-level roles from the client&#39;s scope.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $client (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsClientsClientDelete'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientsClientUuidScopeMappingsClientsClientDeleteWithHttpInfo($realm, $client_uuid, $client, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsClientsClientDelete'][0])
    {
        $request = $this->adminRealmsRealmClientsClientUuidScopeMappingsClientsClientDeleteRequest($realm, $client_uuid, $client, $role_representation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidScopeMappingsClientsClientDeleteAsync
     *
     * Remove client-level roles from the client&#39;s scope.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $client (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsClientsClientDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidScopeMappingsClientsClientDeleteAsync($realm, $client_uuid, $client, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsClientsClientDelete'][0])
    {
        return $this->adminRealmsRealmClientsClientUuidScopeMappingsClientsClientDeleteAsyncWithHttpInfo($realm, $client_uuid, $client, $role_representation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidScopeMappingsClientsClientDeleteAsyncWithHttpInfo
     *
     * Remove client-level roles from the client&#39;s scope.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $client (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsClientsClientDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidScopeMappingsClientsClientDeleteAsyncWithHttpInfo($realm, $client_uuid, $client, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsClientsClientDelete'][0])
    {
        $returnType = '';
        $request = $this->adminRealmsRealmClientsClientUuidScopeMappingsClientsClientDeleteRequest($realm, $client_uuid, $client, $role_representation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientsClientUuidScopeMappingsClientsClientDelete'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $client (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsClientsClientDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientsClientUuidScopeMappingsClientsClientDeleteRequest($realm, $client_uuid, $client, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsClientsClientDelete'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientsClientUuidScopeMappingsClientsClientDelete'
            );
        }

        // verify the required parameter 'client_uuid' is set
        if ($client_uuid === null || (is_array($client_uuid) && count($client_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_uuid when calling adminRealmsRealmClientsClientUuidScopeMappingsClientsClientDelete'
            );
        }

        // verify the required parameter 'client' is set
        if ($client === null || (is_array($client) && count($client) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client when calling adminRealmsRealmClientsClientUuidScopeMappingsClientsClientDelete'
            );
        }



        $resourcePath = '/admin/realms/{realm}/clients/{client-uuid}/scope-mappings/clients/{client}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'client-uuid' . '}',
                ObjectSerializer::toPathValue($client_uuid),
                $resourcePath
            );
        }
        // path params
        if ($client !== null) {
            $resourcePath = str_replace(
                '{' . 'client' . '}',
                ObjectSerializer::toPathValue($client),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($role_representation)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($role_representation));
            } else {
                $httpBody = $role_representation;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidScopeMappingsClientsClientGet
     *
     * Get the roles associated with a client&#39;s scope Returns roles for the client.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $client client (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsClientsClientGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]
     */
    public function adminRealmsRealmClientsClientUuidScopeMappingsClientsClientGet($realm, $client_uuid, $client, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsClientsClientGet'][0])
    {
        list($response) = $this->adminRealmsRealmClientsClientUuidScopeMappingsClientsClientGetWithHttpInfo($realm, $client_uuid, $client, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidScopeMappingsClientsClientGetWithHttpInfo
     *
     * Get the roles associated with a client&#39;s scope Returns roles for the client.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $client (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsClientsClientGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientsClientUuidScopeMappingsClientsClientGetWithHttpInfo($realm, $client_uuid, $client, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsClientsClientGet'][0])
    {
        $request = $this->adminRealmsRealmClientsClientUuidScopeMappingsClientsClientGetRequest($realm, $client_uuid, $client, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidScopeMappingsClientsClientGetAsync
     *
     * Get the roles associated with a client&#39;s scope Returns roles for the client.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $client (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsClientsClientGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidScopeMappingsClientsClientGetAsync($realm, $client_uuid, $client, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsClientsClientGet'][0])
    {
        return $this->adminRealmsRealmClientsClientUuidScopeMappingsClientsClientGetAsyncWithHttpInfo($realm, $client_uuid, $client, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidScopeMappingsClientsClientGetAsyncWithHttpInfo
     *
     * Get the roles associated with a client&#39;s scope Returns roles for the client.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $client (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsClientsClientGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidScopeMappingsClientsClientGetAsyncWithHttpInfo($realm, $client_uuid, $client, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsClientsClientGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
        $request = $this->adminRealmsRealmClientsClientUuidScopeMappingsClientsClientGetRequest($realm, $client_uuid, $client, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientsClientUuidScopeMappingsClientsClientGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $client (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsClientsClientGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientsClientUuidScopeMappingsClientsClientGetRequest($realm, $client_uuid, $client, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsClientsClientGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientsClientUuidScopeMappingsClientsClientGet'
            );
        }

        // verify the required parameter 'client_uuid' is set
        if ($client_uuid === null || (is_array($client_uuid) && count($client_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_uuid when calling adminRealmsRealmClientsClientUuidScopeMappingsClientsClientGet'
            );
        }

        // verify the required parameter 'client' is set
        if ($client === null || (is_array($client) && count($client) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client when calling adminRealmsRealmClientsClientUuidScopeMappingsClientsClientGet'
            );
        }


        $resourcePath = '/admin/realms/{realm}/clients/{client-uuid}/scope-mappings/clients/{client}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'client-uuid' . '}',
                ObjectSerializer::toPathValue($client_uuid),
                $resourcePath
            );
        }
        // path params
        if ($client !== null) {
            $resourcePath = str_replace(
                '{' . 'client' . '}',
                ObjectSerializer::toPathValue($client),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidScopeMappingsClientsClientPost
     *
     * Add client-level roles to the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $client client (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsClientsClientPost'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminRealmsRealmClientsClientUuidScopeMappingsClientsClientPost($realm, $client_uuid, $client, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsClientsClientPost'][0])
    {
        $this->adminRealmsRealmClientsClientUuidScopeMappingsClientsClientPostWithHttpInfo($realm, $client_uuid, $client, $role_representation, $contentType);
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidScopeMappingsClientsClientPostWithHttpInfo
     *
     * Add client-level roles to the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $client (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsClientsClientPost'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientsClientUuidScopeMappingsClientsClientPostWithHttpInfo($realm, $client_uuid, $client, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsClientsClientPost'][0])
    {
        $request = $this->adminRealmsRealmClientsClientUuidScopeMappingsClientsClientPostRequest($realm, $client_uuid, $client, $role_representation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidScopeMappingsClientsClientPostAsync
     *
     * Add client-level roles to the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $client (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsClientsClientPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidScopeMappingsClientsClientPostAsync($realm, $client_uuid, $client, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsClientsClientPost'][0])
    {
        return $this->adminRealmsRealmClientsClientUuidScopeMappingsClientsClientPostAsyncWithHttpInfo($realm, $client_uuid, $client, $role_representation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidScopeMappingsClientsClientPostAsyncWithHttpInfo
     *
     * Add client-level roles to the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $client (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsClientsClientPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidScopeMappingsClientsClientPostAsyncWithHttpInfo($realm, $client_uuid, $client, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsClientsClientPost'][0])
    {
        $returnType = '';
        $request = $this->adminRealmsRealmClientsClientUuidScopeMappingsClientsClientPostRequest($realm, $client_uuid, $client, $role_representation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientsClientUuidScopeMappingsClientsClientPost'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $client (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsClientsClientPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientsClientUuidScopeMappingsClientsClientPostRequest($realm, $client_uuid, $client, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsClientsClientPost'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientsClientUuidScopeMappingsClientsClientPost'
            );
        }

        // verify the required parameter 'client_uuid' is set
        if ($client_uuid === null || (is_array($client_uuid) && count($client_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_uuid when calling adminRealmsRealmClientsClientUuidScopeMappingsClientsClientPost'
            );
        }

        // verify the required parameter 'client' is set
        if ($client === null || (is_array($client) && count($client) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client when calling adminRealmsRealmClientsClientUuidScopeMappingsClientsClientPost'
            );
        }



        $resourcePath = '/admin/realms/{realm}/clients/{client-uuid}/scope-mappings/clients/{client}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'client-uuid' . '}',
                ObjectSerializer::toPathValue($client_uuid),
                $resourcePath
            );
        }
        // path params
        if ($client !== null) {
            $resourcePath = str_replace(
                '{' . 'client' . '}',
                ObjectSerializer::toPathValue($client),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($role_representation)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($role_representation));
            } else {
                $httpBody = $role_representation;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidScopeMappingsGet
     *
     * Get all scope mappings for the client
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\MappingsRepresentation
     * @deprecated
     */
    public function adminRealmsRealmClientsClientUuidScopeMappingsGet($realm, $client_uuid, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsGet'][0])
    {
        list($response) = $this->adminRealmsRealmClientsClientUuidScopeMappingsGetWithHttpInfo($realm, $client_uuid, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidScopeMappingsGetWithHttpInfo
     *
     * Get all scope mappings for the client
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\MappingsRepresentation, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function adminRealmsRealmClientsClientUuidScopeMappingsGetWithHttpInfo($realm, $client_uuid, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsGet'][0])
    {
        $request = $this->adminRealmsRealmClientsClientUuidScopeMappingsGetRequest($realm, $client_uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\MappingsRepresentation' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\MappingsRepresentation' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\MappingsRepresentation', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\MappingsRepresentation';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\MappingsRepresentation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidScopeMappingsGetAsync
     *
     * Get all scope mappings for the client
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function adminRealmsRealmClientsClientUuidScopeMappingsGetAsync($realm, $client_uuid, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsGet'][0])
    {
        return $this->adminRealmsRealmClientsClientUuidScopeMappingsGetAsyncWithHttpInfo($realm, $client_uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidScopeMappingsGetAsyncWithHttpInfo
     *
     * Get all scope mappings for the client
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function adminRealmsRealmClientsClientUuidScopeMappingsGetAsyncWithHttpInfo($realm, $client_uuid, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\MappingsRepresentation';
        $request = $this->adminRealmsRealmClientsClientUuidScopeMappingsGetRequest($realm, $client_uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientsClientUuidScopeMappingsGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function adminRealmsRealmClientsClientUuidScopeMappingsGetRequest($realm, $client_uuid, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientsClientUuidScopeMappingsGet'
            );
        }

        // verify the required parameter 'client_uuid' is set
        if ($client_uuid === null || (is_array($client_uuid) && count($client_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_uuid when calling adminRealmsRealmClientsClientUuidScopeMappingsGet'
            );
        }


        $resourcePath = '/admin/realms/{realm}/clients/{client-uuid}/scope-mappings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'client-uuid' . '}',
                ObjectSerializer::toPathValue($client_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableGet
     *
     * Get realm-level roles that are available to attach to this client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]
     */
    public function adminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableGet($realm, $client_uuid, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableGet'][0])
    {
        list($response) = $this->adminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableGetWithHttpInfo($realm, $client_uuid, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableGetWithHttpInfo
     *
     * Get realm-level roles that are available to attach to this client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableGetWithHttpInfo($realm, $client_uuid, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableGet'][0])
    {
        $request = $this->adminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableGetRequest($realm, $client_uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableGetAsync
     *
     * Get realm-level roles that are available to attach to this client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableGetAsync($realm, $client_uuid, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableGet'][0])
    {
        return $this->adminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableGetAsyncWithHttpInfo($realm, $client_uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableGetAsyncWithHttpInfo
     *
     * Get realm-level roles that are available to attach to this client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableGetAsyncWithHttpInfo($realm, $client_uuid, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
        $request = $this->adminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableGetRequest($realm, $client_uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableGetRequest($realm, $client_uuid, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableGet'
            );
        }

        // verify the required parameter 'client_uuid' is set
        if ($client_uuid === null || (is_array($client_uuid) && count($client_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_uuid when calling adminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableGet'
            );
        }


        $resourcePath = '/admin/realms/{realm}/clients/{client-uuid}/scope-mappings/realm/available';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'client-uuid' . '}',
                ObjectSerializer::toPathValue($client_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeGet
     *
     * Get effective realm-level roles associated with the client’s scope What this does is recurse any composite roles associated with the client’s scope and adds the roles to this lists.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  bool $brief_representation if false, return roles with their attributes (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]
     */
    public function adminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeGet($realm, $client_uuid, $brief_representation = true, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeGet'][0])
    {
        list($response) = $this->adminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeGetWithHttpInfo($realm, $client_uuid, $brief_representation, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeGetWithHttpInfo
     *
     * Get effective realm-level roles associated with the client’s scope What this does is recurse any composite roles associated with the client’s scope and adds the roles to this lists.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  bool $brief_representation if false, return roles with their attributes (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeGetWithHttpInfo($realm, $client_uuid, $brief_representation = true, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeGet'][0])
    {
        $request = $this->adminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeGetRequest($realm, $client_uuid, $brief_representation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeGetAsync
     *
     * Get effective realm-level roles associated with the client’s scope What this does is recurse any composite roles associated with the client’s scope and adds the roles to this lists.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  bool $brief_representation if false, return roles with their attributes (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeGetAsync($realm, $client_uuid, $brief_representation = true, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeGet'][0])
    {
        return $this->adminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeGetAsyncWithHttpInfo($realm, $client_uuid, $brief_representation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeGetAsyncWithHttpInfo
     *
     * Get effective realm-level roles associated with the client’s scope What this does is recurse any composite roles associated with the client’s scope and adds the roles to this lists.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  bool $brief_representation if false, return roles with their attributes (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeGetAsyncWithHttpInfo($realm, $client_uuid, $brief_representation = true, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
        $request = $this->adminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeGetRequest($realm, $client_uuid, $brief_representation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  bool $brief_representation if false, return roles with their attributes (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeGetRequest($realm, $client_uuid, $brief_representation = true, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeGet'
            );
        }

        // verify the required parameter 'client_uuid' is set
        if ($client_uuid === null || (is_array($client_uuid) && count($client_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_uuid when calling adminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeGet'
            );
        }



        $resourcePath = '/admin/realms/{realm}/clients/{client-uuid}/scope-mappings/realm/composite';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $brief_representation,
            'briefRepresentation', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'client-uuid' . '}',
                ObjectSerializer::toPathValue($client_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidScopeMappingsRealmDelete
     *
     * Remove a set of realm-level roles from the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsRealmDelete'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminRealmsRealmClientsClientUuidScopeMappingsRealmDelete($realm, $client_uuid, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsRealmDelete'][0])
    {
        $this->adminRealmsRealmClientsClientUuidScopeMappingsRealmDeleteWithHttpInfo($realm, $client_uuid, $role_representation, $contentType);
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidScopeMappingsRealmDeleteWithHttpInfo
     *
     * Remove a set of realm-level roles from the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsRealmDelete'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientsClientUuidScopeMappingsRealmDeleteWithHttpInfo($realm, $client_uuid, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsRealmDelete'][0])
    {
        $request = $this->adminRealmsRealmClientsClientUuidScopeMappingsRealmDeleteRequest($realm, $client_uuid, $role_representation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidScopeMappingsRealmDeleteAsync
     *
     * Remove a set of realm-level roles from the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsRealmDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidScopeMappingsRealmDeleteAsync($realm, $client_uuid, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsRealmDelete'][0])
    {
        return $this->adminRealmsRealmClientsClientUuidScopeMappingsRealmDeleteAsyncWithHttpInfo($realm, $client_uuid, $role_representation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidScopeMappingsRealmDeleteAsyncWithHttpInfo
     *
     * Remove a set of realm-level roles from the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsRealmDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidScopeMappingsRealmDeleteAsyncWithHttpInfo($realm, $client_uuid, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsRealmDelete'][0])
    {
        $returnType = '';
        $request = $this->adminRealmsRealmClientsClientUuidScopeMappingsRealmDeleteRequest($realm, $client_uuid, $role_representation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientsClientUuidScopeMappingsRealmDelete'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsRealmDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientsClientUuidScopeMappingsRealmDeleteRequest($realm, $client_uuid, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsRealmDelete'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientsClientUuidScopeMappingsRealmDelete'
            );
        }

        // verify the required parameter 'client_uuid' is set
        if ($client_uuid === null || (is_array($client_uuid) && count($client_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_uuid when calling adminRealmsRealmClientsClientUuidScopeMappingsRealmDelete'
            );
        }



        $resourcePath = '/admin/realms/{realm}/clients/{client-uuid}/scope-mappings/realm';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'client-uuid' . '}',
                ObjectSerializer::toPathValue($client_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($role_representation)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($role_representation));
            } else {
                $httpBody = $role_representation;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidScopeMappingsRealmGet
     *
     * Get realm-level roles associated with the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsRealmGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]
     */
    public function adminRealmsRealmClientsClientUuidScopeMappingsRealmGet($realm, $client_uuid, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsRealmGet'][0])
    {
        list($response) = $this->adminRealmsRealmClientsClientUuidScopeMappingsRealmGetWithHttpInfo($realm, $client_uuid, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidScopeMappingsRealmGetWithHttpInfo
     *
     * Get realm-level roles associated with the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsRealmGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientsClientUuidScopeMappingsRealmGetWithHttpInfo($realm, $client_uuid, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsRealmGet'][0])
    {
        $request = $this->adminRealmsRealmClientsClientUuidScopeMappingsRealmGetRequest($realm, $client_uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidScopeMappingsRealmGetAsync
     *
     * Get realm-level roles associated with the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsRealmGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidScopeMappingsRealmGetAsync($realm, $client_uuid, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsRealmGet'][0])
    {
        return $this->adminRealmsRealmClientsClientUuidScopeMappingsRealmGetAsyncWithHttpInfo($realm, $client_uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidScopeMappingsRealmGetAsyncWithHttpInfo
     *
     * Get realm-level roles associated with the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsRealmGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidScopeMappingsRealmGetAsyncWithHttpInfo($realm, $client_uuid, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsRealmGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
        $request = $this->adminRealmsRealmClientsClientUuidScopeMappingsRealmGetRequest($realm, $client_uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientsClientUuidScopeMappingsRealmGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsRealmGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientsClientUuidScopeMappingsRealmGetRequest($realm, $client_uuid, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsRealmGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientsClientUuidScopeMappingsRealmGet'
            );
        }

        // verify the required parameter 'client_uuid' is set
        if ($client_uuid === null || (is_array($client_uuid) && count($client_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_uuid when calling adminRealmsRealmClientsClientUuidScopeMappingsRealmGet'
            );
        }


        $resourcePath = '/admin/realms/{realm}/clients/{client-uuid}/scope-mappings/realm';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'client-uuid' . '}',
                ObjectSerializer::toPathValue($client_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidScopeMappingsRealmPost
     *
     * Add a set of realm-level roles to the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsRealmPost'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminRealmsRealmClientsClientUuidScopeMappingsRealmPost($realm, $client_uuid, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsRealmPost'][0])
    {
        $this->adminRealmsRealmClientsClientUuidScopeMappingsRealmPostWithHttpInfo($realm, $client_uuid, $role_representation, $contentType);
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidScopeMappingsRealmPostWithHttpInfo
     *
     * Add a set of realm-level roles to the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsRealmPost'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientsClientUuidScopeMappingsRealmPostWithHttpInfo($realm, $client_uuid, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsRealmPost'][0])
    {
        $request = $this->adminRealmsRealmClientsClientUuidScopeMappingsRealmPostRequest($realm, $client_uuid, $role_representation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidScopeMappingsRealmPostAsync
     *
     * Add a set of realm-level roles to the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsRealmPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidScopeMappingsRealmPostAsync($realm, $client_uuid, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsRealmPost'][0])
    {
        return $this->adminRealmsRealmClientsClientUuidScopeMappingsRealmPostAsyncWithHttpInfo($realm, $client_uuid, $role_representation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidScopeMappingsRealmPostAsyncWithHttpInfo
     *
     * Add a set of realm-level roles to the client&#39;s scope
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsRealmPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidScopeMappingsRealmPostAsyncWithHttpInfo($realm, $client_uuid, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsRealmPost'][0])
    {
        $returnType = '';
        $request = $this->adminRealmsRealmClientsClientUuidScopeMappingsRealmPostRequest($realm, $client_uuid, $role_representation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientsClientUuidScopeMappingsRealmPost'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsRealmPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientsClientUuidScopeMappingsRealmPostRequest($realm, $client_uuid, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidScopeMappingsRealmPost'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientsClientUuidScopeMappingsRealmPost'
            );
        }

        // verify the required parameter 'client_uuid' is set
        if ($client_uuid === null || (is_array($client_uuid) && count($client_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_uuid when calling adminRealmsRealmClientsClientUuidScopeMappingsRealmPost'
            );
        }



        $resourcePath = '/admin/realms/{realm}/clients/{client-uuid}/scope-mappings/realm';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'client-uuid' . '}',
                ObjectSerializer::toPathValue($client_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($role_representation)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($role_representation));
            } else {
                $httpBody = $role_representation;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
