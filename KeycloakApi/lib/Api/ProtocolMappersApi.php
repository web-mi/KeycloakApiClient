<?php
/**
 * ProtocolMappersApi
 * PHP version 7.4
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace WebMI\KeycloakApiClient\KeycloakApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use WebMI\KeycloakApiClient\KeycloakApi\ApiException;
use WebMI\KeycloakApiClient\KeycloakApi\Configuration;
use WebMI\KeycloakApiClient\KeycloakApi\HeaderSelector;
use WebMI\KeycloakApiClient\KeycloakApi\ObjectSerializer;

/**
 * ProtocolMappersApi Class Doc Comment
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ProtocolMappersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'adminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsPost' => [
            'application/json',
        ],
        'adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsGet' => [
            'application/json',
        ],
        'adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdDelete' => [
            'application/json',
        ],
        'adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdGet' => [
            'application/json',
        ],
        'adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPut' => [
            'application/json',
        ],
        'adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsPost' => [
            'application/json',
        ],
        'adminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolGet' => [
            'application/json',
        ],
        'adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsPost' => [
            'application/json',
        ],
        'adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsGet' => [
            'application/json',
        ],
        'adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdDelete' => [
            'application/json',
        ],
        'adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdGet' => [
            'application/json',
        ],
        'adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPut' => [
            'application/json',
        ],
        'adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsPost' => [
            'application/json',
        ],
        'adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolGet' => [
            'application/json',
        ],
        'adminRealmsRealmClientsClientUuidProtocolMappersAddModelsPost' => [
            'application/json',
        ],
        'adminRealmsRealmClientsClientUuidProtocolMappersModelsGet' => [
            'application/json',
        ],
        'adminRealmsRealmClientsClientUuidProtocolMappersModelsIdDelete' => [
            'application/json',
        ],
        'adminRealmsRealmClientsClientUuidProtocolMappersModelsIdGet' => [
            'application/json',
        ],
        'adminRealmsRealmClientsClientUuidProtocolMappersModelsIdPut' => [
            'application/json',
        ],
        'adminRealmsRealmClientsClientUuidProtocolMappersModelsPost' => [
            'application/json',
        ],
        'adminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolGet' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsPost
     *
     * Create multiple mappers
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id client_scope_id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[] $protocol_mapper_representation protocol_mapper_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsPost'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsPost($realm, $client_scope_id, $protocol_mapper_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsPost'][0])
    {
        $this->adminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsPostWithHttpInfo($realm, $client_scope_id, $protocol_mapper_representation, $contentType);
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsPostWithHttpInfo
     *
     * Create multiple mappers
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[] $protocol_mapper_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsPost'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsPostWithHttpInfo($realm, $client_scope_id, $protocol_mapper_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsPost'][0])
    {
        $request = $this->adminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsPostRequest($realm, $client_scope_id, $protocol_mapper_representation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsPostAsync
     *
     * Create multiple mappers
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[] $protocol_mapper_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsPostAsync($realm, $client_scope_id, $protocol_mapper_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsPost'][0])
    {
        return $this->adminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsPostAsyncWithHttpInfo($realm, $client_scope_id, $protocol_mapper_representation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsPostAsyncWithHttpInfo
     *
     * Create multiple mappers
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[] $protocol_mapper_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsPostAsyncWithHttpInfo($realm, $client_scope_id, $protocol_mapper_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsPost'][0])
    {
        $returnType = '';
        $request = $this->adminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsPostRequest($realm, $client_scope_id, $protocol_mapper_representation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsPost'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[] $protocol_mapper_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsPostRequest($realm, $client_scope_id, $protocol_mapper_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsPost'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsPost'
            );
        }

        // verify the required parameter 'client_scope_id' is set
        if ($client_scope_id === null || (is_array($client_scope_id) && count($client_scope_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_scope_id when calling adminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsPost'
            );
        }



        $resourcePath = '/admin/realms/{realm}/client-scopes/{client-scope-id}/protocol-mappers/add-models';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_scope_id !== null) {
            $resourcePath = str_replace(
                '{' . 'client-scope-id' . '}',
                ObjectSerializer::toPathValue($client_scope_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($protocol_mapper_representation)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($protocol_mapper_representation));
            } else {
                $httpBody = $protocol_mapper_representation;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsGet
     *
     * Get mappers
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id client_scope_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[]
     */
    public function adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsGet($realm, $client_scope_id, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsGet'][0])
    {
        list($response) = $this->adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsGetWithHttpInfo($realm, $client_scope_id, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsGetWithHttpInfo
     *
     * Get mappers
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsGetWithHttpInfo($realm, $client_scope_id, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsGet'][0])
    {
        $request = $this->adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsGetRequest($realm, $client_scope_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsGetAsync
     *
     * Get mappers
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsGetAsync($realm, $client_scope_id, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsGet'][0])
    {
        return $this->adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsGetAsyncWithHttpInfo($realm, $client_scope_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsGetAsyncWithHttpInfo
     *
     * Get mappers
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsGetAsyncWithHttpInfo($realm, $client_scope_id, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[]';
        $request = $this->adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsGetRequest($realm, $client_scope_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsGetRequest($realm, $client_scope_id, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsGet'
            );
        }

        // verify the required parameter 'client_scope_id' is set
        if ($client_scope_id === null || (is_array($client_scope_id) && count($client_scope_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_scope_id when calling adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsGet'
            );
        }


        $resourcePath = '/admin/realms/{realm}/client-scopes/{client-scope-id}/protocol-mappers/models';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_scope_id !== null) {
            $resourcePath = str_replace(
                '{' . 'client-scope-id' . '}',
                ObjectSerializer::toPathValue($client_scope_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdDelete
     *
     * Delete the mapper
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id client_scope_id (required)
     * @param  string $id Mapper id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdDelete'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdDelete($realm, $client_scope_id, $id, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdDelete'][0])
    {
        $this->adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdDeleteWithHttpInfo($realm, $client_scope_id, $id, $contentType);
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdDeleteWithHttpInfo
     *
     * Delete the mapper
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $id Mapper id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdDelete'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdDeleteWithHttpInfo($realm, $client_scope_id, $id, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdDelete'][0])
    {
        $request = $this->adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdDeleteRequest($realm, $client_scope_id, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdDeleteAsync
     *
     * Delete the mapper
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $id Mapper id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdDeleteAsync($realm, $client_scope_id, $id, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdDelete'][0])
    {
        return $this->adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdDeleteAsyncWithHttpInfo($realm, $client_scope_id, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdDeleteAsyncWithHttpInfo
     *
     * Delete the mapper
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $id Mapper id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdDeleteAsyncWithHttpInfo($realm, $client_scope_id, $id, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdDelete'][0])
    {
        $returnType = '';
        $request = $this->adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdDeleteRequest($realm, $client_scope_id, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdDelete'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $id Mapper id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdDeleteRequest($realm, $client_scope_id, $id, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdDelete'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdDelete'
            );
        }

        // verify the required parameter 'client_scope_id' is set
        if ($client_scope_id === null || (is_array($client_scope_id) && count($client_scope_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_scope_id when calling adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdDelete'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdDelete'
            );
        }


        $resourcePath = '/admin/realms/{realm}/client-scopes/{client-scope-id}/protocol-mappers/models/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_scope_id !== null) {
            $resourcePath = str_replace(
                '{' . 'client-scope-id' . '}',
                ObjectSerializer::toPathValue($client_scope_id),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdGet
     *
     * Get mapper by id
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id client_scope_id (required)
     * @param  string $id Mapper id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation
     */
    public function adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdGet($realm, $client_scope_id, $id, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdGet'][0])
    {
        list($response) = $this->adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdGetWithHttpInfo($realm, $client_scope_id, $id, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdGetWithHttpInfo
     *
     * Get mapper by id
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $id Mapper id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdGetWithHttpInfo($realm, $client_scope_id, $id, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdGet'][0])
    {
        $request = $this->adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdGetRequest($realm, $client_scope_id, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdGetAsync
     *
     * Get mapper by id
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $id Mapper id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdGetAsync($realm, $client_scope_id, $id, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdGet'][0])
    {
        return $this->adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdGetAsyncWithHttpInfo($realm, $client_scope_id, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdGetAsyncWithHttpInfo
     *
     * Get mapper by id
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $id Mapper id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdGetAsyncWithHttpInfo($realm, $client_scope_id, $id, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation';
        $request = $this->adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdGetRequest($realm, $client_scope_id, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $id Mapper id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdGetRequest($realm, $client_scope_id, $id, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdGet'
            );
        }

        // verify the required parameter 'client_scope_id' is set
        if ($client_scope_id === null || (is_array($client_scope_id) && count($client_scope_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_scope_id when calling adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdGet'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdGet'
            );
        }


        $resourcePath = '/admin/realms/{realm}/client-scopes/{client-scope-id}/protocol-mappers/models/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_scope_id !== null) {
            $resourcePath = str_replace(
                '{' . 'client-scope-id' . '}',
                ObjectSerializer::toPathValue($client_scope_id),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPut
     *
     * Update the mapper
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id client_scope_id (required)
     * @param  string $id Mapper id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation $protocol_mapper_representation protocol_mapper_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPut'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPut($realm, $client_scope_id, $id, $protocol_mapper_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPut'][0])
    {
        $this->adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPutWithHttpInfo($realm, $client_scope_id, $id, $protocol_mapper_representation, $contentType);
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPutWithHttpInfo
     *
     * Update the mapper
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $id Mapper id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation $protocol_mapper_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPut'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPutWithHttpInfo($realm, $client_scope_id, $id, $protocol_mapper_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPut'][0])
    {
        $request = $this->adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPutRequest($realm, $client_scope_id, $id, $protocol_mapper_representation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPutAsync
     *
     * Update the mapper
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $id Mapper id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation $protocol_mapper_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPutAsync($realm, $client_scope_id, $id, $protocol_mapper_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPut'][0])
    {
        return $this->adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPutAsyncWithHttpInfo($realm, $client_scope_id, $id, $protocol_mapper_representation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPutAsyncWithHttpInfo
     *
     * Update the mapper
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $id Mapper id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation $protocol_mapper_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPutAsyncWithHttpInfo($realm, $client_scope_id, $id, $protocol_mapper_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPut'][0])
    {
        $returnType = '';
        $request = $this->adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPutRequest($realm, $client_scope_id, $id, $protocol_mapper_representation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPut'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $id Mapper id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation $protocol_mapper_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPutRequest($realm, $client_scope_id, $id, $protocol_mapper_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPut'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPut'
            );
        }

        // verify the required parameter 'client_scope_id' is set
        if ($client_scope_id === null || (is_array($client_scope_id) && count($client_scope_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_scope_id when calling adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPut'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdPut'
            );
        }



        $resourcePath = '/admin/realms/{realm}/client-scopes/{client-scope-id}/protocol-mappers/models/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_scope_id !== null) {
            $resourcePath = str_replace(
                '{' . 'client-scope-id' . '}',
                ObjectSerializer::toPathValue($client_scope_id),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($protocol_mapper_representation)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($protocol_mapper_representation));
            } else {
                $httpBody = $protocol_mapper_representation;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsPost
     *
     * Create a mapper
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id client_scope_id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation $protocol_mapper_representation protocol_mapper_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsPost'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsPost($realm, $client_scope_id, $protocol_mapper_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsPost'][0])
    {
        $this->adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsPostWithHttpInfo($realm, $client_scope_id, $protocol_mapper_representation, $contentType);
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsPostWithHttpInfo
     *
     * Create a mapper
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation $protocol_mapper_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsPost'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsPostWithHttpInfo($realm, $client_scope_id, $protocol_mapper_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsPost'][0])
    {
        $request = $this->adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsPostRequest($realm, $client_scope_id, $protocol_mapper_representation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsPostAsync
     *
     * Create a mapper
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation $protocol_mapper_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsPostAsync($realm, $client_scope_id, $protocol_mapper_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsPost'][0])
    {
        return $this->adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsPostAsyncWithHttpInfo($realm, $client_scope_id, $protocol_mapper_representation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsPostAsyncWithHttpInfo
     *
     * Create a mapper
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation $protocol_mapper_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsPostAsyncWithHttpInfo($realm, $client_scope_id, $protocol_mapper_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsPost'][0])
    {
        $returnType = '';
        $request = $this->adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsPostRequest($realm, $client_scope_id, $protocol_mapper_representation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsPost'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation $protocol_mapper_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsPostRequest($realm, $client_scope_id, $protocol_mapper_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsPost'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsPost'
            );
        }

        // verify the required parameter 'client_scope_id' is set
        if ($client_scope_id === null || (is_array($client_scope_id) && count($client_scope_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_scope_id when calling adminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsPost'
            );
        }



        $resourcePath = '/admin/realms/{realm}/client-scopes/{client-scope-id}/protocol-mappers/models';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_scope_id !== null) {
            $resourcePath = str_replace(
                '{' . 'client-scope-id' . '}',
                ObjectSerializer::toPathValue($client_scope_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($protocol_mapper_representation)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($protocol_mapper_representation));
            } else {
                $httpBody = $protocol_mapper_representation;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolGet
     *
     * Get mappers by name for a specific protocol
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id client_scope_id (required)
     * @param  string $protocol protocol (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[]
     */
    public function adminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolGet($realm, $client_scope_id, $protocol, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolGet'][0])
    {
        list($response) = $this->adminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolGetWithHttpInfo($realm, $client_scope_id, $protocol, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolGetWithHttpInfo
     *
     * Get mappers by name for a specific protocol
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $protocol (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolGetWithHttpInfo($realm, $client_scope_id, $protocol, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolGet'][0])
    {
        $request = $this->adminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolGetRequest($realm, $client_scope_id, $protocol, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolGetAsync
     *
     * Get mappers by name for a specific protocol
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $protocol (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolGetAsync($realm, $client_scope_id, $protocol, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolGet'][0])
    {
        return $this->adminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolGetAsyncWithHttpInfo($realm, $client_scope_id, $protocol, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolGetAsyncWithHttpInfo
     *
     * Get mappers by name for a specific protocol
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $protocol (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolGetAsyncWithHttpInfo($realm, $client_scope_id, $protocol, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[]';
        $request = $this->adminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolGetRequest($realm, $client_scope_id, $protocol, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $protocol (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolGetRequest($realm, $client_scope_id, $protocol, string $contentType = self::contentTypes['adminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolGet'
            );
        }

        // verify the required parameter 'client_scope_id' is set
        if ($client_scope_id === null || (is_array($client_scope_id) && count($client_scope_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_scope_id when calling adminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolGet'
            );
        }

        // verify the required parameter 'protocol' is set
        if ($protocol === null || (is_array($protocol) && count($protocol) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $protocol when calling adminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolGet'
            );
        }


        $resourcePath = '/admin/realms/{realm}/client-scopes/{client-scope-id}/protocol-mappers/protocol/{protocol}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_scope_id !== null) {
            $resourcePath = str_replace(
                '{' . 'client-scope-id' . '}',
                ObjectSerializer::toPathValue($client_scope_id),
                $resourcePath
            );
        }
        // path params
        if ($protocol !== null) {
            $resourcePath = str_replace(
                '{' . 'protocol' . '}',
                ObjectSerializer::toPathValue($protocol),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsPost
     *
     * Create multiple mappers
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id client_scope_id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[] $protocol_mapper_representation protocol_mapper_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsPost'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsPost($realm, $client_scope_id, $protocol_mapper_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsPost'][0])
    {
        $this->adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsPostWithHttpInfo($realm, $client_scope_id, $protocol_mapper_representation, $contentType);
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsPostWithHttpInfo
     *
     * Create multiple mappers
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[] $protocol_mapper_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsPost'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsPostWithHttpInfo($realm, $client_scope_id, $protocol_mapper_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsPost'][0])
    {
        $request = $this->adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsPostRequest($realm, $client_scope_id, $protocol_mapper_representation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsPostAsync
     *
     * Create multiple mappers
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[] $protocol_mapper_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsPostAsync($realm, $client_scope_id, $protocol_mapper_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsPost'][0])
    {
        return $this->adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsPostAsyncWithHttpInfo($realm, $client_scope_id, $protocol_mapper_representation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsPostAsyncWithHttpInfo
     *
     * Create multiple mappers
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[] $protocol_mapper_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsPostAsyncWithHttpInfo($realm, $client_scope_id, $protocol_mapper_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsPost'][0])
    {
        $returnType = '';
        $request = $this->adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsPostRequest($realm, $client_scope_id, $protocol_mapper_representation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsPost'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[] $protocol_mapper_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsPostRequest($realm, $client_scope_id, $protocol_mapper_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsPost'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsPost'
            );
        }

        // verify the required parameter 'client_scope_id' is set
        if ($client_scope_id === null || (is_array($client_scope_id) && count($client_scope_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_scope_id when calling adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsPost'
            );
        }



        $resourcePath = '/admin/realms/{realm}/client-templates/{client-scope-id}/protocol-mappers/add-models';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_scope_id !== null) {
            $resourcePath = str_replace(
                '{' . 'client-scope-id' . '}',
                ObjectSerializer::toPathValue($client_scope_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($protocol_mapper_representation)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($protocol_mapper_representation));
            } else {
                $httpBody = $protocol_mapper_representation;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsGet
     *
     * Get mappers
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id client_scope_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[]
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsGet($realm, $client_scope_id, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsGet'][0])
    {
        list($response) = $this->adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsGetWithHttpInfo($realm, $client_scope_id, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsGetWithHttpInfo
     *
     * Get mappers
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsGetWithHttpInfo($realm, $client_scope_id, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsGet'][0])
    {
        $request = $this->adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsGetRequest($realm, $client_scope_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsGetAsync
     *
     * Get mappers
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsGetAsync($realm, $client_scope_id, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsGet'][0])
    {
        return $this->adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsGetAsyncWithHttpInfo($realm, $client_scope_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsGetAsyncWithHttpInfo
     *
     * Get mappers
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsGetAsyncWithHttpInfo($realm, $client_scope_id, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[]';
        $request = $this->adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsGetRequest($realm, $client_scope_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsGetRequest($realm, $client_scope_id, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsGet'
            );
        }

        // verify the required parameter 'client_scope_id' is set
        if ($client_scope_id === null || (is_array($client_scope_id) && count($client_scope_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_scope_id when calling adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsGet'
            );
        }


        $resourcePath = '/admin/realms/{realm}/client-templates/{client-scope-id}/protocol-mappers/models';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_scope_id !== null) {
            $resourcePath = str_replace(
                '{' . 'client-scope-id' . '}',
                ObjectSerializer::toPathValue($client_scope_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdDelete
     *
     * Delete the mapper
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id client_scope_id (required)
     * @param  string $id Mapper id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdDelete'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdDelete($realm, $client_scope_id, $id, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdDelete'][0])
    {
        $this->adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdDeleteWithHttpInfo($realm, $client_scope_id, $id, $contentType);
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdDeleteWithHttpInfo
     *
     * Delete the mapper
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $id Mapper id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdDelete'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdDeleteWithHttpInfo($realm, $client_scope_id, $id, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdDelete'][0])
    {
        $request = $this->adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdDeleteRequest($realm, $client_scope_id, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdDeleteAsync
     *
     * Delete the mapper
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $id Mapper id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdDeleteAsync($realm, $client_scope_id, $id, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdDelete'][0])
    {
        return $this->adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdDeleteAsyncWithHttpInfo($realm, $client_scope_id, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdDeleteAsyncWithHttpInfo
     *
     * Delete the mapper
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $id Mapper id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdDeleteAsyncWithHttpInfo($realm, $client_scope_id, $id, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdDelete'][0])
    {
        $returnType = '';
        $request = $this->adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdDeleteRequest($realm, $client_scope_id, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdDelete'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $id Mapper id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdDeleteRequest($realm, $client_scope_id, $id, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdDelete'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdDelete'
            );
        }

        // verify the required parameter 'client_scope_id' is set
        if ($client_scope_id === null || (is_array($client_scope_id) && count($client_scope_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_scope_id when calling adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdDelete'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdDelete'
            );
        }


        $resourcePath = '/admin/realms/{realm}/client-templates/{client-scope-id}/protocol-mappers/models/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_scope_id !== null) {
            $resourcePath = str_replace(
                '{' . 'client-scope-id' . '}',
                ObjectSerializer::toPathValue($client_scope_id),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdGet
     *
     * Get mapper by id
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id client_scope_id (required)
     * @param  string $id Mapper id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdGet($realm, $client_scope_id, $id, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdGet'][0])
    {
        list($response) = $this->adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdGetWithHttpInfo($realm, $client_scope_id, $id, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdGetWithHttpInfo
     *
     * Get mapper by id
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $id Mapper id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdGetWithHttpInfo($realm, $client_scope_id, $id, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdGet'][0])
    {
        $request = $this->adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdGetRequest($realm, $client_scope_id, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdGetAsync
     *
     * Get mapper by id
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $id Mapper id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdGetAsync($realm, $client_scope_id, $id, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdGet'][0])
    {
        return $this->adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdGetAsyncWithHttpInfo($realm, $client_scope_id, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdGetAsyncWithHttpInfo
     *
     * Get mapper by id
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $id Mapper id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdGetAsyncWithHttpInfo($realm, $client_scope_id, $id, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation';
        $request = $this->adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdGetRequest($realm, $client_scope_id, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $id Mapper id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdGetRequest($realm, $client_scope_id, $id, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdGet'
            );
        }

        // verify the required parameter 'client_scope_id' is set
        if ($client_scope_id === null || (is_array($client_scope_id) && count($client_scope_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_scope_id when calling adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdGet'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdGet'
            );
        }


        $resourcePath = '/admin/realms/{realm}/client-templates/{client-scope-id}/protocol-mappers/models/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_scope_id !== null) {
            $resourcePath = str_replace(
                '{' . 'client-scope-id' . '}',
                ObjectSerializer::toPathValue($client_scope_id),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPut
     *
     * Update the mapper
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id client_scope_id (required)
     * @param  string $id Mapper id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation $protocol_mapper_representation protocol_mapper_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPut'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPut($realm, $client_scope_id, $id, $protocol_mapper_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPut'][0])
    {
        $this->adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPutWithHttpInfo($realm, $client_scope_id, $id, $protocol_mapper_representation, $contentType);
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPutWithHttpInfo
     *
     * Update the mapper
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $id Mapper id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation $protocol_mapper_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPut'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPutWithHttpInfo($realm, $client_scope_id, $id, $protocol_mapper_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPut'][0])
    {
        $request = $this->adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPutRequest($realm, $client_scope_id, $id, $protocol_mapper_representation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPutAsync
     *
     * Update the mapper
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $id Mapper id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation $protocol_mapper_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPutAsync($realm, $client_scope_id, $id, $protocol_mapper_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPut'][0])
    {
        return $this->adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPutAsyncWithHttpInfo($realm, $client_scope_id, $id, $protocol_mapper_representation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPutAsyncWithHttpInfo
     *
     * Update the mapper
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $id Mapper id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation $protocol_mapper_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPutAsyncWithHttpInfo($realm, $client_scope_id, $id, $protocol_mapper_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPut'][0])
    {
        $returnType = '';
        $request = $this->adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPutRequest($realm, $client_scope_id, $id, $protocol_mapper_representation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPut'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $id Mapper id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation $protocol_mapper_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPutRequest($realm, $client_scope_id, $id, $protocol_mapper_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPut'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPut'
            );
        }

        // verify the required parameter 'client_scope_id' is set
        if ($client_scope_id === null || (is_array($client_scope_id) && count($client_scope_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_scope_id when calling adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPut'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdPut'
            );
        }



        $resourcePath = '/admin/realms/{realm}/client-templates/{client-scope-id}/protocol-mappers/models/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_scope_id !== null) {
            $resourcePath = str_replace(
                '{' . 'client-scope-id' . '}',
                ObjectSerializer::toPathValue($client_scope_id),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($protocol_mapper_representation)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($protocol_mapper_representation));
            } else {
                $httpBody = $protocol_mapper_representation;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsPost
     *
     * Create a mapper
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id client_scope_id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation $protocol_mapper_representation protocol_mapper_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsPost'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsPost($realm, $client_scope_id, $protocol_mapper_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsPost'][0])
    {
        $this->adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsPostWithHttpInfo($realm, $client_scope_id, $protocol_mapper_representation, $contentType);
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsPostWithHttpInfo
     *
     * Create a mapper
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation $protocol_mapper_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsPost'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsPostWithHttpInfo($realm, $client_scope_id, $protocol_mapper_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsPost'][0])
    {
        $request = $this->adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsPostRequest($realm, $client_scope_id, $protocol_mapper_representation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsPostAsync
     *
     * Create a mapper
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation $protocol_mapper_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsPostAsync($realm, $client_scope_id, $protocol_mapper_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsPost'][0])
    {
        return $this->adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsPostAsyncWithHttpInfo($realm, $client_scope_id, $protocol_mapper_representation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsPostAsyncWithHttpInfo
     *
     * Create a mapper
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation $protocol_mapper_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsPostAsyncWithHttpInfo($realm, $client_scope_id, $protocol_mapper_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsPost'][0])
    {
        $returnType = '';
        $request = $this->adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsPostRequest($realm, $client_scope_id, $protocol_mapper_representation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsPost'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation $protocol_mapper_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsPostRequest($realm, $client_scope_id, $protocol_mapper_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsPost'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsPost'
            );
        }

        // verify the required parameter 'client_scope_id' is set
        if ($client_scope_id === null || (is_array($client_scope_id) && count($client_scope_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_scope_id when calling adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsPost'
            );
        }



        $resourcePath = '/admin/realms/{realm}/client-templates/{client-scope-id}/protocol-mappers/models';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_scope_id !== null) {
            $resourcePath = str_replace(
                '{' . 'client-scope-id' . '}',
                ObjectSerializer::toPathValue($client_scope_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($protocol_mapper_representation)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($protocol_mapper_representation));
            } else {
                $httpBody = $protocol_mapper_representation;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolGet
     *
     * Get mappers by name for a specific protocol
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id client_scope_id (required)
     * @param  string $protocol protocol (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[]
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolGet($realm, $client_scope_id, $protocol, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolGet'][0])
    {
        list($response) = $this->adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolGetWithHttpInfo($realm, $client_scope_id, $protocol, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolGetWithHttpInfo
     *
     * Get mappers by name for a specific protocol
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $protocol (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolGetWithHttpInfo($realm, $client_scope_id, $protocol, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolGet'][0])
    {
        $request = $this->adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolGetRequest($realm, $client_scope_id, $protocol, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolGetAsync
     *
     * Get mappers by name for a specific protocol
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $protocol (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolGetAsync($realm, $client_scope_id, $protocol, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolGet'][0])
    {
        return $this->adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolGetAsyncWithHttpInfo($realm, $client_scope_id, $protocol, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolGetAsyncWithHttpInfo
     *
     * Get mappers by name for a specific protocol
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $protocol (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolGetAsyncWithHttpInfo($realm, $client_scope_id, $protocol, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[]';
        $request = $this->adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolGetRequest($realm, $client_scope_id, $protocol, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_scope_id (required)
     * @param  string $protocol (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolGetRequest($realm, $client_scope_id, $protocol, string $contentType = self::contentTypes['adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolGet'
            );
        }

        // verify the required parameter 'client_scope_id' is set
        if ($client_scope_id === null || (is_array($client_scope_id) && count($client_scope_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_scope_id when calling adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolGet'
            );
        }

        // verify the required parameter 'protocol' is set
        if ($protocol === null || (is_array($protocol) && count($protocol) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $protocol when calling adminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolGet'
            );
        }


        $resourcePath = '/admin/realms/{realm}/client-templates/{client-scope-id}/protocol-mappers/protocol/{protocol}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_scope_id !== null) {
            $resourcePath = str_replace(
                '{' . 'client-scope-id' . '}',
                ObjectSerializer::toPathValue($client_scope_id),
                $resourcePath
            );
        }
        // path params
        if ($protocol !== null) {
            $resourcePath = str_replace(
                '{' . 'protocol' . '}',
                ObjectSerializer::toPathValue($protocol),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidProtocolMappersAddModelsPost
     *
     * Create multiple mappers
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[] $protocol_mapper_representation protocol_mapper_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersAddModelsPost'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminRealmsRealmClientsClientUuidProtocolMappersAddModelsPost($realm, $client_uuid, $protocol_mapper_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersAddModelsPost'][0])
    {
        $this->adminRealmsRealmClientsClientUuidProtocolMappersAddModelsPostWithHttpInfo($realm, $client_uuid, $protocol_mapper_representation, $contentType);
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidProtocolMappersAddModelsPostWithHttpInfo
     *
     * Create multiple mappers
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[] $protocol_mapper_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersAddModelsPost'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientsClientUuidProtocolMappersAddModelsPostWithHttpInfo($realm, $client_uuid, $protocol_mapper_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersAddModelsPost'][0])
    {
        $request = $this->adminRealmsRealmClientsClientUuidProtocolMappersAddModelsPostRequest($realm, $client_uuid, $protocol_mapper_representation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidProtocolMappersAddModelsPostAsync
     *
     * Create multiple mappers
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[] $protocol_mapper_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersAddModelsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidProtocolMappersAddModelsPostAsync($realm, $client_uuid, $protocol_mapper_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersAddModelsPost'][0])
    {
        return $this->adminRealmsRealmClientsClientUuidProtocolMappersAddModelsPostAsyncWithHttpInfo($realm, $client_uuid, $protocol_mapper_representation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidProtocolMappersAddModelsPostAsyncWithHttpInfo
     *
     * Create multiple mappers
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[] $protocol_mapper_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersAddModelsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidProtocolMappersAddModelsPostAsyncWithHttpInfo($realm, $client_uuid, $protocol_mapper_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersAddModelsPost'][0])
    {
        $returnType = '';
        $request = $this->adminRealmsRealmClientsClientUuidProtocolMappersAddModelsPostRequest($realm, $client_uuid, $protocol_mapper_representation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientsClientUuidProtocolMappersAddModelsPost'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[] $protocol_mapper_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersAddModelsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientsClientUuidProtocolMappersAddModelsPostRequest($realm, $client_uuid, $protocol_mapper_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersAddModelsPost'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientsClientUuidProtocolMappersAddModelsPost'
            );
        }

        // verify the required parameter 'client_uuid' is set
        if ($client_uuid === null || (is_array($client_uuid) && count($client_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_uuid when calling adminRealmsRealmClientsClientUuidProtocolMappersAddModelsPost'
            );
        }



        $resourcePath = '/admin/realms/{realm}/clients/{client-uuid}/protocol-mappers/add-models';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'client-uuid' . '}',
                ObjectSerializer::toPathValue($client_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($protocol_mapper_representation)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($protocol_mapper_representation));
            } else {
                $httpBody = $protocol_mapper_representation;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidProtocolMappersModelsGet
     *
     * Get mappers
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersModelsGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[]
     */
    public function adminRealmsRealmClientsClientUuidProtocolMappersModelsGet($realm, $client_uuid, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersModelsGet'][0])
    {
        list($response) = $this->adminRealmsRealmClientsClientUuidProtocolMappersModelsGetWithHttpInfo($realm, $client_uuid, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidProtocolMappersModelsGetWithHttpInfo
     *
     * Get mappers
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersModelsGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientsClientUuidProtocolMappersModelsGetWithHttpInfo($realm, $client_uuid, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersModelsGet'][0])
    {
        $request = $this->adminRealmsRealmClientsClientUuidProtocolMappersModelsGetRequest($realm, $client_uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidProtocolMappersModelsGetAsync
     *
     * Get mappers
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersModelsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidProtocolMappersModelsGetAsync($realm, $client_uuid, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersModelsGet'][0])
    {
        return $this->adminRealmsRealmClientsClientUuidProtocolMappersModelsGetAsyncWithHttpInfo($realm, $client_uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidProtocolMappersModelsGetAsyncWithHttpInfo
     *
     * Get mappers
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersModelsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidProtocolMappersModelsGetAsyncWithHttpInfo($realm, $client_uuid, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersModelsGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[]';
        $request = $this->adminRealmsRealmClientsClientUuidProtocolMappersModelsGetRequest($realm, $client_uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientsClientUuidProtocolMappersModelsGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersModelsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientsClientUuidProtocolMappersModelsGetRequest($realm, $client_uuid, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersModelsGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientsClientUuidProtocolMappersModelsGet'
            );
        }

        // verify the required parameter 'client_uuid' is set
        if ($client_uuid === null || (is_array($client_uuid) && count($client_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_uuid when calling adminRealmsRealmClientsClientUuidProtocolMappersModelsGet'
            );
        }


        $resourcePath = '/admin/realms/{realm}/clients/{client-uuid}/protocol-mappers/models';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'client-uuid' . '}',
                ObjectSerializer::toPathValue($client_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidProtocolMappersModelsIdDelete
     *
     * Delete the mapper
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $id Mapper id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersModelsIdDelete'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminRealmsRealmClientsClientUuidProtocolMappersModelsIdDelete($realm, $client_uuid, $id, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersModelsIdDelete'][0])
    {
        $this->adminRealmsRealmClientsClientUuidProtocolMappersModelsIdDeleteWithHttpInfo($realm, $client_uuid, $id, $contentType);
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidProtocolMappersModelsIdDeleteWithHttpInfo
     *
     * Delete the mapper
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $id Mapper id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersModelsIdDelete'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientsClientUuidProtocolMappersModelsIdDeleteWithHttpInfo($realm, $client_uuid, $id, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersModelsIdDelete'][0])
    {
        $request = $this->adminRealmsRealmClientsClientUuidProtocolMappersModelsIdDeleteRequest($realm, $client_uuid, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidProtocolMappersModelsIdDeleteAsync
     *
     * Delete the mapper
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $id Mapper id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersModelsIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidProtocolMappersModelsIdDeleteAsync($realm, $client_uuid, $id, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersModelsIdDelete'][0])
    {
        return $this->adminRealmsRealmClientsClientUuidProtocolMappersModelsIdDeleteAsyncWithHttpInfo($realm, $client_uuid, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidProtocolMappersModelsIdDeleteAsyncWithHttpInfo
     *
     * Delete the mapper
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $id Mapper id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersModelsIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidProtocolMappersModelsIdDeleteAsyncWithHttpInfo($realm, $client_uuid, $id, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersModelsIdDelete'][0])
    {
        $returnType = '';
        $request = $this->adminRealmsRealmClientsClientUuidProtocolMappersModelsIdDeleteRequest($realm, $client_uuid, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientsClientUuidProtocolMappersModelsIdDelete'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $id Mapper id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersModelsIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientsClientUuidProtocolMappersModelsIdDeleteRequest($realm, $client_uuid, $id, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersModelsIdDelete'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientsClientUuidProtocolMappersModelsIdDelete'
            );
        }

        // verify the required parameter 'client_uuid' is set
        if ($client_uuid === null || (is_array($client_uuid) && count($client_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_uuid when calling adminRealmsRealmClientsClientUuidProtocolMappersModelsIdDelete'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling adminRealmsRealmClientsClientUuidProtocolMappersModelsIdDelete'
            );
        }


        $resourcePath = '/admin/realms/{realm}/clients/{client-uuid}/protocol-mappers/models/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'client-uuid' . '}',
                ObjectSerializer::toPathValue($client_uuid),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidProtocolMappersModelsIdGet
     *
     * Get mapper by id
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $id Mapper id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersModelsIdGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation
     */
    public function adminRealmsRealmClientsClientUuidProtocolMappersModelsIdGet($realm, $client_uuid, $id, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersModelsIdGet'][0])
    {
        list($response) = $this->adminRealmsRealmClientsClientUuidProtocolMappersModelsIdGetWithHttpInfo($realm, $client_uuid, $id, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidProtocolMappersModelsIdGetWithHttpInfo
     *
     * Get mapper by id
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $id Mapper id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersModelsIdGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientsClientUuidProtocolMappersModelsIdGetWithHttpInfo($realm, $client_uuid, $id, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersModelsIdGet'][0])
    {
        $request = $this->adminRealmsRealmClientsClientUuidProtocolMappersModelsIdGetRequest($realm, $client_uuid, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidProtocolMappersModelsIdGetAsync
     *
     * Get mapper by id
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $id Mapper id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersModelsIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidProtocolMappersModelsIdGetAsync($realm, $client_uuid, $id, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersModelsIdGet'][0])
    {
        return $this->adminRealmsRealmClientsClientUuidProtocolMappersModelsIdGetAsyncWithHttpInfo($realm, $client_uuid, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidProtocolMappersModelsIdGetAsyncWithHttpInfo
     *
     * Get mapper by id
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $id Mapper id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersModelsIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidProtocolMappersModelsIdGetAsyncWithHttpInfo($realm, $client_uuid, $id, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersModelsIdGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation';
        $request = $this->adminRealmsRealmClientsClientUuidProtocolMappersModelsIdGetRequest($realm, $client_uuid, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientsClientUuidProtocolMappersModelsIdGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $id Mapper id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersModelsIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientsClientUuidProtocolMappersModelsIdGetRequest($realm, $client_uuid, $id, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersModelsIdGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientsClientUuidProtocolMappersModelsIdGet'
            );
        }

        // verify the required parameter 'client_uuid' is set
        if ($client_uuid === null || (is_array($client_uuid) && count($client_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_uuid when calling adminRealmsRealmClientsClientUuidProtocolMappersModelsIdGet'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling adminRealmsRealmClientsClientUuidProtocolMappersModelsIdGet'
            );
        }


        $resourcePath = '/admin/realms/{realm}/clients/{client-uuid}/protocol-mappers/models/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'client-uuid' . '}',
                ObjectSerializer::toPathValue($client_uuid),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidProtocolMappersModelsIdPut
     *
     * Update the mapper
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $id Mapper id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation $protocol_mapper_representation protocol_mapper_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersModelsIdPut'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminRealmsRealmClientsClientUuidProtocolMappersModelsIdPut($realm, $client_uuid, $id, $protocol_mapper_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersModelsIdPut'][0])
    {
        $this->adminRealmsRealmClientsClientUuidProtocolMappersModelsIdPutWithHttpInfo($realm, $client_uuid, $id, $protocol_mapper_representation, $contentType);
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidProtocolMappersModelsIdPutWithHttpInfo
     *
     * Update the mapper
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $id Mapper id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation $protocol_mapper_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersModelsIdPut'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientsClientUuidProtocolMappersModelsIdPutWithHttpInfo($realm, $client_uuid, $id, $protocol_mapper_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersModelsIdPut'][0])
    {
        $request = $this->adminRealmsRealmClientsClientUuidProtocolMappersModelsIdPutRequest($realm, $client_uuid, $id, $protocol_mapper_representation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidProtocolMappersModelsIdPutAsync
     *
     * Update the mapper
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $id Mapper id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation $protocol_mapper_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersModelsIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidProtocolMappersModelsIdPutAsync($realm, $client_uuid, $id, $protocol_mapper_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersModelsIdPut'][0])
    {
        return $this->adminRealmsRealmClientsClientUuidProtocolMappersModelsIdPutAsyncWithHttpInfo($realm, $client_uuid, $id, $protocol_mapper_representation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidProtocolMappersModelsIdPutAsyncWithHttpInfo
     *
     * Update the mapper
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $id Mapper id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation $protocol_mapper_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersModelsIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidProtocolMappersModelsIdPutAsyncWithHttpInfo($realm, $client_uuid, $id, $protocol_mapper_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersModelsIdPut'][0])
    {
        $returnType = '';
        $request = $this->adminRealmsRealmClientsClientUuidProtocolMappersModelsIdPutRequest($realm, $client_uuid, $id, $protocol_mapper_representation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientsClientUuidProtocolMappersModelsIdPut'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $id Mapper id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation $protocol_mapper_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersModelsIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientsClientUuidProtocolMappersModelsIdPutRequest($realm, $client_uuid, $id, $protocol_mapper_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersModelsIdPut'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientsClientUuidProtocolMappersModelsIdPut'
            );
        }

        // verify the required parameter 'client_uuid' is set
        if ($client_uuid === null || (is_array($client_uuid) && count($client_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_uuid when calling adminRealmsRealmClientsClientUuidProtocolMappersModelsIdPut'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling adminRealmsRealmClientsClientUuidProtocolMappersModelsIdPut'
            );
        }



        $resourcePath = '/admin/realms/{realm}/clients/{client-uuid}/protocol-mappers/models/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'client-uuid' . '}',
                ObjectSerializer::toPathValue($client_uuid),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($protocol_mapper_representation)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($protocol_mapper_representation));
            } else {
                $httpBody = $protocol_mapper_representation;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidProtocolMappersModelsPost
     *
     * Create a mapper
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation $protocol_mapper_representation protocol_mapper_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersModelsPost'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminRealmsRealmClientsClientUuidProtocolMappersModelsPost($realm, $client_uuid, $protocol_mapper_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersModelsPost'][0])
    {
        $this->adminRealmsRealmClientsClientUuidProtocolMappersModelsPostWithHttpInfo($realm, $client_uuid, $protocol_mapper_representation, $contentType);
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidProtocolMappersModelsPostWithHttpInfo
     *
     * Create a mapper
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation $protocol_mapper_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersModelsPost'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientsClientUuidProtocolMappersModelsPostWithHttpInfo($realm, $client_uuid, $protocol_mapper_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersModelsPost'][0])
    {
        $request = $this->adminRealmsRealmClientsClientUuidProtocolMappersModelsPostRequest($realm, $client_uuid, $protocol_mapper_representation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidProtocolMappersModelsPostAsync
     *
     * Create a mapper
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation $protocol_mapper_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersModelsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidProtocolMappersModelsPostAsync($realm, $client_uuid, $protocol_mapper_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersModelsPost'][0])
    {
        return $this->adminRealmsRealmClientsClientUuidProtocolMappersModelsPostAsyncWithHttpInfo($realm, $client_uuid, $protocol_mapper_representation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidProtocolMappersModelsPostAsyncWithHttpInfo
     *
     * Create a mapper
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation $protocol_mapper_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersModelsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidProtocolMappersModelsPostAsyncWithHttpInfo($realm, $client_uuid, $protocol_mapper_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersModelsPost'][0])
    {
        $returnType = '';
        $request = $this->adminRealmsRealmClientsClientUuidProtocolMappersModelsPostRequest($realm, $client_uuid, $protocol_mapper_representation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientsClientUuidProtocolMappersModelsPost'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation $protocol_mapper_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersModelsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientsClientUuidProtocolMappersModelsPostRequest($realm, $client_uuid, $protocol_mapper_representation = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersModelsPost'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientsClientUuidProtocolMappersModelsPost'
            );
        }

        // verify the required parameter 'client_uuid' is set
        if ($client_uuid === null || (is_array($client_uuid) && count($client_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_uuid when calling adminRealmsRealmClientsClientUuidProtocolMappersModelsPost'
            );
        }



        $resourcePath = '/admin/realms/{realm}/clients/{client-uuid}/protocol-mappers/models';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'client-uuid' . '}',
                ObjectSerializer::toPathValue($client_uuid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($protocol_mapper_representation)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($protocol_mapper_representation));
            } else {
                $httpBody = $protocol_mapper_representation;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolGet
     *
     * Get mappers by name for a specific protocol
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $protocol protocol (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[]
     */
    public function adminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolGet($realm, $client_uuid, $protocol, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolGet'][0])
    {
        list($response) = $this->adminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolGetWithHttpInfo($realm, $client_uuid, $protocol, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolGetWithHttpInfo
     *
     * Get mappers by name for a specific protocol
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $protocol (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolGetWithHttpInfo($realm, $client_uuid, $protocol, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolGet'][0])
    {
        $request = $this->adminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolGetRequest($realm, $client_uuid, $protocol, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolGetAsync
     *
     * Get mappers by name for a specific protocol
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $protocol (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolGetAsync($realm, $client_uuid, $protocol, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolGet'][0])
    {
        return $this->adminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolGetAsyncWithHttpInfo($realm, $client_uuid, $protocol, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolGetAsyncWithHttpInfo
     *
     * Get mappers by name for a specific protocol
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $protocol (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolGetAsyncWithHttpInfo($realm, $client_uuid, $protocol, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\ProtocolMapperRepresentation[]';
        $request = $this->adminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolGetRequest($realm, $client_uuid, $protocol, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $protocol (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolGetRequest($realm, $client_uuid, $protocol, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolGet'
            );
        }

        // verify the required parameter 'client_uuid' is set
        if ($client_uuid === null || (is_array($client_uuid) && count($client_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_uuid when calling adminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolGet'
            );
        }

        // verify the required parameter 'protocol' is set
        if ($protocol === null || (is_array($protocol) && count($protocol) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $protocol when calling adminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolGet'
            );
        }


        $resourcePath = '/admin/realms/{realm}/clients/{client-uuid}/protocol-mappers/protocol/{protocol}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'client-uuid' . '}',
                ObjectSerializer::toPathValue($client_uuid),
                $resourcePath
            );
        }
        // path params
        if ($protocol !== null) {
            $resourcePath = str_replace(
                '{' . 'protocol' . '}',
                ObjectSerializer::toPathValue($protocol),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
