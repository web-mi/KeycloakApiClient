<?php
/**
 * ClientAttributeCertificateApi
 * PHP version 7.4
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace WebMI\KeycloakApiClient\KeycloakApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use WebMI\KeycloakApiClient\KeycloakApi\ApiException;
use WebMI\KeycloakApiClient\KeycloakApi\Configuration;
use WebMI\KeycloakApiClient\KeycloakApi\HeaderSelector;
use WebMI\KeycloakApiClient\KeycloakApi\ObjectSerializer;

/**
 * ClientAttributeCertificateApi Class Doc Comment
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ClientAttributeCertificateApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'adminRealmsRealmClientsClientUuidCertificatesAttrDownloadPost' => [
            'application/json',
        ],
        'adminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadPost' => [
            'application/json',
        ],
        'adminRealmsRealmClientsClientUuidCertificatesAttrGeneratePost' => [
            'application/json',
        ],
        'adminRealmsRealmClientsClientUuidCertificatesAttrGet' => [
            'application/json',
        ],
        'adminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificatePost' => [
            'application/json',
        ],
        'adminRealmsRealmClientsClientUuidCertificatesAttrUploadPost' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidCertificatesAttrDownloadPost
     *
     * Get a keystore file for the client, containing private key and public certificate
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $attr attr (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\KeyStoreConfig $key_store_config key_store_config (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrDownloadPost'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function adminRealmsRealmClientsClientUuidCertificatesAttrDownloadPost($realm, $client_uuid, $attr, $key_store_config = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrDownloadPost'][0])
    {
        list($response) = $this->adminRealmsRealmClientsClientUuidCertificatesAttrDownloadPostWithHttpInfo($realm, $client_uuid, $attr, $key_store_config, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidCertificatesAttrDownloadPostWithHttpInfo
     *
     * Get a keystore file for the client, containing private key and public certificate
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $attr (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\KeyStoreConfig $key_store_config (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrDownloadPost'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientsClientUuidCertificatesAttrDownloadPostWithHttpInfo($realm, $client_uuid, $attr, $key_store_config = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrDownloadPost'][0])
    {
        $request = $this->adminRealmsRealmClientsClientUuidCertificatesAttrDownloadPostRequest($realm, $client_uuid, $attr, $key_store_config, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidCertificatesAttrDownloadPostAsync
     *
     * Get a keystore file for the client, containing private key and public certificate
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $attr (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\KeyStoreConfig $key_store_config (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrDownloadPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidCertificatesAttrDownloadPostAsync($realm, $client_uuid, $attr, $key_store_config = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrDownloadPost'][0])
    {
        return $this->adminRealmsRealmClientsClientUuidCertificatesAttrDownloadPostAsyncWithHttpInfo($realm, $client_uuid, $attr, $key_store_config, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidCertificatesAttrDownloadPostAsyncWithHttpInfo
     *
     * Get a keystore file for the client, containing private key and public certificate
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $attr (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\KeyStoreConfig $key_store_config (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrDownloadPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidCertificatesAttrDownloadPostAsyncWithHttpInfo($realm, $client_uuid, $attr, $key_store_config = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrDownloadPost'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->adminRealmsRealmClientsClientUuidCertificatesAttrDownloadPostRequest($realm, $client_uuid, $attr, $key_store_config, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientsClientUuidCertificatesAttrDownloadPost'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $attr (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\KeyStoreConfig $key_store_config (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrDownloadPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientsClientUuidCertificatesAttrDownloadPostRequest($realm, $client_uuid, $attr, $key_store_config = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrDownloadPost'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientsClientUuidCertificatesAttrDownloadPost'
            );
        }

        // verify the required parameter 'client_uuid' is set
        if ($client_uuid === null || (is_array($client_uuid) && count($client_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_uuid when calling adminRealmsRealmClientsClientUuidCertificatesAttrDownloadPost'
            );
        }

        // verify the required parameter 'attr' is set
        if ($attr === null || (is_array($attr) && count($attr) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attr when calling adminRealmsRealmClientsClientUuidCertificatesAttrDownloadPost'
            );
        }



        $resourcePath = '/admin/realms/{realm}/clients/{client-uuid}/certificates/{attr}/download';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'client-uuid' . '}',
                ObjectSerializer::toPathValue($client_uuid),
                $resourcePath
            );
        }
        // path params
        if ($attr !== null) {
            $resourcePath = str_replace(
                '{' . 'attr' . '}',
                ObjectSerializer::toPathValue($attr),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/octet-stream', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($key_store_config)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($key_store_config));
            } else {
                $httpBody = $key_store_config;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadPost
     *
     * Generate a new keypair and certificate, and get the private key file  Generates a keypair and certificate and serves the private key in a specified keystore format. Only generated public certificate is saved in Keycloak DB - the private key is not.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $attr attr (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\KeyStoreConfig $key_store_config key_store_config (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadPost'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function adminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadPost($realm, $client_uuid, $attr, $key_store_config = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadPost'][0])
    {
        list($response) = $this->adminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadPostWithHttpInfo($realm, $client_uuid, $attr, $key_store_config, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadPostWithHttpInfo
     *
     * Generate a new keypair and certificate, and get the private key file  Generates a keypair and certificate and serves the private key in a specified keystore format. Only generated public certificate is saved in Keycloak DB - the private key is not.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $attr (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\KeyStoreConfig $key_store_config (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadPost'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadPostWithHttpInfo($realm, $client_uuid, $attr, $key_store_config = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadPost'][0])
    {
        $request = $this->adminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadPostRequest($realm, $client_uuid, $attr, $key_store_config, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadPostAsync
     *
     * Generate a new keypair and certificate, and get the private key file  Generates a keypair and certificate and serves the private key in a specified keystore format. Only generated public certificate is saved in Keycloak DB - the private key is not.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $attr (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\KeyStoreConfig $key_store_config (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadPostAsync($realm, $client_uuid, $attr, $key_store_config = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadPost'][0])
    {
        return $this->adminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadPostAsyncWithHttpInfo($realm, $client_uuid, $attr, $key_store_config, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadPostAsyncWithHttpInfo
     *
     * Generate a new keypair and certificate, and get the private key file  Generates a keypair and certificate and serves the private key in a specified keystore format. Only generated public certificate is saved in Keycloak DB - the private key is not.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $attr (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\KeyStoreConfig $key_store_config (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadPostAsyncWithHttpInfo($realm, $client_uuid, $attr, $key_store_config = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadPost'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->adminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadPostRequest($realm, $client_uuid, $attr, $key_store_config, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadPost'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $attr (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\KeyStoreConfig $key_store_config (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadPostRequest($realm, $client_uuid, $attr, $key_store_config = null, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadPost'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadPost'
            );
        }

        // verify the required parameter 'client_uuid' is set
        if ($client_uuid === null || (is_array($client_uuid) && count($client_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_uuid when calling adminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadPost'
            );
        }

        // verify the required parameter 'attr' is set
        if ($attr === null || (is_array($attr) && count($attr) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attr when calling adminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadPost'
            );
        }



        $resourcePath = '/admin/realms/{realm}/clients/{client-uuid}/certificates/{attr}/generate-and-download';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'client-uuid' . '}',
                ObjectSerializer::toPathValue($client_uuid),
                $resourcePath
            );
        }
        // path params
        if ($attr !== null) {
            $resourcePath = str_replace(
                '{' . 'attr' . '}',
                ObjectSerializer::toPathValue($attr),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/octet-stream', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($key_store_config)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($key_store_config));
            } else {
                $httpBody = $key_store_config;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidCertificatesAttrGeneratePost
     *
     * Generate a new certificate with new key pair
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $attr attr (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrGeneratePost'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\CertificateRepresentation
     */
    public function adminRealmsRealmClientsClientUuidCertificatesAttrGeneratePost($realm, $client_uuid, $attr, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrGeneratePost'][0])
    {
        list($response) = $this->adminRealmsRealmClientsClientUuidCertificatesAttrGeneratePostWithHttpInfo($realm, $client_uuid, $attr, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidCertificatesAttrGeneratePostWithHttpInfo
     *
     * Generate a new certificate with new key pair
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $attr (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrGeneratePost'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\CertificateRepresentation, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientsClientUuidCertificatesAttrGeneratePostWithHttpInfo($realm, $client_uuid, $attr, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrGeneratePost'][0])
    {
        $request = $this->adminRealmsRealmClientsClientUuidCertificatesAttrGeneratePostRequest($realm, $client_uuid, $attr, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\CertificateRepresentation' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\CertificateRepresentation' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\CertificateRepresentation', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\CertificateRepresentation';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\CertificateRepresentation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidCertificatesAttrGeneratePostAsync
     *
     * Generate a new certificate with new key pair
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $attr (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrGeneratePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidCertificatesAttrGeneratePostAsync($realm, $client_uuid, $attr, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrGeneratePost'][0])
    {
        return $this->adminRealmsRealmClientsClientUuidCertificatesAttrGeneratePostAsyncWithHttpInfo($realm, $client_uuid, $attr, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidCertificatesAttrGeneratePostAsyncWithHttpInfo
     *
     * Generate a new certificate with new key pair
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $attr (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrGeneratePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidCertificatesAttrGeneratePostAsyncWithHttpInfo($realm, $client_uuid, $attr, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrGeneratePost'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\CertificateRepresentation';
        $request = $this->adminRealmsRealmClientsClientUuidCertificatesAttrGeneratePostRequest($realm, $client_uuid, $attr, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientsClientUuidCertificatesAttrGeneratePost'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $attr (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrGeneratePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientsClientUuidCertificatesAttrGeneratePostRequest($realm, $client_uuid, $attr, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrGeneratePost'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientsClientUuidCertificatesAttrGeneratePost'
            );
        }

        // verify the required parameter 'client_uuid' is set
        if ($client_uuid === null || (is_array($client_uuid) && count($client_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_uuid when calling adminRealmsRealmClientsClientUuidCertificatesAttrGeneratePost'
            );
        }

        // verify the required parameter 'attr' is set
        if ($attr === null || (is_array($attr) && count($attr) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attr when calling adminRealmsRealmClientsClientUuidCertificatesAttrGeneratePost'
            );
        }


        $resourcePath = '/admin/realms/{realm}/clients/{client-uuid}/certificates/{attr}/generate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'client-uuid' . '}',
                ObjectSerializer::toPathValue($client_uuid),
                $resourcePath
            );
        }
        // path params
        if ($attr !== null) {
            $resourcePath = str_replace(
                '{' . 'attr' . '}',
                ObjectSerializer::toPathValue($attr),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidCertificatesAttrGet
     *
     * Get key info
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $attr attr (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\CertificateRepresentation
     */
    public function adminRealmsRealmClientsClientUuidCertificatesAttrGet($realm, $client_uuid, $attr, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrGet'][0])
    {
        list($response) = $this->adminRealmsRealmClientsClientUuidCertificatesAttrGetWithHttpInfo($realm, $client_uuid, $attr, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidCertificatesAttrGetWithHttpInfo
     *
     * Get key info
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $attr (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\CertificateRepresentation, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientsClientUuidCertificatesAttrGetWithHttpInfo($realm, $client_uuid, $attr, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrGet'][0])
    {
        $request = $this->adminRealmsRealmClientsClientUuidCertificatesAttrGetRequest($realm, $client_uuid, $attr, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\CertificateRepresentation' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\CertificateRepresentation' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\CertificateRepresentation', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\CertificateRepresentation';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\CertificateRepresentation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidCertificatesAttrGetAsync
     *
     * Get key info
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $attr (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidCertificatesAttrGetAsync($realm, $client_uuid, $attr, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrGet'][0])
    {
        return $this->adminRealmsRealmClientsClientUuidCertificatesAttrGetAsyncWithHttpInfo($realm, $client_uuid, $attr, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidCertificatesAttrGetAsyncWithHttpInfo
     *
     * Get key info
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $attr (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidCertificatesAttrGetAsyncWithHttpInfo($realm, $client_uuid, $attr, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\CertificateRepresentation';
        $request = $this->adminRealmsRealmClientsClientUuidCertificatesAttrGetRequest($realm, $client_uuid, $attr, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientsClientUuidCertificatesAttrGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $attr (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientsClientUuidCertificatesAttrGetRequest($realm, $client_uuid, $attr, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientsClientUuidCertificatesAttrGet'
            );
        }

        // verify the required parameter 'client_uuid' is set
        if ($client_uuid === null || (is_array($client_uuid) && count($client_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_uuid when calling adminRealmsRealmClientsClientUuidCertificatesAttrGet'
            );
        }

        // verify the required parameter 'attr' is set
        if ($attr === null || (is_array($attr) && count($attr) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attr when calling adminRealmsRealmClientsClientUuidCertificatesAttrGet'
            );
        }


        $resourcePath = '/admin/realms/{realm}/clients/{client-uuid}/certificates/{attr}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'client-uuid' . '}',
                ObjectSerializer::toPathValue($client_uuid),
                $resourcePath
            );
        }
        // path params
        if ($attr !== null) {
            $resourcePath = str_replace(
                '{' . 'attr' . '}',
                ObjectSerializer::toPathValue($attr),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificatePost
     *
     * Upload only certificate, not private key
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $attr attr (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificatePost'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\CertificateRepresentation
     */
    public function adminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificatePost($realm, $client_uuid, $attr, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificatePost'][0])
    {
        list($response) = $this->adminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificatePostWithHttpInfo($realm, $client_uuid, $attr, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificatePostWithHttpInfo
     *
     * Upload only certificate, not private key
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $attr (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificatePost'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\CertificateRepresentation, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificatePostWithHttpInfo($realm, $client_uuid, $attr, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificatePost'][0])
    {
        $request = $this->adminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificatePostRequest($realm, $client_uuid, $attr, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\CertificateRepresentation' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\CertificateRepresentation' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\CertificateRepresentation', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\CertificateRepresentation';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\CertificateRepresentation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificatePostAsync
     *
     * Upload only certificate, not private key
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $attr (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificatePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificatePostAsync($realm, $client_uuid, $attr, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificatePost'][0])
    {
        return $this->adminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificatePostAsyncWithHttpInfo($realm, $client_uuid, $attr, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificatePostAsyncWithHttpInfo
     *
     * Upload only certificate, not private key
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $attr (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificatePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificatePostAsyncWithHttpInfo($realm, $client_uuid, $attr, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificatePost'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\CertificateRepresentation';
        $request = $this->adminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificatePostRequest($realm, $client_uuid, $attr, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificatePost'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $attr (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificatePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificatePostRequest($realm, $client_uuid, $attr, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificatePost'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificatePost'
            );
        }

        // verify the required parameter 'client_uuid' is set
        if ($client_uuid === null || (is_array($client_uuid) && count($client_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_uuid when calling adminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificatePost'
            );
        }

        // verify the required parameter 'attr' is set
        if ($attr === null || (is_array($attr) && count($attr) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attr when calling adminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificatePost'
            );
        }


        $resourcePath = '/admin/realms/{realm}/clients/{client-uuid}/certificates/{attr}/upload-certificate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'client-uuid' . '}',
                ObjectSerializer::toPathValue($client_uuid),
                $resourcePath
            );
        }
        // path params
        if ($attr !== null) {
            $resourcePath = str_replace(
                '{' . 'attr' . '}',
                ObjectSerializer::toPathValue($attr),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidCertificatesAttrUploadPost
     *
     * Upload certificate and eventually private key
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $attr attr (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrUploadPost'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\CertificateRepresentation
     */
    public function adminRealmsRealmClientsClientUuidCertificatesAttrUploadPost($realm, $client_uuid, $attr, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrUploadPost'][0])
    {
        list($response) = $this->adminRealmsRealmClientsClientUuidCertificatesAttrUploadPostWithHttpInfo($realm, $client_uuid, $attr, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidCertificatesAttrUploadPostWithHttpInfo
     *
     * Upload certificate and eventually private key
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $attr (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrUploadPost'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\CertificateRepresentation, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmClientsClientUuidCertificatesAttrUploadPostWithHttpInfo($realm, $client_uuid, $attr, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrUploadPost'][0])
    {
        $request = $this->adminRealmsRealmClientsClientUuidCertificatesAttrUploadPostRequest($realm, $client_uuid, $attr, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\CertificateRepresentation' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\CertificateRepresentation' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\CertificateRepresentation', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\CertificateRepresentation';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\CertificateRepresentation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidCertificatesAttrUploadPostAsync
     *
     * Upload certificate and eventually private key
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $attr (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrUploadPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidCertificatesAttrUploadPostAsync($realm, $client_uuid, $attr, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrUploadPost'][0])
    {
        return $this->adminRealmsRealmClientsClientUuidCertificatesAttrUploadPostAsyncWithHttpInfo($realm, $client_uuid, $attr, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmClientsClientUuidCertificatesAttrUploadPostAsyncWithHttpInfo
     *
     * Upload certificate and eventually private key
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $attr (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrUploadPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmClientsClientUuidCertificatesAttrUploadPostAsyncWithHttpInfo($realm, $client_uuid, $attr, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrUploadPost'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\CertificateRepresentation';
        $request = $this->adminRealmsRealmClientsClientUuidCertificatesAttrUploadPostRequest($realm, $client_uuid, $attr, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmClientsClientUuidCertificatesAttrUploadPost'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid id of client (not client-id!) (required)
     * @param  string $attr (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrUploadPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmClientsClientUuidCertificatesAttrUploadPostRequest($realm, $client_uuid, $attr, string $contentType = self::contentTypes['adminRealmsRealmClientsClientUuidCertificatesAttrUploadPost'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmClientsClientUuidCertificatesAttrUploadPost'
            );
        }

        // verify the required parameter 'client_uuid' is set
        if ($client_uuid === null || (is_array($client_uuid) && count($client_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_uuid when calling adminRealmsRealmClientsClientUuidCertificatesAttrUploadPost'
            );
        }

        // verify the required parameter 'attr' is set
        if ($attr === null || (is_array($attr) && count($attr) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attr when calling adminRealmsRealmClientsClientUuidCertificatesAttrUploadPost'
            );
        }


        $resourcePath = '/admin/realms/{realm}/clients/{client-uuid}/certificates/{attr}/upload';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'client-uuid' . '}',
                ObjectSerializer::toPathValue($client_uuid),
                $resourcePath
            );
        }
        // path params
        if ($attr !== null) {
            $resourcePath = str_replace(
                '{' . 'attr' . '}',
                ObjectSerializer::toPathValue($attr),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
