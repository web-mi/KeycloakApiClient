<?php
/**
 * RolesByIDApi
 * PHP version 7.4
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Keycloak Admin REST API
 *
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace WebMI\KeycloakApiClient\KeycloakApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use WebMI\KeycloakApiClient\KeycloakApi\ApiException;
use WebMI\KeycloakApiClient\KeycloakApi\Configuration;
use WebMI\KeycloakApiClient\KeycloakApi\HeaderSelector;
use WebMI\KeycloakApiClient\KeycloakApi\ObjectSerializer;

/**
 * RolesByIDApi Class Doc Comment
 *
 * @category Class
 * @package  WebMI\KeycloakApiClient\KeycloakApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class RolesByIDApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'adminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidGet' => [
            'application/json',
        ],
        'adminRealmsRealmRolesByIdRoleIdCompositesDelete' => [
            'application/json',
        ],
        'adminRealmsRealmRolesByIdRoleIdCompositesGet' => [
            'application/json',
        ],
        'adminRealmsRealmRolesByIdRoleIdCompositesPost' => [
            'application/json',
        ],
        'adminRealmsRealmRolesByIdRoleIdCompositesRealmGet' => [
            'application/json',
        ],
        'adminRealmsRealmRolesByIdRoleIdDelete' => [
            'application/json',
        ],
        'adminRealmsRealmRolesByIdRoleIdGet' => [
            'application/json',
        ],
        'adminRealmsRealmRolesByIdRoleIdManagementPermissionsGet' => [
            'application/json',
        ],
        'adminRealmsRealmRolesByIdRoleIdManagementPermissionsPut' => [
            'application/json',
        ],
        'adminRealmsRealmRolesByIdRoleIdPut' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation adminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidGet
     *
     * Get client-level roles for the client that are in the role&#39;s composite
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid client_uuid (required)
     * @param  string $role_id role_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]
     */
    public function adminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidGet($realm, $client_uuid, $role_id, string $contentType = self::contentTypes['adminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidGet'][0])
    {
        list($response) = $this->adminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidGetWithHttpInfo($realm, $client_uuid, $role_id, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidGetWithHttpInfo
     *
     * Get client-level roles for the client that are in the role&#39;s composite
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid (required)
     * @param  string $role_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidGetWithHttpInfo($realm, $client_uuid, $role_id, string $contentType = self::contentTypes['adminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidGet'][0])
    {
        $request = $this->adminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidGetRequest($realm, $client_uuid, $role_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidGetAsync
     *
     * Get client-level roles for the client that are in the role&#39;s composite
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid (required)
     * @param  string $role_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidGetAsync($realm, $client_uuid, $role_id, string $contentType = self::contentTypes['adminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidGet'][0])
    {
        return $this->adminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidGetAsyncWithHttpInfo($realm, $client_uuid, $role_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidGetAsyncWithHttpInfo
     *
     * Get client-level roles for the client that are in the role&#39;s composite
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid (required)
     * @param  string $role_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidGetAsyncWithHttpInfo($realm, $client_uuid, $role_id, string $contentType = self::contentTypes['adminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
        $request = $this->adminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidGetRequest($realm, $client_uuid, $role_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $client_uuid (required)
     * @param  string $role_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidGetRequest($realm, $client_uuid, $role_id, string $contentType = self::contentTypes['adminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidGet'
            );
        }

        // verify the required parameter 'client_uuid' is set
        if ($client_uuid === null || (is_array($client_uuid) && count($client_uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_uuid when calling adminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidGet'
            );
        }

        // verify the required parameter 'role_id' is set
        if ($role_id === null || (is_array($role_id) && count($role_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $role_id when calling adminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidGet'
            );
        }


        $resourcePath = '/admin/realms/{realm}/roles-by-id/{role-id}/composites/clients/{clientUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($client_uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'clientUuid' . '}',
                ObjectSerializer::toPathValue($client_uuid),
                $resourcePath
            );
        }
        // path params
        if ($role_id !== null) {
            $resourcePath = str_replace(
                '{' . 'role-id' . '}',
                ObjectSerializer::toPathValue($role_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmRolesByIdRoleIdCompositesDelete
     *
     * Remove a set of roles from the role&#39;s composite
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_id Role id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesByIdRoleIdCompositesDelete'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminRealmsRealmRolesByIdRoleIdCompositesDelete($realm, $role_id, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmRolesByIdRoleIdCompositesDelete'][0])
    {
        $this->adminRealmsRealmRolesByIdRoleIdCompositesDeleteWithHttpInfo($realm, $role_id, $role_representation, $contentType);
    }

    /**
     * Operation adminRealmsRealmRolesByIdRoleIdCompositesDeleteWithHttpInfo
     *
     * Remove a set of roles from the role&#39;s composite
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_id Role id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesByIdRoleIdCompositesDelete'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmRolesByIdRoleIdCompositesDeleteWithHttpInfo($realm, $role_id, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmRolesByIdRoleIdCompositesDelete'][0])
    {
        $request = $this->adminRealmsRealmRolesByIdRoleIdCompositesDeleteRequest($realm, $role_id, $role_representation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmRolesByIdRoleIdCompositesDeleteAsync
     *
     * Remove a set of roles from the role&#39;s composite
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_id Role id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesByIdRoleIdCompositesDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmRolesByIdRoleIdCompositesDeleteAsync($realm, $role_id, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmRolesByIdRoleIdCompositesDelete'][0])
    {
        return $this->adminRealmsRealmRolesByIdRoleIdCompositesDeleteAsyncWithHttpInfo($realm, $role_id, $role_representation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmRolesByIdRoleIdCompositesDeleteAsyncWithHttpInfo
     *
     * Remove a set of roles from the role&#39;s composite
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_id Role id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesByIdRoleIdCompositesDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmRolesByIdRoleIdCompositesDeleteAsyncWithHttpInfo($realm, $role_id, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmRolesByIdRoleIdCompositesDelete'][0])
    {
        $returnType = '';
        $request = $this->adminRealmsRealmRolesByIdRoleIdCompositesDeleteRequest($realm, $role_id, $role_representation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmRolesByIdRoleIdCompositesDelete'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_id Role id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesByIdRoleIdCompositesDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmRolesByIdRoleIdCompositesDeleteRequest($realm, $role_id, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmRolesByIdRoleIdCompositesDelete'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmRolesByIdRoleIdCompositesDelete'
            );
        }

        // verify the required parameter 'role_id' is set
        if ($role_id === null || (is_array($role_id) && count($role_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $role_id when calling adminRealmsRealmRolesByIdRoleIdCompositesDelete'
            );
        }



        $resourcePath = '/admin/realms/{realm}/roles-by-id/{role-id}/composites';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($role_id !== null) {
            $resourcePath = str_replace(
                '{' . 'role-id' . '}',
                ObjectSerializer::toPathValue($role_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($role_representation)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($role_representation));
            } else {
                $httpBody = $role_representation;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmRolesByIdRoleIdCompositesGet
     *
     * Get role&#39;s children Returns a set of role&#39;s children provided the role is a composite.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_id role_id (required)
     * @param  int $first first (optional)
     * @param  int $max max (optional)
     * @param  string $search search (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesByIdRoleIdCompositesGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]
     */
    public function adminRealmsRealmRolesByIdRoleIdCompositesGet($realm, $role_id, $first = null, $max = null, $search = null, string $contentType = self::contentTypes['adminRealmsRealmRolesByIdRoleIdCompositesGet'][0])
    {
        list($response) = $this->adminRealmsRealmRolesByIdRoleIdCompositesGetWithHttpInfo($realm, $role_id, $first, $max, $search, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmRolesByIdRoleIdCompositesGetWithHttpInfo
     *
     * Get role&#39;s children Returns a set of role&#39;s children provided the role is a composite.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_id (required)
     * @param  int $first (optional)
     * @param  int $max (optional)
     * @param  string $search (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesByIdRoleIdCompositesGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmRolesByIdRoleIdCompositesGetWithHttpInfo($realm, $role_id, $first = null, $max = null, $search = null, string $contentType = self::contentTypes['adminRealmsRealmRolesByIdRoleIdCompositesGet'][0])
    {
        $request = $this->adminRealmsRealmRolesByIdRoleIdCompositesGetRequest($realm, $role_id, $first, $max, $search, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmRolesByIdRoleIdCompositesGetAsync
     *
     * Get role&#39;s children Returns a set of role&#39;s children provided the role is a composite.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_id (required)
     * @param  int $first (optional)
     * @param  int $max (optional)
     * @param  string $search (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesByIdRoleIdCompositesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmRolesByIdRoleIdCompositesGetAsync($realm, $role_id, $first = null, $max = null, $search = null, string $contentType = self::contentTypes['adminRealmsRealmRolesByIdRoleIdCompositesGet'][0])
    {
        return $this->adminRealmsRealmRolesByIdRoleIdCompositesGetAsyncWithHttpInfo($realm, $role_id, $first, $max, $search, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmRolesByIdRoleIdCompositesGetAsyncWithHttpInfo
     *
     * Get role&#39;s children Returns a set of role&#39;s children provided the role is a composite.
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_id (required)
     * @param  int $first (optional)
     * @param  int $max (optional)
     * @param  string $search (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesByIdRoleIdCompositesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmRolesByIdRoleIdCompositesGetAsyncWithHttpInfo($realm, $role_id, $first = null, $max = null, $search = null, string $contentType = self::contentTypes['adminRealmsRealmRolesByIdRoleIdCompositesGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
        $request = $this->adminRealmsRealmRolesByIdRoleIdCompositesGetRequest($realm, $role_id, $first, $max, $search, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmRolesByIdRoleIdCompositesGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_id (required)
     * @param  int $first (optional)
     * @param  int $max (optional)
     * @param  string $search (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesByIdRoleIdCompositesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmRolesByIdRoleIdCompositesGetRequest($realm, $role_id, $first = null, $max = null, $search = null, string $contentType = self::contentTypes['adminRealmsRealmRolesByIdRoleIdCompositesGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmRolesByIdRoleIdCompositesGet'
            );
        }

        // verify the required parameter 'role_id' is set
        if ($role_id === null || (is_array($role_id) && count($role_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $role_id when calling adminRealmsRealmRolesByIdRoleIdCompositesGet'
            );
        }





        $resourcePath = '/admin/realms/{realm}/roles-by-id/{role-id}/composites';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $first,
            'first', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max,
            'max', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search,
            'search', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($role_id !== null) {
            $resourcePath = str_replace(
                '{' . 'role-id' . '}',
                ObjectSerializer::toPathValue($role_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmRolesByIdRoleIdCompositesPost
     *
     * Make the role a composite role by associating some child roles
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_id role_id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesByIdRoleIdCompositesPost'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminRealmsRealmRolesByIdRoleIdCompositesPost($realm, $role_id, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmRolesByIdRoleIdCompositesPost'][0])
    {
        $this->adminRealmsRealmRolesByIdRoleIdCompositesPostWithHttpInfo($realm, $role_id, $role_representation, $contentType);
    }

    /**
     * Operation adminRealmsRealmRolesByIdRoleIdCompositesPostWithHttpInfo
     *
     * Make the role a composite role by associating some child roles
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesByIdRoleIdCompositesPost'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmRolesByIdRoleIdCompositesPostWithHttpInfo($realm, $role_id, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmRolesByIdRoleIdCompositesPost'][0])
    {
        $request = $this->adminRealmsRealmRolesByIdRoleIdCompositesPostRequest($realm, $role_id, $role_representation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmRolesByIdRoleIdCompositesPostAsync
     *
     * Make the role a composite role by associating some child roles
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesByIdRoleIdCompositesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmRolesByIdRoleIdCompositesPostAsync($realm, $role_id, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmRolesByIdRoleIdCompositesPost'][0])
    {
        return $this->adminRealmsRealmRolesByIdRoleIdCompositesPostAsyncWithHttpInfo($realm, $role_id, $role_representation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmRolesByIdRoleIdCompositesPostAsyncWithHttpInfo
     *
     * Make the role a composite role by associating some child roles
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesByIdRoleIdCompositesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmRolesByIdRoleIdCompositesPostAsyncWithHttpInfo($realm, $role_id, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmRolesByIdRoleIdCompositesPost'][0])
    {
        $returnType = '';
        $request = $this->adminRealmsRealmRolesByIdRoleIdCompositesPostRequest($realm, $role_id, $role_representation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmRolesByIdRoleIdCompositesPost'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[] $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesByIdRoleIdCompositesPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmRolesByIdRoleIdCompositesPostRequest($realm, $role_id, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmRolesByIdRoleIdCompositesPost'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmRolesByIdRoleIdCompositesPost'
            );
        }

        // verify the required parameter 'role_id' is set
        if ($role_id === null || (is_array($role_id) && count($role_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $role_id when calling adminRealmsRealmRolesByIdRoleIdCompositesPost'
            );
        }



        $resourcePath = '/admin/realms/{realm}/roles-by-id/{role-id}/composites';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($role_id !== null) {
            $resourcePath = str_replace(
                '{' . 'role-id' . '}',
                ObjectSerializer::toPathValue($role_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($role_representation)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($role_representation));
            } else {
                $httpBody = $role_representation;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmRolesByIdRoleIdCompositesRealmGet
     *
     * Get realm-level roles that are in the role&#39;s composite
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_id role_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesByIdRoleIdCompositesRealmGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]
     */
    public function adminRealmsRealmRolesByIdRoleIdCompositesRealmGet($realm, $role_id, string $contentType = self::contentTypes['adminRealmsRealmRolesByIdRoleIdCompositesRealmGet'][0])
    {
        list($response) = $this->adminRealmsRealmRolesByIdRoleIdCompositesRealmGetWithHttpInfo($realm, $role_id, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmRolesByIdRoleIdCompositesRealmGetWithHttpInfo
     *
     * Get realm-level roles that are in the role&#39;s composite
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesByIdRoleIdCompositesRealmGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[], HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmRolesByIdRoleIdCompositesRealmGetWithHttpInfo($realm, $role_id, string $contentType = self::contentTypes['adminRealmsRealmRolesByIdRoleIdCompositesRealmGet'][0])
    {
        $request = $this->adminRealmsRealmRolesByIdRoleIdCompositesRealmGetRequest($realm, $role_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmRolesByIdRoleIdCompositesRealmGetAsync
     *
     * Get realm-level roles that are in the role&#39;s composite
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesByIdRoleIdCompositesRealmGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmRolesByIdRoleIdCompositesRealmGetAsync($realm, $role_id, string $contentType = self::contentTypes['adminRealmsRealmRolesByIdRoleIdCompositesRealmGet'][0])
    {
        return $this->adminRealmsRealmRolesByIdRoleIdCompositesRealmGetAsyncWithHttpInfo($realm, $role_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmRolesByIdRoleIdCompositesRealmGetAsyncWithHttpInfo
     *
     * Get realm-level roles that are in the role&#39;s composite
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesByIdRoleIdCompositesRealmGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmRolesByIdRoleIdCompositesRealmGetAsyncWithHttpInfo($realm, $role_id, string $contentType = self::contentTypes['adminRealmsRealmRolesByIdRoleIdCompositesRealmGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation[]';
        $request = $this->adminRealmsRealmRolesByIdRoleIdCompositesRealmGetRequest($realm, $role_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmRolesByIdRoleIdCompositesRealmGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesByIdRoleIdCompositesRealmGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmRolesByIdRoleIdCompositesRealmGetRequest($realm, $role_id, string $contentType = self::contentTypes['adminRealmsRealmRolesByIdRoleIdCompositesRealmGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmRolesByIdRoleIdCompositesRealmGet'
            );
        }

        // verify the required parameter 'role_id' is set
        if ($role_id === null || (is_array($role_id) && count($role_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $role_id when calling adminRealmsRealmRolesByIdRoleIdCompositesRealmGet'
            );
        }


        $resourcePath = '/admin/realms/{realm}/roles-by-id/{role-id}/composites/realm';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($role_id !== null) {
            $resourcePath = str_replace(
                '{' . 'role-id' . '}',
                ObjectSerializer::toPathValue($role_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmRolesByIdRoleIdDelete
     *
     * Delete the role
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_id id of role (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesByIdRoleIdDelete'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminRealmsRealmRolesByIdRoleIdDelete($realm, $role_id, string $contentType = self::contentTypes['adminRealmsRealmRolesByIdRoleIdDelete'][0])
    {
        $this->adminRealmsRealmRolesByIdRoleIdDeleteWithHttpInfo($realm, $role_id, $contentType);
    }

    /**
     * Operation adminRealmsRealmRolesByIdRoleIdDeleteWithHttpInfo
     *
     * Delete the role
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_id id of role (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesByIdRoleIdDelete'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmRolesByIdRoleIdDeleteWithHttpInfo($realm, $role_id, string $contentType = self::contentTypes['adminRealmsRealmRolesByIdRoleIdDelete'][0])
    {
        $request = $this->adminRealmsRealmRolesByIdRoleIdDeleteRequest($realm, $role_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmRolesByIdRoleIdDeleteAsync
     *
     * Delete the role
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_id id of role (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesByIdRoleIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmRolesByIdRoleIdDeleteAsync($realm, $role_id, string $contentType = self::contentTypes['adminRealmsRealmRolesByIdRoleIdDelete'][0])
    {
        return $this->adminRealmsRealmRolesByIdRoleIdDeleteAsyncWithHttpInfo($realm, $role_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmRolesByIdRoleIdDeleteAsyncWithHttpInfo
     *
     * Delete the role
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_id id of role (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesByIdRoleIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmRolesByIdRoleIdDeleteAsyncWithHttpInfo($realm, $role_id, string $contentType = self::contentTypes['adminRealmsRealmRolesByIdRoleIdDelete'][0])
    {
        $returnType = '';
        $request = $this->adminRealmsRealmRolesByIdRoleIdDeleteRequest($realm, $role_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmRolesByIdRoleIdDelete'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_id id of role (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesByIdRoleIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmRolesByIdRoleIdDeleteRequest($realm, $role_id, string $contentType = self::contentTypes['adminRealmsRealmRolesByIdRoleIdDelete'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmRolesByIdRoleIdDelete'
            );
        }

        // verify the required parameter 'role_id' is set
        if ($role_id === null || (is_array($role_id) && count($role_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $role_id when calling adminRealmsRealmRolesByIdRoleIdDelete'
            );
        }


        $resourcePath = '/admin/realms/{realm}/roles-by-id/{role-id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($role_id !== null) {
            $resourcePath = str_replace(
                '{' . 'role-id' . '}',
                ObjectSerializer::toPathValue($role_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmRolesByIdRoleIdGet
     *
     * Get a specific role&#39;s representation
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_id id of role (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesByIdRoleIdGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation
     */
    public function adminRealmsRealmRolesByIdRoleIdGet($realm, $role_id, string $contentType = self::contentTypes['adminRealmsRealmRolesByIdRoleIdGet'][0])
    {
        list($response) = $this->adminRealmsRealmRolesByIdRoleIdGetWithHttpInfo($realm, $role_id, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmRolesByIdRoleIdGetWithHttpInfo
     *
     * Get a specific role&#39;s representation
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_id id of role (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesByIdRoleIdGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmRolesByIdRoleIdGetWithHttpInfo($realm, $role_id, string $contentType = self::contentTypes['adminRealmsRealmRolesByIdRoleIdGet'][0])
    {
        $request = $this->adminRealmsRealmRolesByIdRoleIdGetRequest($realm, $role_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmRolesByIdRoleIdGetAsync
     *
     * Get a specific role&#39;s representation
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_id id of role (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesByIdRoleIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmRolesByIdRoleIdGetAsync($realm, $role_id, string $contentType = self::contentTypes['adminRealmsRealmRolesByIdRoleIdGet'][0])
    {
        return $this->adminRealmsRealmRolesByIdRoleIdGetAsyncWithHttpInfo($realm, $role_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmRolesByIdRoleIdGetAsyncWithHttpInfo
     *
     * Get a specific role&#39;s representation
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_id id of role (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesByIdRoleIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmRolesByIdRoleIdGetAsyncWithHttpInfo($realm, $role_id, string $contentType = self::contentTypes['adminRealmsRealmRolesByIdRoleIdGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation';
        $request = $this->adminRealmsRealmRolesByIdRoleIdGetRequest($realm, $role_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmRolesByIdRoleIdGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_id id of role (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesByIdRoleIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmRolesByIdRoleIdGetRequest($realm, $role_id, string $contentType = self::contentTypes['adminRealmsRealmRolesByIdRoleIdGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmRolesByIdRoleIdGet'
            );
        }

        // verify the required parameter 'role_id' is set
        if ($role_id === null || (is_array($role_id) && count($role_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $role_id when calling adminRealmsRealmRolesByIdRoleIdGet'
            );
        }


        $resourcePath = '/admin/realms/{realm}/roles-by-id/{role-id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($role_id !== null) {
            $resourcePath = str_replace(
                '{' . 'role-id' . '}',
                ObjectSerializer::toPathValue($role_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmRolesByIdRoleIdManagementPermissionsGet
     *
     * Return object stating whether role Authorization permissions have been initialized or not and a reference
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_id role_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesByIdRoleIdManagementPermissionsGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference
     */
    public function adminRealmsRealmRolesByIdRoleIdManagementPermissionsGet($realm, $role_id, string $contentType = self::contentTypes['adminRealmsRealmRolesByIdRoleIdManagementPermissionsGet'][0])
    {
        list($response) = $this->adminRealmsRealmRolesByIdRoleIdManagementPermissionsGetWithHttpInfo($realm, $role_id, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmRolesByIdRoleIdManagementPermissionsGetWithHttpInfo
     *
     * Return object stating whether role Authorization permissions have been initialized or not and a reference
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesByIdRoleIdManagementPermissionsGet'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmRolesByIdRoleIdManagementPermissionsGetWithHttpInfo($realm, $role_id, string $contentType = self::contentTypes['adminRealmsRealmRolesByIdRoleIdManagementPermissionsGet'][0])
    {
        $request = $this->adminRealmsRealmRolesByIdRoleIdManagementPermissionsGetRequest($realm, $role_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmRolesByIdRoleIdManagementPermissionsGetAsync
     *
     * Return object stating whether role Authorization permissions have been initialized or not and a reference
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesByIdRoleIdManagementPermissionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmRolesByIdRoleIdManagementPermissionsGetAsync($realm, $role_id, string $contentType = self::contentTypes['adminRealmsRealmRolesByIdRoleIdManagementPermissionsGet'][0])
    {
        return $this->adminRealmsRealmRolesByIdRoleIdManagementPermissionsGetAsyncWithHttpInfo($realm, $role_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmRolesByIdRoleIdManagementPermissionsGetAsyncWithHttpInfo
     *
     * Return object stating whether role Authorization permissions have been initialized or not and a reference
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesByIdRoleIdManagementPermissionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmRolesByIdRoleIdManagementPermissionsGetAsyncWithHttpInfo($realm, $role_id, string $contentType = self::contentTypes['adminRealmsRealmRolesByIdRoleIdManagementPermissionsGet'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference';
        $request = $this->adminRealmsRealmRolesByIdRoleIdManagementPermissionsGetRequest($realm, $role_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmRolesByIdRoleIdManagementPermissionsGet'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesByIdRoleIdManagementPermissionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmRolesByIdRoleIdManagementPermissionsGetRequest($realm, $role_id, string $contentType = self::contentTypes['adminRealmsRealmRolesByIdRoleIdManagementPermissionsGet'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmRolesByIdRoleIdManagementPermissionsGet'
            );
        }

        // verify the required parameter 'role_id' is set
        if ($role_id === null || (is_array($role_id) && count($role_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $role_id when calling adminRealmsRealmRolesByIdRoleIdManagementPermissionsGet'
            );
        }


        $resourcePath = '/admin/realms/{realm}/roles-by-id/{role-id}/management/permissions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($role_id !== null) {
            $resourcePath = str_replace(
                '{' . 'role-id' . '}',
                ObjectSerializer::toPathValue($role_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmRolesByIdRoleIdManagementPermissionsPut
     *
     * Return object stating whether role Authorization permissions have been initialized or not and a reference
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_id role_id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference $management_permission_reference management_permission_reference (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesByIdRoleIdManagementPermissionsPut'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference
     */
    public function adminRealmsRealmRolesByIdRoleIdManagementPermissionsPut($realm, $role_id, $management_permission_reference = null, string $contentType = self::contentTypes['adminRealmsRealmRolesByIdRoleIdManagementPermissionsPut'][0])
    {
        list($response) = $this->adminRealmsRealmRolesByIdRoleIdManagementPermissionsPutWithHttpInfo($realm, $role_id, $management_permission_reference, $contentType);
        return $response;
    }

    /**
     * Operation adminRealmsRealmRolesByIdRoleIdManagementPermissionsPutWithHttpInfo
     *
     * Return object stating whether role Authorization permissions have been initialized or not and a reference
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference $management_permission_reference (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesByIdRoleIdManagementPermissionsPut'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmRolesByIdRoleIdManagementPermissionsPutWithHttpInfo($realm, $role_id, $management_permission_reference = null, string $contentType = self::contentTypes['adminRealmsRealmRolesByIdRoleIdManagementPermissionsPut'][0])
    {
        $request = $this->adminRealmsRealmRolesByIdRoleIdManagementPermissionsPutRequest($realm, $role_id, $management_permission_reference, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmRolesByIdRoleIdManagementPermissionsPutAsync
     *
     * Return object stating whether role Authorization permissions have been initialized or not and a reference
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference $management_permission_reference (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesByIdRoleIdManagementPermissionsPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmRolesByIdRoleIdManagementPermissionsPutAsync($realm, $role_id, $management_permission_reference = null, string $contentType = self::contentTypes['adminRealmsRealmRolesByIdRoleIdManagementPermissionsPut'][0])
    {
        return $this->adminRealmsRealmRolesByIdRoleIdManagementPermissionsPutAsyncWithHttpInfo($realm, $role_id, $management_permission_reference, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmRolesByIdRoleIdManagementPermissionsPutAsyncWithHttpInfo
     *
     * Return object stating whether role Authorization permissions have been initialized or not and a reference
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference $management_permission_reference (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesByIdRoleIdManagementPermissionsPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmRolesByIdRoleIdManagementPermissionsPutAsyncWithHttpInfo($realm, $role_id, $management_permission_reference = null, string $contentType = self::contentTypes['adminRealmsRealmRolesByIdRoleIdManagementPermissionsPut'][0])
    {
        $returnType = '\WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference';
        $request = $this->adminRealmsRealmRolesByIdRoleIdManagementPermissionsPutRequest($realm, $role_id, $management_permission_reference, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmRolesByIdRoleIdManagementPermissionsPut'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_id (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\ManagementPermissionReference $management_permission_reference (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesByIdRoleIdManagementPermissionsPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmRolesByIdRoleIdManagementPermissionsPutRequest($realm, $role_id, $management_permission_reference = null, string $contentType = self::contentTypes['adminRealmsRealmRolesByIdRoleIdManagementPermissionsPut'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmRolesByIdRoleIdManagementPermissionsPut'
            );
        }

        // verify the required parameter 'role_id' is set
        if ($role_id === null || (is_array($role_id) && count($role_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $role_id when calling adminRealmsRealmRolesByIdRoleIdManagementPermissionsPut'
            );
        }



        $resourcePath = '/admin/realms/{realm}/roles-by-id/{role-id}/management/permissions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($role_id !== null) {
            $resourcePath = str_replace(
                '{' . 'role-id' . '}',
                ObjectSerializer::toPathValue($role_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($management_permission_reference)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($management_permission_reference));
            } else {
                $httpBody = $management_permission_reference;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminRealmsRealmRolesByIdRoleIdPut
     *
     * Update the role
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_id id of role (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation $role_representation role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesByIdRoleIdPut'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function adminRealmsRealmRolesByIdRoleIdPut($realm, $role_id, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmRolesByIdRoleIdPut'][0])
    {
        $this->adminRealmsRealmRolesByIdRoleIdPutWithHttpInfo($realm, $role_id, $role_representation, $contentType);
    }

    /**
     * Operation adminRealmsRealmRolesByIdRoleIdPutWithHttpInfo
     *
     * Update the role
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_id id of role (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesByIdRoleIdPut'] to see the possible values for this operation
     *
     * @throws \WebMI\KeycloakApiClient\KeycloakApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminRealmsRealmRolesByIdRoleIdPutWithHttpInfo($realm, $role_id, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmRolesByIdRoleIdPut'][0])
    {
        $request = $this->adminRealmsRealmRolesByIdRoleIdPutRequest($realm, $role_id, $role_representation, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation adminRealmsRealmRolesByIdRoleIdPutAsync
     *
     * Update the role
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_id id of role (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesByIdRoleIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmRolesByIdRoleIdPutAsync($realm, $role_id, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmRolesByIdRoleIdPut'][0])
    {
        return $this->adminRealmsRealmRolesByIdRoleIdPutAsyncWithHttpInfo($realm, $role_id, $role_representation, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminRealmsRealmRolesByIdRoleIdPutAsyncWithHttpInfo
     *
     * Update the role
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_id id of role (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesByIdRoleIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminRealmsRealmRolesByIdRoleIdPutAsyncWithHttpInfo($realm, $role_id, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmRolesByIdRoleIdPut'][0])
    {
        $returnType = '';
        $request = $this->adminRealmsRealmRolesByIdRoleIdPutRequest($realm, $role_id, $role_representation, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminRealmsRealmRolesByIdRoleIdPut'
     *
     * @param  string $realm realm name (not id!) (required)
     * @param  string $role_id id of role (required)
     * @param  \WebMI\KeycloakApiClient\KeycloakApi\Model\RoleRepresentation $role_representation (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminRealmsRealmRolesByIdRoleIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminRealmsRealmRolesByIdRoleIdPutRequest($realm, $role_id, $role_representation = null, string $contentType = self::contentTypes['adminRealmsRealmRolesByIdRoleIdPut'][0])
    {

        // verify the required parameter 'realm' is set
        if ($realm === null || (is_array($realm) && count($realm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $realm when calling adminRealmsRealmRolesByIdRoleIdPut'
            );
        }

        // verify the required parameter 'role_id' is set
        if ($role_id === null || (is_array($role_id) && count($role_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $role_id when calling adminRealmsRealmRolesByIdRoleIdPut'
            );
        }



        $resourcePath = '/admin/realms/{realm}/roles-by-id/{role-id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($realm !== null) {
            $resourcePath = str_replace(
                '{' . 'realm' . '}',
                ObjectSerializer::toPathValue($realm),
                $resourcePath
            );
        }
        // path params
        if ($role_id !== null) {
            $resourcePath = str_replace(
                '{' . 'role-id' . '}',
                ObjectSerializer::toPathValue($role_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($role_representation)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($role_representation));
            } else {
                $httpBody = $role_representation;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
